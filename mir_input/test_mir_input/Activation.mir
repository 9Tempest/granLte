--- |
  ; ModuleID = 'Activation.ll'
  source_filename = "pytorch/aten/src/ATen/native/quantized/cuda/Activation.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  %"struct.c10::UndefinedTensorImpl" = type { %"struct.c10::TensorImpl" }
  %"struct.c10::TensorImpl" = type { %"class.c10::intrusive_ptr_target", %"struct.c10::Storage", %"class.std::unique_ptr.5", %"class.std::unique_ptr.13", %"struct.c10::VariableVersion", %"struct.c10::impl::PyObjectSlot", %"class.c10::impl::SizesAndStrides", i64, i64, %"class.caffe2::TypeMeta", %"class.c10::optional.43", [3 x i8], %"class.c10::DispatchKeySet" }
  %"class.c10::intrusive_ptr_target" = type { ptr, %"struct.std::atomic", %"struct.std::atomic" }
  %"struct.std::atomic" = type { %"struct.std::__atomic_base" }
  %"struct.std::__atomic_base" = type { i64 }
  %"struct.c10::Storage" = type { %"class.c10::intrusive_ptr.0" }
  %"class.c10::intrusive_ptr.0" = type { ptr }
  %"class.std::unique_ptr.5" = type { %"struct.std::__uniq_ptr_data.6" }
  %"struct.std::__uniq_ptr_data.6" = type { %"class.std::__uniq_ptr_impl.7" }
  %"class.std::__uniq_ptr_impl.7" = type { %"class.std::tuple.8" }
  %"class.std::tuple.8" = type { %"struct.std::_Tuple_impl.9" }
  %"struct.std::_Tuple_impl.9" = type { %"struct.std::_Head_base.12" }
  %"struct.std::_Head_base.12" = type { ptr }
  %"class.std::unique_ptr.13" = type { %"struct.std::__uniq_ptr_data.14" }
  %"struct.std::__uniq_ptr_data.14" = type { %"class.std::__uniq_ptr_impl.15" }
  %"class.std::__uniq_ptr_impl.15" = type { %"class.std::tuple.16" }
  %"class.std::tuple.16" = type { %"struct.std::_Tuple_impl.17" }
  %"struct.std::_Tuple_impl.17" = type { %"struct.std::_Head_base.20" }
  %"struct.std::_Head_base.20" = type { ptr }
  %"struct.c10::VariableVersion" = type { %"class.c10::intrusive_ptr.39" }
  %"class.c10::intrusive_ptr.39" = type { ptr }
  %"struct.c10::impl::PyObjectSlot" = type { %"struct.std::atomic.3", ptr }
  %"struct.std::atomic.3" = type { %"struct.std::__atomic_base.4" }
  %"struct.std::__atomic_base.4" = type { ptr }
  %"class.c10::impl::SizesAndStrides" = type { i64, %union.anon.42 }
  %union.anon.42 = type { [10 x i64] }
  %"class.caffe2::TypeMeta" = type { i16 }
  %"class.c10::optional.43" = type { %"struct.c10::trivially_copyable_optimization_optional_base" }
  %"struct.c10::trivially_copyable_optimization_optional_base" = type { i8, %"union.c10::constexpr_storage_t" }
  %"union.c10::constexpr_storage_t" = type { %"struct.c10::Device" }
  %"struct.c10::Device" = type { i8, i8 }
  %"class.c10::DispatchKeySet" = type { i64 }
  %"class.at::Tensor" = type { %"class.at::TensorBase" }
  %"class.at::TensorBase" = type { %"class.c10::intrusive_ptr" }
  %"class.c10::intrusive_ptr" = type { ptr }
  %"class.c10::basic_string_view" = type { ptr, i64 }
  %"class.c10::Scalar" = type { i32, [12 x i8], %"union.c10::Scalar::v_t" }
  %"union.c10::Scalar::v_t" = type { %"struct.c10::complex" }
  %"struct.c10::complex" = type { double, double }
  %"struct.c10::raw::DontIncreaseRefcount" = type { i8 }
  %"class.c10::intrusive_ptr.44" = type { ptr }
  
  $_ZNK2at10TensorBase5numelEv = comdat any
  
  $_ZN2at6TensorC2Ev = comdat any
  
  $_ZN2at10dequantizeERKNS_6TensorE = comdat any
  
  $_ZN2at4geluERKNS_6TensorEN3c1017basic_string_viewIcEE = comdat any
  
  $_ZN3c1017basic_string_viewIcEC2EPKc = comdat any
  
  $_ZN2at19quantize_per_tensorERKNS_6TensorEdlN3c1010ScalarTypeE = comdat any
  
  $_ZNK2at6Tensor7q_scaleEv = comdat any
  
  $_ZNK2at6Tensor12q_zero_pointEv = comdat any
  
  $_ZNK2at10TensorBase11scalar_typeEv = comdat any
  
  $_ZN2at6TensorD2Ev = comdat any
  
  $_ZNK2at6Tensor8int_reprEv = comdat any
  
  $_ZN3c106ScalarC2El = comdat any
  
  $_ZN3c106ScalarD2Ev = comdat any
  
  $_ZN2at5whereERKNS_6TensorES2_RKN3c106ScalarE = comdat any
  
  $_ZN2at33_make_per_tensor_quantized_tensorERKNS_6TensorEdl = comdat any
  
  $_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv = comdat any
  
  $_ZNK3c1010TensorImpl5numelEv = comdat any
  
  $_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE = comdat any
  
  $_ZN2at10TensorBaseC2Ev = comdat any
  
  $_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2Ev = comdat any
  
  $_ZN3c1019UndefinedTensorImpl9singletonEv = comdat any
  
  $__clang_call_terminate = comdat any
  
  $_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2EPS1_NS_3raw20DontIncreaseRefcountE = comdat any
  
  $_ZN3c1017basic_string_viewIcE7strlen_EPKc = comdat any
  
  $_ZN3c1017basic_string_viewIcEC2EPKcm = comdat any
  
  $_ZNK3c1010TensorImpl5dtypeEv = comdat any
  
  $_ZN6caffe28TypeMeta12toScalarTypeEv = comdat any
  
  $_ZNK6caffe28TypeMeta12isScalarTypeEv = comdat any
  
  $_ZN2at10TensorBaseD2Ev = comdat any
  
  $_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEED2Ev = comdat any
  
  $_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev = comdat any
  
  $_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE = comdat any
  
  $_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE = comdat any
  
  $_ZStanSt12memory_orderSt23__memory_order_modifier = comdat any
  
  $_ZNK2at6Tensor2gtERKN3c106ScalarE = comdat any
  
  $_ZN3c106ScalarC2IlLPb0EEET_b = comdat any
  
  $_ZN3c106Scalar3v_tC2Ev = comdat any
  
  $_ZN3c107convertIllEET_T0_ = comdat any
  
  $_ZN3c1027static_cast_with_inter_typeIllE5applyEl = comdat any
  
  $_ZN3c1010maybe_realILb0ElE5applyEl = comdat any
  
  $_ZN3c106Scalar7destroyEv = comdat any
  
  $_ZN3c103raw13intrusive_ptr6decrefEPNS_20intrusive_ptr_targetE = comdat any
  
  $_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_ = comdat any
  
  $_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEED2Ev = comdat any
  
  $_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv = comdat any
  
  $_ZN3c103strIJA68_cEEEDcDpRKT_ = comdat any
  
  $_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEEC2EPS1_NS_3raw20DontIncreaseRefcountE = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcEE4callES3_ = comdat any
  
  $_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE6reset_Ev = comdat any
  
  @.str = private unnamed_addr constant [5 x i8] c"none\00", align 1
  @_ZN3c1019UndefinedTensorImpl10_singletonE = external global %"struct.c10::UndefinedTensorImpl", align 8
  @__func__._ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_ = private unnamed_addr constant [8 x i8] c"reclaim\00", align 1
  @.str.1 = private unnamed_addr constant [53 x i8] c"/u9/z277zhu/granLte/pytorch/c10/util/intrusive_ptr.h\00", align 1
  @.str.2 = private unnamed_addr constant [225 x i8] c"owning_ptr == NullType::singleton() || owning_ptr->refcount_.load() == 0 || owning_ptr->weakcount_.load() INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/util/intrusive_ptr.h\22:475, please report a bug to PyTorch. \00", align 1
  @.str.3 = private unnamed_addr constant [68 x i8] c"TTarget violates the invariant that refcount > 0  =>  weakcount > 0\00", align 1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at6native19gelu_quantized_cudaERKNS_6TensorEN3c1017basic_string_viewIcEE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr %2, i64 %3) local_unnamed_addr #0 personality ptr @__gxx_personality_v0 {
  BB_0:
    call void asm sideeffect "# LLVM BB: BB_0", ""()
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::basic_string_view", align 8
    %6 = alloca ptr, align 8
    %7 = alloca %"class.at::Tensor", align 8
    %8 = alloca %"class.at::Tensor", align 8
    %9 = alloca %"class.c10::basic_string_view", align 8
    %10 = alloca ptr, align 8
    %11 = alloca i32, align 4
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %4, align 8
    %13 = bitcast ptr %5 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    store ptr %2, ptr %14, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    store i64 %3, ptr %15, align 8
    store ptr %1, ptr %6, align 8
    %16 = load ptr, ptr %6, align 8
    %17 = bitcast ptr %16 to ptr
    %18 = call noundef i64 @_ZNK2at10TensorBase5numelEv(ptr noundef nonnull align 8 dereferenceable(8) %17)
    %19 = icmp eq i64 %18, 0
    br i1 %19, label %BB_1, label %BB_2
  
  BB_1:                                             ; preds = %BB_0
    call void asm sideeffect "# LLVM BB: BB_1", ""()
    %20 = bitcast ptr %0 to ptr
    call void @llvm.memset.p0.i64(ptr align 8 %20, i8 0, i64 8, i1 false)
    call void @_ZN2at6TensorC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) #9
    br label %BB_12
  
  BB_2:                                             ; preds = %BB_0
    call void asm sideeffect "# LLVM BB: BB_2", ""()
    %21 = load ptr, ptr %6, align 8
    call void @_ZN2at10dequantizeERKNS_6TensorE(ptr sret(%"class.at::Tensor") align 8 %7, ptr noundef nonnull align 8 dereferenceable(8) %21)
    invoke void @_ZN3c1017basic_string_viewIcEC2EPKc(ptr noundef nonnull align 8 dereferenceable(16) %9, ptr noundef @.str)
            to label %BB_3 unwind label %BB_9
  
  BB_3:                                             ; preds = %BB_2
    call void asm sideeffect "# LLVM BB: BB_3", ""()
    %22 = bitcast ptr %9 to ptr
    %23 = getelementptr inbounds { ptr, i64 }, ptr %22, i32 0, i32 0
    %24 = load ptr, ptr %23, align 8
    %25 = getelementptr inbounds { ptr, i64 }, ptr %22, i32 0, i32 1
    %26 = load i64, ptr %25, align 8
    invoke void @_ZN2at4geluERKNS_6TensorEN3c1017basic_string_viewIcEE(ptr sret(%"class.at::Tensor") align 8 %8, ptr noundef nonnull align 8 dereferenceable(8) %7, ptr %24, i64 %26)
            to label %BB_4 unwind label %BB_9
  
  BB_4:                                             ; preds = %BB_3
    call void asm sideeffect "# LLVM BB: BB_4", ""()
    %27 = load ptr, ptr %6, align 8
    %28 = invoke noundef double @_ZNK2at6Tensor7q_scaleEv(ptr noundef nonnull align 8 dereferenceable(8) %27)
            to label %BB_5 unwind label %BB_10
  
  BB_5:                                             ; preds = %BB_4
    call void asm sideeffect "# LLVM BB: BB_5", ""()
    %29 = load ptr, ptr %6, align 8
    %30 = invoke noundef i64 @_ZNK2at6Tensor12q_zero_pointEv(ptr noundef nonnull align 8 dereferenceable(8) %29)
            to label %BB_6 unwind label %BB_10
  
  BB_6:                                             ; preds = %BB_5
    call void asm sideeffect "# LLVM BB: BB_6", ""()
    %31 = load ptr, ptr %6, align 8
    %32 = bitcast ptr %31 to ptr
    %33 = invoke noundef signext i8 @_ZNK2at10TensorBase11scalar_typeEv(ptr noundef nonnull align 8 dereferenceable(8) %32)
            to label %BB_7 unwind label %BB_10
  
  BB_7:                                             ; preds = %BB_6
    call void asm sideeffect "# LLVM BB: BB_7", ""()
    invoke void @_ZN2at19quantize_per_tensorERKNS_6TensorEdlN3c1010ScalarTypeE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %8, double noundef %28, i64 noundef %30, i8 noundef signext %33)
            to label %BB_8 unwind label %BB_10
  
  BB_8:                                             ; preds = %BB_7
    call void asm sideeffect "# LLVM BB: BB_8", ""()
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %8) #9
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %7) #9
    br label %BB_12
  
  BB_9:                                             ; preds = %BB_3, %BB_2
    %34 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_9", ""()
    %35 = extractvalue { ptr, i32 } %34, 0
    store ptr %35, ptr %10, align 8
    %36 = extractvalue { ptr, i32 } %34, 1
    store i32 %36, ptr %11, align 4
    br label %BB_11
  
  BB_10:                                            ; preds = %BB_7, %BB_6, %BB_5, %BB_4
    %37 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_10", ""()
    %38 = extractvalue { ptr, i32 } %37, 0
    store ptr %38, ptr %10, align 8
    %39 = extractvalue { ptr, i32 } %37, 1
    store i32 %39, ptr %11, align 4
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %8) #9
    br label %BB_11
  
  BB_11:                                            ; preds = %BB_10, %BB_9
    call void asm sideeffect "# LLVM BB: BB_11", ""()
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %7) #9
    br label %BB_13
  
  BB_12:                                            ; preds = %BB_8, %BB_1
    call void asm sideeffect "# LLVM BB: BB_12", ""()
    ret void
  
  BB_13:                                            ; preds = %BB_11
    call void asm sideeffect "# LLVM BB: BB_13", ""()
    %40 = load ptr, ptr %10, align 8
    call void @_Unwind_Resume(ptr %40) #10
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK2at10TensorBase5numelEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_14:
    call void asm sideeffect "# LLVM BB: BB_14", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.at::TensorBase", ptr %2, i32 0, i32 0
    %4 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %3) #9
    %5 = call noundef i64 @_ZNK3c1010TensorImpl5numelEv(ptr noundef nonnull align 8 dereferenceable(192) %4)
    ret i64 %5
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN2at6TensorC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_15:
    call void asm sideeffect "# LLVM BB: BB_15", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    call void @_ZN2at10TensorBaseC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %3) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at10dequantizeERKNS_6TensorE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat {
  BB_16:
    call void asm sideeffect "# LLVM BB: BB_16", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = bitcast ptr %0 to ptr
    store ptr %4, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %5 = load ptr, ptr %3, align 8
    call void @_ZN2at4_ops15dequantize_self4callERKNS_6TensorE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %5)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at4geluERKNS_6TensorEN3c1017basic_string_viewIcEE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr %2, i64 %3) local_unnamed_addr #0 comdat {
  BB_17:
    call void asm sideeffect "# LLVM BB: BB_17", ""()
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::basic_string_view", align 8
    %6 = alloca ptr, align 8
    %7 = alloca %"class.c10::basic_string_view", align 8
    %8 = bitcast ptr %0 to ptr
    store ptr %8, ptr %4, align 8
    %9 = bitcast ptr %5 to ptr
    %10 = getelementptr inbounds { ptr, i64 }, ptr %9, i32 0, i32 0
    store ptr %2, ptr %10, align 8
    %11 = getelementptr inbounds { ptr, i64 }, ptr %9, i32 0, i32 1
    store i64 %3, ptr %11, align 8
    store ptr %1, ptr %6, align 8
    %12 = load ptr, ptr %6, align 8
    %13 = bitcast ptr %7 to ptr
    %14 = bitcast ptr %5 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %13, ptr align 8 %14, i64 16, i1 false)
    %15 = bitcast ptr %7 to ptr
    %16 = getelementptr inbounds { ptr, i64 }, ptr %15, i32 0, i32 0
    %17 = load ptr, ptr %16, align 8
    %18 = getelementptr inbounds { ptr, i64 }, ptr %15, i32 0, i32 1
    %19 = load i64, ptr %18, align 8
    call void @_ZN2at4_ops4gelu4callERKNS_6TensorEN3c1017basic_string_viewIcEE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %12, ptr %17, i64 %19)
    ret void
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1017basic_string_viewIcEC2EPKc(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef %1) unnamed_addr #2 comdat align 2 {
  BB_18:
    call void asm sideeffect "# LLVM BB: BB_18", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef i64 @_ZN3c1017basic_string_viewIcE7strlen_EPKc(ptr noundef %6) #9
    call void @_ZN3c1017basic_string_viewIcEC2EPKcm(ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef %5, i64 noundef %7)
    ret void
  }
  
  declare i32 @__gxx_personality_v0(...)
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at19quantize_per_tensorERKNS_6TensorEdlN3c1010ScalarTypeE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, double noundef %2, i64 noundef %3, i8 noundef signext %4) local_unnamed_addr #0 comdat {
  BB_19:
    call void asm sideeffect "# LLVM BB: BB_19", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca double, align 8
    %8 = alloca i64, align 8
    %9 = alloca i8, align 1
    %10 = bitcast ptr %0 to ptr
    store ptr %10, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store double %2, ptr %7, align 8
    store i64 %3, ptr %8, align 8
    store i8 %4, ptr %9, align 1
    %11 = load ptr, ptr %6, align 8
    %12 = load double, ptr %7, align 8
    %13 = load i64, ptr %8, align 8
    %14 = load i8, ptr %9, align 1
    call void @_ZN2at4_ops19quantize_per_tensor4callERKNS_6TensorEdlN3c1010ScalarTypeE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %11, double noundef %12, i64 noundef %13, i8 noundef signext %14)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef double @_ZNK2at6Tensor7q_scaleEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_20:
    call void asm sideeffect "# LLVM BB: BB_20", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef double @_ZN2at4_ops7q_scale4callERKNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8) %2)
    ret double %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK2at6Tensor12q_zero_pointEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_21:
    call void asm sideeffect "# LLVM BB: BB_21", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef i64 @_ZN2at4_ops12q_zero_point4callERKNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8) %2)
    ret i64 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef signext i8 @_ZNK2at10TensorBase11scalar_typeEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_22:
    call void asm sideeffect "# LLVM BB: BB_22", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.caffe2::TypeMeta", align 2
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = getelementptr inbounds %"class.at::TensorBase", ptr %3, i32 0, i32 0
    %5 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #9
    %6 = call i16 @_ZNK3c1010TensorImpl5dtypeEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %7 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    store i16 %6, ptr %7, align 2
    %8 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    %9 = load i16, ptr %8, align 2
    %10 = call fastcc noundef signext i8 @_ZN3c10L20typeMetaToScalarTypeEN6caffe28TypeMetaE(i16 %9)
    ret i8 %10
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_23:
    call void asm sideeffect "# LLVM BB: BB_23", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    call void @_ZN2at10TensorBaseD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %3) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at6native19relu_quantized_cudaERKNS_6TensorE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 personality ptr @__gxx_personality_v0 {
  BB_24:
    call void asm sideeffect "# LLVM BB: BB_24", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca %"class.at::Tensor", align 8
    %6 = alloca %"class.at::Tensor", align 8
    %7 = alloca %"class.c10::Scalar", align 16
    %8 = alloca ptr, align 8
    %9 = alloca i32, align 4
    %10 = alloca %"class.at::Tensor", align 8
    %11 = alloca %"class.c10::Scalar", align 16
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %13 = load ptr, ptr %3, align 8
    %14 = call noundef i64 @_ZNK2at6Tensor12q_zero_pointEv(ptr noundef nonnull align 8 dereferenceable(8) %13)
    store i64 %14, ptr %4, align 8
    %15 = load ptr, ptr %3, align 8
    call void @_ZNK2at6Tensor8int_reprEv(ptr sret(%"class.at::Tensor") align 8 %5, ptr noundef nonnull align 8 dereferenceable(8) %15)
    %16 = load i64, ptr %4, align 8
    invoke void @_ZN3c106ScalarC2El(ptr noundef nonnull align 16 dereferenceable(32) %7, i64 noundef %16)
            to label %BB_25 unwind label %BB_31
  
  BB_25:                                            ; preds = %BB_24
    call void asm sideeffect "# LLVM BB: BB_25", ""()
    invoke fastcc void @_ZN2atgtERKNS_6TensorERKN3c106ScalarE(ptr noalias align 8 %6, ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 16 dereferenceable(32) %7)
            to label %BB_26 unwind label %BB_32
  
  BB_26:                                            ; preds = %BB_25
    call void asm sideeffect "# LLVM BB: BB_26", ""()
    call void @_ZN3c106ScalarD2Ev(ptr noundef nonnull align 16 dereferenceable(32) %7) #9
    %17 = load i64, ptr %4, align 8
    invoke void @_ZN3c106ScalarC2El(ptr noundef nonnull align 16 dereferenceable(32) %11, i64 noundef %17)
            to label %BB_27 unwind label %BB_33
  
  BB_27:                                            ; preds = %BB_26
    call void asm sideeffect "# LLVM BB: BB_27", ""()
    invoke void @_ZN2at5whereERKNS_6TensorES2_RKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8 %10, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 16 dereferenceable(32) %11)
            to label %BB_28 unwind label %BB_34
  
  BB_28:                                            ; preds = %BB_27
    call void asm sideeffect "# LLVM BB: BB_28", ""()
    call void @_ZN3c106ScalarD2Ev(ptr noundef nonnull align 16 dereferenceable(32) %11) #9
    %18 = load ptr, ptr %3, align 8
    %19 = invoke noundef double @_ZNK2at6Tensor7q_scaleEv(ptr noundef nonnull align 8 dereferenceable(8) %18)
            to label %BB_29 unwind label %BB_35
  
  BB_29:                                            ; preds = %BB_28
    call void asm sideeffect "# LLVM BB: BB_29", ""()
    %20 = load i64, ptr %4, align 8
    invoke void @_ZN2at33_make_per_tensor_quantized_tensorERKNS_6TensorEdl(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %10, double noundef %19, i64 noundef %20)
            to label %BB_30 unwind label %BB_35
  
  BB_30:                                            ; preds = %BB_29
    call void asm sideeffect "# LLVM BB: BB_30", ""()
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %10) #9
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %6) #9
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %5) #9
    ret void
  
  BB_31:                                            ; preds = %BB_24
    %21 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_31", ""()
    %22 = extractvalue { ptr, i32 } %21, 0
    store ptr %22, ptr %8, align 8
    %23 = extractvalue { ptr, i32 } %21, 1
    store i32 %23, ptr %9, align 4
    br label %BB_37
  
  BB_32:                                            ; preds = %BB_25
    %24 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_32", ""()
    %25 = extractvalue { ptr, i32 } %24, 0
    store ptr %25, ptr %8, align 8
    %26 = extractvalue { ptr, i32 } %24, 1
    store i32 %26, ptr %9, align 4
    call void @_ZN3c106ScalarD2Ev(ptr noundef nonnull align 16 dereferenceable(32) %7) #9
    br label %BB_37
  
  BB_33:                                            ; preds = %BB_26
    %27 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_33", ""()
    %28 = extractvalue { ptr, i32 } %27, 0
    store ptr %28, ptr %8, align 8
    %29 = extractvalue { ptr, i32 } %27, 1
    store i32 %29, ptr %9, align 4
    br label %BB_36
  
  BB_34:                                            ; preds = %BB_27
    %30 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_34", ""()
    %31 = extractvalue { ptr, i32 } %30, 0
    store ptr %31, ptr %8, align 8
    %32 = extractvalue { ptr, i32 } %30, 1
    store i32 %32, ptr %9, align 4
    call void @_ZN3c106ScalarD2Ev(ptr noundef nonnull align 16 dereferenceable(32) %11) #9
    br label %BB_36
  
  BB_35:                                            ; preds = %BB_29, %BB_28
    %33 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_35", ""()
    %34 = extractvalue { ptr, i32 } %33, 0
    store ptr %34, ptr %8, align 8
    %35 = extractvalue { ptr, i32 } %33, 1
    store i32 %35, ptr %9, align 4
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %10) #9
    br label %BB_36
  
  BB_36:                                            ; preds = %BB_35, %BB_34, %BB_33
    call void asm sideeffect "# LLVM BB: BB_36", ""()
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %6) #9
    br label %BB_37
  
  BB_37:                                            ; preds = %BB_36, %BB_32, %BB_31
    call void asm sideeffect "# LLVM BB: BB_37", ""()
    call void @_ZN2at6TensorD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %5) #9
    br label %BB_38
  
  BB_38:                                            ; preds = %BB_37
    call void asm sideeffect "# LLVM BB: BB_38", ""()
    %36 = load ptr, ptr %8, align 8
    call void @_Unwind_Resume(ptr %36) #10
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNK2at6Tensor8int_reprEv(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat align 2 {
  BB_39:
    call void asm sideeffect "# LLVM BB: BB_39", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = bitcast ptr %0 to ptr
    store ptr %4, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %5 = load ptr, ptr %3, align 8
    call void @_ZN2at4_ops8int_repr4callERKNS_6TensorE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %5)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define internal fastcc void @_ZN2atgtERKNS_6TensorERKN3c106ScalarE(ptr noalias align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 16 dereferenceable(32) %2) unnamed_addr #0 {
  BB_40:
    call void asm sideeffect "# LLVM BB: BB_40", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = bitcast ptr %0 to ptr
    store ptr %6, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = load ptr, ptr %5, align 8
    call void @_ZNK2at6Tensor2gtERKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %7, ptr noundef nonnull align 16 dereferenceable(32) %8)
    ret void
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106ScalarC2El(ptr noundef nonnull align 16 dereferenceable(32) %0, i64 noundef %1) unnamed_addr #2 comdat align 2 {
  BB_41:
    call void asm sideeffect "# LLVM BB: BB_41", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load i64, ptr %3, align 8
    call void @_ZN3c106ScalarC2IlLPb0EEET_b(ptr noundef nonnull align 16 dereferenceable(32) %4, i64 noundef %5, i1 noundef zeroext true)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106ScalarD2Ev(ptr noundef nonnull align 16 dereferenceable(32) %0) unnamed_addr #1 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_42:
    call void asm sideeffect "# LLVM BB: BB_42", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    invoke void @_ZN3c106Scalar7destroyEv(ptr noundef nonnull align 16 dereferenceable(32) %2)
            to label %BB_43 unwind label %BB_44
  
  BB_43:                                            ; preds = %BB_42
    call void asm sideeffect "# LLVM BB: BB_43", ""()
    ret void
  
  BB_44:                                            ; preds = %BB_42
    %3 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_44", ""()
    %4 = extractvalue { ptr, i32 } %3, 0
    call void @__clang_call_terminate(ptr %4) #11
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at5whereERKNS_6TensorES2_RKN3c106ScalarE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 16 dereferenceable(32) %3) local_unnamed_addr #0 comdat {
  BB_45:
    call void asm sideeffect "# LLVM BB: BB_45", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = bitcast ptr %0 to ptr
    store ptr %8, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = load ptr, ptr %6, align 8
    %11 = load ptr, ptr %7, align 8
    call void @_ZN2at4_ops17where_ScalarOther4callERKNS_6TensorES4_RKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %9, ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 16 dereferenceable(32) %11)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at33_make_per_tensor_quantized_tensorERKNS_6TensorEdl(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, double noundef %2, i64 noundef %3) local_unnamed_addr #0 comdat {
  BB_46:
    call void asm sideeffect "# LLVM BB: BB_46", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca double, align 8
    %7 = alloca i64, align 8
    %8 = bitcast ptr %0 to ptr
    store ptr %8, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store double %2, ptr %6, align 8
    store i64 %3, ptr %7, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = load double, ptr %6, align 8
    %11 = load i64, ptr %7, align 8
    call void @_ZN2at4_ops33_make_per_tensor_quantized_tensor4callERKNS_6TensorEdl(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %9, double noundef %10, i64 noundef %11)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_47:
    call void asm sideeffect "# LLVM BB: BB_47", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c1010TensorImpl5numelEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_48:
    call void asm sideeffect "# LLVM BB: BB_48", ""()
    %1 = alloca i64, align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %3, i8 noundef zeroext 2)
    br i1 %4, label %BB_49, label %BB_50
  
  BB_49:                                            ; preds = %BB_48
    call void asm sideeffect "# LLVM BB: BB_49", ""()
    %5 = bitcast ptr %3 to ptr
    %6 = load ptr, ptr %5, align 8
    %7 = getelementptr inbounds ptr, ptr %6, i64 10
    %8 = load ptr, ptr %7, align 8
    %9 = call noundef i64 %8(ptr noundef nonnull align 8 dereferenceable(192) %3)
    store i64 %9, ptr %1, align 8
    br label %BB_51
  
  BB_50:                                            ; preds = %BB_48
    call void asm sideeffect "# LLVM BB: BB_50", ""()
    %10 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 8
    %11 = load i64, ptr %10, align 8
    store i64 %11, ptr %1, align 8
    br label %BB_51
  
  BB_51:                                            ; preds = %BB_50, %BB_49
    call void asm sideeffect "# LLVM BB: BB_51", ""()
    %12 = load i64, ptr %1, align 8
    ret i64 %12
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %0, i8 noundef zeroext %1) local_unnamed_addr #3 comdat align 2 {
  BB_52:
    call void asm sideeffect "# LLVM BB: BB_52", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i8 %1, ptr %3, align 1
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %4, i32 0, i32 11
    %6 = bitcast ptr %5 to ptr
    %7 = load i24, ptr %6, align 1
    %8 = lshr i24 %7, 10
    %9 = and i24 %8, 3
    %10 = trunc i24 %9 to i8
    %11 = zext i8 %10 to i32
    %12 = load i8, ptr %3, align 1
    %13 = zext i8 %12 to i32
    %14 = icmp sge i32 %11, %13
    ret i1 %14
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN2at10TensorBaseC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_53:
    call void asm sideeffect "# LLVM BB: BB_53", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.at::TensorBase", ptr %2, i32 0, i32 0
    call void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %3) #9
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_54:
    call void asm sideeffect "# LLVM BB: BB_54", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"struct.c10::raw::DontIncreaseRefcount", align 1
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = call noundef ptr @_ZN3c1019UndefinedTensorImpl9singletonEv()
    br label %BB_55
  
  BB_55:                                            ; preds = %BB_54
    call void asm sideeffect "# LLVM BB: BB_55", ""()
    call void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2EPS1_NS_3raw20DontIncreaseRefcountE(ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef %4) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c1019UndefinedTensorImpl9singletonEv() local_unnamed_addr #3 comdat align 2 {
  BB_56:
    call void asm sideeffect "# LLVM BB: BB_56", ""()
    ret ptr @_ZN3c1019UndefinedTensorImpl10_singletonE
  }
  
  ; Function Attrs: noinline noreturn nounwind
  define linkonce_odr hidden void @__clang_call_terminate(ptr %0) local_unnamed_addr #4 comdat {
  BB_57:
    call void asm sideeffect "# LLVM BB: BB_57", ""()
    %1 = tail call ptr @__cxa_begin_catch(ptr %0) #9
    tail call void @_ZSt9terminatev() #11
    unreachable
  }
  
  declare ptr @__cxa_begin_catch(ptr) local_unnamed_addr
  
  declare void @_ZSt9terminatev() local_unnamed_addr
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2EPS1_NS_3raw20DontIncreaseRefcountE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1) unnamed_addr #1 comdat align 2 {
  BB_58:
    call void asm sideeffect "# LLVM BB: BB_58", ""()
    %2 = alloca %"struct.c10::raw::DontIncreaseRefcount", align 1
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %5, i32 0, i32 0
    %7 = load ptr, ptr %4, align 8
    store ptr %7, ptr %6, align 8
    ret void
  }
  
  declare void @_ZN2at4_ops15dequantize_self4callERKNS_6TensorE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #5
  
  declare void @_ZN2at4_ops4gelu4callERKNS_6TensorEN3c1017basic_string_viewIcEE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8), ptr, i64) local_unnamed_addr #5
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1017basic_string_viewIcE7strlen_EPKc(ptr noundef %0) local_unnamed_addr #3 comdat align 2 {
  BB_59:
    call void asm sideeffect "# LLVM BB: BB_59", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    store ptr %3, ptr %2, align 8
    br label %BB_60
  
  BB_60:                                            ; preds = %BB_61, %BB_59
    call void asm sideeffect "# LLVM BB: BB_60", ""()
    %4 = load ptr, ptr %2, align 8
    %5 = load i8, ptr %4, align 1
    %6 = sext i8 %5 to i32
    %7 = icmp ne i32 %6, 0
    br i1 %7, label %BB_61, label %BB_62
  
  BB_61:                                            ; preds = %BB_60
    call void asm sideeffect "# LLVM BB: BB_61", ""()
    %8 = load ptr, ptr %2, align 8
    %9 = getelementptr inbounds i8, ptr %8, i32 1
    store ptr %9, ptr %2, align 8
    br label %BB_60, !llvm.loop !6
  
  BB_62:                                            ; preds = %BB_60
    call void asm sideeffect "# LLVM BB: BB_62", ""()
    %10 = load ptr, ptr %2, align 8
    %11 = load ptr, ptr %1, align 8
    %12 = ptrtoint ptr %10 to i64
    %13 = ptrtoint ptr %11 to i64
    %14 = sub i64 %12, %13
    ret i64 %14
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1017basic_string_viewIcEC2EPKcm(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef %1, i64 noundef %2) unnamed_addr #1 comdat align 2 {
  BB_63:
    call void asm sideeffect "# LLVM BB: BB_63", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"class.c10::basic_string_view", ptr %6, i32 0, i32 0
    %8 = load ptr, ptr %4, align 8
    store ptr %8, ptr %7, align 8
    %9 = getelementptr inbounds %"class.c10::basic_string_view", ptr %6, i32 0, i32 1
    %10 = load i64, ptr %5, align 8
    store i64 %10, ptr %9, align 8
    ret void
  }
  
  declare void @_ZN2at4_ops19quantize_per_tensor4callERKNS_6TensorEdlN3c1010ScalarTypeE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8), double noundef, i64 noundef, i8 noundef signext) local_unnamed_addr #5
  
  declare noundef double @_ZN2at4_ops7q_scale4callERKNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #5
  
  declare noundef i64 @_ZN2at4_ops12q_zero_point4callERKNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #5
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define internal fastcc noundef signext i8 @_ZN3c10L20typeMetaToScalarTypeEN6caffe28TypeMetaE(i16 %0) unnamed_addr #0 {
  BB_64:
    call void asm sideeffect "# LLVM BB: BB_64", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    store i16 %0, ptr %2, align 2
    %3 = call noundef signext i8 @_ZN6caffe28TypeMeta12toScalarTypeEv(ptr noundef nonnull align 2 dereferenceable(2) %1)
    ret i8 %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK3c1010TensorImpl5dtypeEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #3 comdat align 2 {
  BB_65:
    call void asm sideeffect "# LLVM BB: BB_65", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 9
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %5, ptr align 8 %6, i64 2, i1 false)
    %7 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    %8 = load i16, ptr %7, align 2
    ret i16 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef signext i8 @_ZN6caffe28TypeMeta12toScalarTypeEv(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 {
  BB_66:
    call void asm sideeffect "# LLVM BB: BB_66", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.caffe2::TypeMeta", align 2
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = call noundef zeroext i1 @_ZNK6caffe28TypeMeta12isScalarTypeEv(ptr noundef nonnull align 2 dereferenceable(2) %3) #9
    br i1 %4, label %BB_67, label %BB_68
  
  BB_67:                                            ; preds = %BB_66
    call void asm sideeffect "# LLVM BB: BB_67", ""()
    %5 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %3, i32 0, i32 0
    %6 = load i16, ptr %5, align 2
    %7 = trunc i16 %6 to i8
    ret i8 %7
  
  BB_68:                                            ; preds = %BB_66
    call void asm sideeffect "# LLVM BB: BB_68", ""()
    %8 = bitcast ptr %2 to ptr
    %9 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %8, ptr align 2 %9, i64 2, i1 false)
    %10 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    %11 = load i16, ptr %10, align 2
    call void @_ZN6caffe28TypeMeta26error_unsupported_typemetaES0_(i16 %11) #10
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK6caffe28TypeMeta12isScalarTypeEv(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_69:
    call void asm sideeffect "# LLVM BB: BB_69", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    %4 = load i16, ptr %3, align 2
    %5 = zext i16 %4 to i32
    %6 = icmp slt i32 %5, 26
    ret i1 %6
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN6caffe28TypeMeta26error_unsupported_typemetaES0_(i16) local_unnamed_addr #6
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN2at10TensorBaseD2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_70:
    call void asm sideeffect "# LLVM BB: BB_70", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.at::TensorBase", ptr %2, i32 0, i32 0
    call void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEED2Ev(ptr noundef nonnull align 8 dereferenceable(8) %3) #9
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEED2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_71:
    call void asm sideeffect "# LLVM BB: BB_71", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    call void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev(ptr noundef nonnull align 8 dereferenceable(8) %2) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_72:
    call void asm sideeffect "# LLVM BB: BB_72", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    %6 = alloca i8, align 1
    store ptr %0, ptr %5, align 8
    %7 = load ptr, ptr %5, align 8
    %8 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %8, align 8
    %10 = call noundef ptr @_ZN3c1019UndefinedTensorImpl9singletonEv()
    %11 = icmp ne ptr %9, %10
    br i1 %11, label %BB_73, label %BB_89
  
  BB_73:                                            ; preds = %BB_72
    call void asm sideeffect "# LLVM BB: BB_73", ""()
    %12 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %13 = load ptr, ptr %12, align 8
    %14 = bitcast ptr %13 to ptr
    %15 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %14, i32 0, i32 1
    %16 = call noundef i64 @_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %15)
    br label %BB_74
  
  BB_74:                                            ; preds = %BB_73
    call void asm sideeffect "# LLVM BB: BB_74", ""()
    %17 = icmp eq i64 %16, 0
    br i1 %17, label %BB_75, label %BB_89
  
  BB_75:                                            ; preds = %BB_74
    call void asm sideeffect "# LLVM BB: BB_75", ""()
    %18 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %19 = load ptr, ptr %18, align 8
    %20 = bitcast ptr %19 to ptr
    %21 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %20, i32 0, i32 2
    %22 = bitcast ptr %21 to ptr
    store ptr %22, ptr %1, align 8
    store i32 2, ptr %2, align 4
    %23 = load ptr, ptr %1, align 8
    %24 = load i32, ptr %2, align 4
    %25 = call noundef i32 @_ZStanSt12memory_orderSt23__memory_order_modifier(i32 noundef %24, i32 noundef 65535)
    br label %BB_76
  
  BB_76:                                            ; preds = %BB_75
    call void asm sideeffect "# LLVM BB: BB_76", ""()
    store i32 %25, ptr %3, align 4
    %26 = getelementptr inbounds %"struct.std::__atomic_base", ptr %23, i32 0, i32 0
    %27 = load i32, ptr %2, align 4
    switch i32 %27, label %BB_77 [
      i32 1, label %BB_78
      i32 2, label %BB_78
      i32 5, label %BB_79
    ]
  
  BB_77:                                            ; preds = %BB_76
    call void asm sideeffect "# LLVM BB: BB_77", ""()
    %28 = load atomic i64, ptr %26 monotonic, align 8
    store i64 %28, ptr %4, align 8
    br label %BB_80
  
  BB_78:                                            ; preds = %BB_76, %BB_76
    call void asm sideeffect "# LLVM BB: BB_78", ""()
    %29 = load atomic i64, ptr %26 acquire, align 8
    store i64 %29, ptr %4, align 8
    br label %BB_80
  
  BB_79:                                            ; preds = %BB_76
    call void asm sideeffect "# LLVM BB: BB_79", ""()
    %30 = load atomic i64, ptr %26 seq_cst, align 8
    store i64 %30, ptr %4, align 8
    br label %BB_80
  
  BB_80:                                            ; preds = %BB_79, %BB_78, %BB_77
    call void asm sideeffect "# LLVM BB: BB_80", ""()
    %31 = load i64, ptr %4, align 8
    %32 = icmp eq i64 %31, 1
    %33 = zext i1 %32 to i8
    store i8 %33, ptr %6, align 1
    %34 = load i8, ptr %6, align 1
    %35 = trunc i8 %34 to i1
    br i1 %35, label %BB_84, label %BB_81
  
  BB_81:                                            ; preds = %BB_80
    call void asm sideeffect "# LLVM BB: BB_81", ""()
    %36 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %37 = load ptr, ptr %36, align 8
    %38 = bitcast ptr %37 to ptr
    %39 = load ptr, ptr %38, align 8
    %40 = getelementptr inbounds ptr, ptr %39, i64 2
    %41 = load ptr, ptr %40, align 8
    invoke void %41(ptr noundef nonnull align 8 dereferenceable(192) %37)
            to label %BB_82 unwind label %BB_90
  
  BB_82:                                            ; preds = %BB_81
    call void asm sideeffect "# LLVM BB: BB_82", ""()
    %42 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %43 = load ptr, ptr %42, align 8
    %44 = bitcast ptr %43 to ptr
    %45 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %44, i32 0, i32 2
    %46 = call noundef i64 @_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %45)
    br label %BB_83
  
  BB_83:                                            ; preds = %BB_82
    call void asm sideeffect "# LLVM BB: BB_83", ""()
    %47 = icmp eq i64 %46, 0
    %48 = zext i1 %47 to i8
    store i8 %48, ptr %6, align 1
    br label %BB_84
  
  BB_84:                                            ; preds = %BB_83, %BB_80
    call void asm sideeffect "# LLVM BB: BB_84", ""()
    %49 = load i8, ptr %6, align 1
    %50 = trunc i8 %49 to i1
    br i1 %50, label %BB_85, label %BB_88
  
  BB_85:                                            ; preds = %BB_84
    call void asm sideeffect "# LLVM BB: BB_85", ""()
    %51 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %7, i32 0, i32 0
    %52 = load ptr, ptr %51, align 8
    %53 = icmp eq ptr %52, null
    br i1 %53, label %BB_87, label %BB_86
  
  BB_86:                                            ; preds = %BB_85
    call void asm sideeffect "# LLVM BB: BB_86", ""()
    %54 = bitcast ptr %52 to ptr
    %55 = load ptr, ptr %54, align 8
    %56 = getelementptr inbounds ptr, ptr %55, i64 1
    %57 = load ptr, ptr %56, align 8
    call void %57(ptr noundef nonnull align 8 dereferenceable(192) %52) #9
    br label %BB_87
  
  BB_87:                                            ; preds = %BB_86, %BB_85
    call void asm sideeffect "# LLVM BB: BB_87", ""()
    br label %BB_88
  
  BB_88:                                            ; preds = %BB_87, %BB_84
    call void asm sideeffect "# LLVM BB: BB_88", ""()
    br label %BB_89
  
  BB_89:                                            ; preds = %BB_88, %BB_74, %BB_72
    call void asm sideeffect "# LLVM BB: BB_89", ""()
    ret void
  
  BB_90:                                            ; preds = %BB_81
    %58 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_90", ""()
    %59 = extractvalue { ptr, i32 } %58, 0
    call void @__clang_call_terminate(ptr %59) #11
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_91:
    call void asm sideeffect "# LLVM BB: BB_91", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i64, align 8
    %3 = alloca i32, align 4
    %4 = alloca i64, align 8
    %5 = alloca i64, align 8
    %6 = alloca ptr, align 8
    store ptr %0, ptr %6, align 8
    %7 = load ptr, ptr %6, align 8
    %8 = bitcast ptr %7 to ptr
    store ptr %8, ptr %1, align 8
    store i64 1, ptr %2, align 8
    store i32 4, ptr %3, align 4
    %9 = load ptr, ptr %1, align 8
    %10 = getelementptr inbounds %"struct.std::__atomic_base", ptr %9, i32 0, i32 0
    %11 = load i32, ptr %3, align 4
    %12 = load i64, ptr %2, align 8
    store i64 %12, ptr %4, align 8
    switch i32 %11, label %BB_92 [
      i32 1, label %BB_93
      i32 2, label %BB_93
      i32 3, label %BB_94
      i32 4, label %BB_95
      i32 5, label %BB_96
    ]
  
  BB_92:                                            ; preds = %BB_91
    call void asm sideeffect "# LLVM BB: BB_92", ""()
    %13 = load i64, ptr %4, align 8
    %14 = atomicrmw sub ptr %10, i64 %13 monotonic, align 8
    store i64 %14, ptr %5, align 8
    br label %BB_97
  
  BB_93:                                            ; preds = %BB_91, %BB_91
    call void asm sideeffect "# LLVM BB: BB_93", ""()
    %15 = load i64, ptr %4, align 8
    %16 = atomicrmw sub ptr %10, i64 %15 acquire, align 8
    store i64 %16, ptr %5, align 8
    br label %BB_97
  
  BB_94:                                            ; preds = %BB_91
    call void asm sideeffect "# LLVM BB: BB_94", ""()
    %17 = load i64, ptr %4, align 8
    %18 = atomicrmw sub ptr %10, i64 %17 release, align 8
    store i64 %18, ptr %5, align 8
    br label %BB_97
  
  BB_95:                                            ; preds = %BB_91
    call void asm sideeffect "# LLVM BB: BB_95", ""()
    %19 = load i64, ptr %4, align 8
    %20 = atomicrmw sub ptr %10, i64 %19 acq_rel, align 8
    store i64 %20, ptr %5, align 8
    br label %BB_97
  
  BB_96:                                            ; preds = %BB_91
    call void asm sideeffect "# LLVM BB: BB_96", ""()
    %21 = load i64, ptr %4, align 8
    %22 = atomicrmw sub ptr %10, i64 %21 seq_cst, align 8
    store i64 %22, ptr %5, align 8
    br label %BB_97
  
  BB_97:                                            ; preds = %BB_96, %BB_95, %BB_94, %BB_93, %BB_92
    call void asm sideeffect "# LLVM BB: BB_97", ""()
    %23 = load i64, ptr %5, align 8
    %24 = sub i64 %23, 1
    ret i64 %24
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_98:
    call void asm sideeffect "# LLVM BB: BB_98", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i64, align 8
    %3 = alloca i32, align 4
    %4 = alloca i64, align 8
    %5 = alloca i64, align 8
    %6 = alloca ptr, align 8
    store ptr %0, ptr %6, align 8
    %7 = load ptr, ptr %6, align 8
    %8 = bitcast ptr %7 to ptr
    store ptr %8, ptr %1, align 8
    store i64 1, ptr %2, align 8
    store i32 4, ptr %3, align 4
    %9 = load ptr, ptr %1, align 8
    %10 = getelementptr inbounds %"struct.std::__atomic_base", ptr %9, i32 0, i32 0
    %11 = load i32, ptr %3, align 4
    %12 = load i64, ptr %2, align 8
    store i64 %12, ptr %4, align 8
    switch i32 %11, label %BB_99 [
      i32 1, label %BB_100
      i32 2, label %BB_100
      i32 3, label %BB_101
      i32 4, label %BB_102
      i32 5, label %BB_103
    ]
  
  BB_99:                                            ; preds = %BB_98
    call void asm sideeffect "# LLVM BB: BB_99", ""()
    %13 = load i64, ptr %4, align 8
    %14 = atomicrmw sub ptr %10, i64 %13 monotonic, align 8
    store i64 %14, ptr %5, align 8
    br label %BB_104
  
  BB_100:                                           ; preds = %BB_98, %BB_98
    call void asm sideeffect "# LLVM BB: BB_100", ""()
    %15 = load i64, ptr %4, align 8
    %16 = atomicrmw sub ptr %10, i64 %15 acquire, align 8
    store i64 %16, ptr %5, align 8
    br label %BB_104
  
  BB_101:                                           ; preds = %BB_98
    call void asm sideeffect "# LLVM BB: BB_101", ""()
    %17 = load i64, ptr %4, align 8
    %18 = atomicrmw sub ptr %10, i64 %17 release, align 8
    store i64 %18, ptr %5, align 8
    br label %BB_104
  
  BB_102:                                           ; preds = %BB_98
    call void asm sideeffect "# LLVM BB: BB_102", ""()
    %19 = load i64, ptr %4, align 8
    %20 = atomicrmw sub ptr %10, i64 %19 acq_rel, align 8
    store i64 %20, ptr %5, align 8
    br label %BB_104
  
  BB_103:                                           ; preds = %BB_98
    call void asm sideeffect "# LLVM BB: BB_103", ""()
    %21 = load i64, ptr %4, align 8
    %22 = atomicrmw sub ptr %10, i64 %21 seq_cst, align 8
    store i64 %22, ptr %5, align 8
    br label %BB_104
  
  BB_104:                                           ; preds = %BB_103, %BB_102, %BB_101, %BB_100, %BB_99
    call void asm sideeffect "# LLVM BB: BB_104", ""()
    %23 = load i64, ptr %5, align 8
    %24 = sub i64 %23, 1
    ret i64 %24
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i32 @_ZStanSt12memory_orderSt23__memory_order_modifier(i32 noundef %0, i32 noundef %1) local_unnamed_addr #3 comdat {
  BB_105:
    call void asm sideeffect "# LLVM BB: BB_105", ""()
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    store i32 %0, ptr %2, align 4
    store i32 %1, ptr %3, align 4
    %4 = load i32, ptr %2, align 4
    %5 = load i32, ptr %3, align 4
    %6 = and i32 %4, %5
    ret i32 %6
  }
  
  declare void @_ZN2at4_ops8int_repr4callERKNS_6TensorE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #5
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNK2at6Tensor2gtERKN3c106ScalarE(ptr noalias sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 16 dereferenceable(32) %2) local_unnamed_addr #0 comdat align 2 {
  BB_106:
    call void asm sideeffect "# LLVM BB: BB_106", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = bitcast ptr %0 to ptr
    store ptr %6, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = load ptr, ptr %5, align 8
    call void @_ZN2at4_ops9gt_Scalar4callERKNS_6TensorERKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %7, ptr noundef nonnull align 16 dereferenceable(32) %8)
    ret void
  }
  
  declare void @_ZN2at4_ops9gt_Scalar4callERKNS_6TensorERKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 16 dereferenceable(32)) local_unnamed_addr #5
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106ScalarC2IlLPb0EEET_b(ptr noundef nonnull align 16 dereferenceable(32) %0, i64 noundef %1, i1 noundef zeroext %2) unnamed_addr #2 comdat align 2 {
  BB_107:
    call void asm sideeffect "# LLVM BB: BB_107", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca i8, align 1
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    %6 = zext i1 %2 to i8
    store i8 %6, ptr %5, align 1
    %7 = load ptr, ptr %3, align 8
    %8 = getelementptr inbounds %"class.c10::Scalar", ptr %7, i32 0, i32 0
    store i32 1, ptr %8, align 16
    %9 = getelementptr inbounds %"class.c10::Scalar", ptr %7, i32 0, i32 2
    call void @_ZN3c106Scalar3v_tC2Ev(ptr noundef nonnull align 16 dereferenceable(16) %9)
    %10 = load i64, ptr %4, align 8
    %11 = call noundef i64 @_ZN3c107convertIllEET_T0_(i64 noundef %10)
    %12 = getelementptr inbounds %"class.c10::Scalar", ptr %7, i32 0, i32 2
    %13 = bitcast ptr %12 to ptr
    store i64 %11, ptr %13, align 16
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106Scalar3v_tC2Ev(ptr noundef nonnull align 16 dereferenceable(16) %0) unnamed_addr #1 comdat align 2 {
  BB_108:
    call void asm sideeffect "# LLVM BB: BB_108", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    store double 0.000000e+00, ptr %3, align 16
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c107convertIllEET_T0_(i64 noundef %0) local_unnamed_addr #0 comdat {
  BB_109:
    call void asm sideeffect "# LLVM BB: BB_109", ""()
    %1 = alloca i64, align 8
    store i64 %0, ptr %1, align 8
    %2 = load i64, ptr %1, align 8
    %3 = call noundef i64 @_ZN3c1027static_cast_with_inter_typeIllE5applyEl(i64 noundef %2)
    ret i64 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1027static_cast_with_inter_typeIllE5applyEl(i64 noundef %0) local_unnamed_addr #0 comdat align 2 {
  BB_110:
    call void asm sideeffect "# LLVM BB: BB_110", ""()
    %1 = alloca i64, align 8
    %2 = alloca i8, align 1
    %3 = alloca i64, align 8
    store i64 %0, ptr %1, align 8
    store i8 0, ptr %2, align 1
    %4 = load i64, ptr %1, align 8
    %5 = call noundef i64 @_ZN3c1010maybe_realILb0ElE5applyEl(i64 noundef %4)
    store i64 %5, ptr %3, align 8
    %6 = load i64, ptr %3, align 8
    ret i64 %6
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1010maybe_realILb0ElE5applyEl(i64 noundef %0) local_unnamed_addr #3 comdat align 2 {
  BB_111:
    call void asm sideeffect "# LLVM BB: BB_111", ""()
    %1 = alloca i64, align 8
    store i64 %0, ptr %1, align 8
    %2 = load i64, ptr %1, align 8
    ret i64 %2
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106Scalar7destroyEv(ptr noundef nonnull align 16 dereferenceable(32) %0) local_unnamed_addr #0 comdat align 2 {
  BB_112:
    call void asm sideeffect "# LLVM BB: BB_112", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::Scalar", ptr %2, i32 0, i32 0
    %4 = load i32, ptr %3, align 16
    %5 = icmp eq i32 5, %4
    br i1 %5, label %BB_115, label %BB_113
  
  BB_113:                                           ; preds = %BB_112
    call void asm sideeffect "# LLVM BB: BB_113", ""()
    %6 = getelementptr inbounds %"class.c10::Scalar", ptr %2, i32 0, i32 0
    %7 = load i32, ptr %6, align 16
    %8 = icmp eq i32 4, %7
    br i1 %8, label %BB_115, label %BB_114
  
  BB_114:                                           ; preds = %BB_113
    call void asm sideeffect "# LLVM BB: BB_114", ""()
    %9 = getelementptr inbounds %"class.c10::Scalar", ptr %2, i32 0, i32 0
    %10 = load i32, ptr %9, align 16
    %11 = icmp eq i32 6, %10
    br i1 %11, label %BB_115, label %BB_116
  
  BB_115:                                           ; preds = %BB_114, %BB_113, %BB_112
    call void asm sideeffect "# LLVM BB: BB_115", ""()
    %12 = getelementptr inbounds %"class.c10::Scalar", ptr %2, i32 0, i32 2
    %13 = bitcast ptr %12 to ptr
    %14 = load ptr, ptr %13, align 16
    call void @_ZN3c103raw13intrusive_ptr6decrefEPNS_20intrusive_ptr_targetE(ptr noundef %14)
    %15 = getelementptr inbounds %"class.c10::Scalar", ptr %2, i32 0, i32 2
    %16 = bitcast ptr %15 to ptr
    store ptr null, ptr %16, align 16
    br label %BB_116
  
  BB_116:                                           ; preds = %BB_115, %BB_114
    call void asm sideeffect "# LLVM BB: BB_116", ""()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103raw13intrusive_ptr6decrefEPNS_20intrusive_ptr_targetE(ptr noundef %0) local_unnamed_addr #0 comdat {
  BB_117:
    call void asm sideeffect "# LLVM BB: BB_117", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.c10::intrusive_ptr.44", align 8
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    call void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_(ptr sret(%"class.c10::intrusive_ptr.44") align 8 %2, ptr noundef %3)
    call void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEED2Ev(ptr noundef nonnull align 8 dereferenceable(8) %2) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_(ptr noalias sret(%"class.c10::intrusive_ptr.44") align 8 %0, ptr noundef %1) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_118:
    call void asm sideeffect "# LLVM BB: BB_118", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i64, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i32, align 4
    %8 = alloca i32, align 4
    %9 = alloca i64, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca %"struct.c10::raw::DontIncreaseRefcount", align 1
    %13 = bitcast ptr %0 to ptr
    store ptr %13, ptr %10, align 8
    store ptr %1, ptr %11, align 8
    %14 = load ptr, ptr %11, align 8
    %15 = call noundef ptr @_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv() #9
    %16 = icmp eq ptr %14, %15
    br i1 %16, label %BB_131, label %BB_119
  
  BB_119:                                           ; preds = %BB_118
    call void asm sideeffect "# LLVM BB: BB_119", ""()
    %17 = load ptr, ptr %11, align 8
    %18 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %17, i32 0, i32 1
    %19 = bitcast ptr %18 to ptr
    store ptr %19, ptr %2, align 8
    store i32 5, ptr %3, align 4
    %20 = load ptr, ptr %2, align 8
    %21 = load i32, ptr %3, align 4
    %22 = call noundef i32 @_ZStanSt12memory_orderSt23__memory_order_modifier(i32 noundef %21, i32 noundef 65535)
    br label %BB_120
  
  BB_120:                                           ; preds = %BB_119
    call void asm sideeffect "# LLVM BB: BB_120", ""()
    store i32 %22, ptr %4, align 4
    %23 = getelementptr inbounds %"struct.std::__atomic_base", ptr %20, i32 0, i32 0
    %24 = load i32, ptr %3, align 4
    switch i32 %24, label %BB_121 [
      i32 1, label %BB_122
      i32 2, label %BB_122
      i32 5, label %BB_123
    ]
  
  BB_121:                                           ; preds = %BB_120
    call void asm sideeffect "# LLVM BB: BB_121", ""()
    %25 = load atomic i64, ptr %23 monotonic, align 8
    store i64 %25, ptr %5, align 8
    br label %BB_124
  
  BB_122:                                           ; preds = %BB_120, %BB_120
    call void asm sideeffect "# LLVM BB: BB_122", ""()
    %26 = load atomic i64, ptr %23 acquire, align 8
    store i64 %26, ptr %5, align 8
    br label %BB_124
  
  BB_123:                                           ; preds = %BB_120
    call void asm sideeffect "# LLVM BB: BB_123", ""()
    %27 = load atomic i64, ptr %23 seq_cst, align 8
    store i64 %27, ptr %5, align 8
    br label %BB_124
  
  BB_124:                                           ; preds = %BB_123, %BB_122, %BB_121
    call void asm sideeffect "# LLVM BB: BB_124", ""()
    %28 = load i64, ptr %5, align 8
    %29 = icmp eq i64 %28, 0
    br i1 %29, label %BB_131, label %BB_125
  
  BB_125:                                           ; preds = %BB_124
    call void asm sideeffect "# LLVM BB: BB_125", ""()
    %30 = load ptr, ptr %11, align 8
    %31 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %30, i32 0, i32 2
    %32 = bitcast ptr %31 to ptr
    store ptr %32, ptr %6, align 8
    store i32 5, ptr %7, align 4
    %33 = load ptr, ptr %6, align 8
    %34 = load i32, ptr %7, align 4
    %35 = call noundef i32 @_ZStanSt12memory_orderSt23__memory_order_modifier(i32 noundef %34, i32 noundef 65535)
    br label %BB_126
  
  BB_126:                                           ; preds = %BB_125
    call void asm sideeffect "# LLVM BB: BB_126", ""()
    store i32 %35, ptr %8, align 4
    %36 = getelementptr inbounds %"struct.std::__atomic_base", ptr %33, i32 0, i32 0
    %37 = load i32, ptr %7, align 4
    switch i32 %37, label %BB_127 [
      i32 1, label %BB_128
      i32 2, label %BB_128
      i32 5, label %BB_129
    ]
  
  BB_127:                                           ; preds = %BB_126
    call void asm sideeffect "# LLVM BB: BB_127", ""()
    %38 = load atomic i64, ptr %36 monotonic, align 8
    store i64 %38, ptr %9, align 8
    br label %BB_130
  
  BB_128:                                           ; preds = %BB_126, %BB_126
    call void asm sideeffect "# LLVM BB: BB_128", ""()
    %39 = load atomic i64, ptr %36 acquire, align 8
    store i64 %39, ptr %9, align 8
    br label %BB_130
  
  BB_129:                                           ; preds = %BB_126
    call void asm sideeffect "# LLVM BB: BB_129", ""()
    %40 = load atomic i64, ptr %36 seq_cst, align 8
    store i64 %40, ptr %9, align 8
    br label %BB_130
  
  BB_130:                                           ; preds = %BB_129, %BB_128, %BB_127
    call void asm sideeffect "# LLVM BB: BB_130", ""()
    %41 = load i64, ptr %9, align 8
    %42 = icmp ne i64 %41, 0
    br label %BB_131
  
  BB_131:                                           ; preds = %BB_130, %BB_124, %BB_118
    %43 = phi i1 [ true, %BB_124 ], [ true, %BB_118 ], [ %42, %BB_130 ]
    call void asm sideeffect "# LLVM BB: BB_131", ""()
    %44 = xor i1 %43, true
    br i1 %44, label %BB_132, label %BB_133
  
  BB_132:                                           ; preds = %BB_131
    call void asm sideeffect "# LLVM BB: BB_132", ""()
    %45 = call noundef ptr @_ZN3c103strIJA68_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(68) @.str.3)
    call void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_(ptr noundef @__func__._ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_, ptr noundef @.str.1, i32 noundef 475, ptr noundef @.str.2, ptr noundef %45) #10
    unreachable
  
  BB_133:                                           ; preds = %BB_131
    call void asm sideeffect "# LLVM BB: BB_133", ""()
    %46 = load ptr, ptr %11, align 8
    call void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEEC2EPS1_NS_3raw20DontIncreaseRefcountE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %46) #9
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEED2Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #1 comdat align 2 {
  BB_134:
    call void asm sideeffect "# LLVM BB: BB_134", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    call void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE6reset_Ev(ptr noundef nonnull align 8 dereferenceable(8) %2) #9
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv() local_unnamed_addr #3 comdat align 2 {
  BB_135:
    call void asm sideeffect "# LLVM BB: BB_135", ""()
    ret ptr null
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c103strIJA68_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(68) %0) local_unnamed_addr #0 comdat {
  BB_136:
    call void asm sideeffect "# LLVM BB: BB_136", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds [68 x i8], ptr %2, i64 0, i64 0
    %4 = call noundef ptr @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_(ptr noundef %3)
    ret ptr %4
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEEC2EPS1_NS_3raw20DontIncreaseRefcountE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef %1) unnamed_addr #1 comdat align 2 {
  BB_137:
    call void asm sideeffect "# LLVM BB: BB_137", ""()
    %2 = alloca %"struct.c10::raw::DontIncreaseRefcount", align 1
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %5, i32 0, i32 0
    %7 = load ptr, ptr %4, align 8
    store ptr %7, ptr %6, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_(ptr noundef %0) local_unnamed_addr #3 comdat align 2 {
  BB_138:
    call void asm sideeffect "# LLVM BB: BB_138", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE6reset_Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_139:
    call void asm sideeffect "# LLVM BB: BB_139", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    %6 = alloca i8, align 1
    store ptr %0, ptr %5, align 8
    %7 = load ptr, ptr %5, align 8
    %8 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %8, align 8
    %10 = call noundef ptr @_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv() #9
    %11 = icmp ne ptr %9, %10
    br i1 %11, label %BB_140, label %BB_154
  
  BB_140:                                           ; preds = %BB_139
    call void asm sideeffect "# LLVM BB: BB_140", ""()
    %12 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %13 = load ptr, ptr %12, align 8
    %14 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %13, i32 0, i32 1
    %15 = call noundef i64 @_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %14)
    %16 = icmp eq i64 %15, 0
    br i1 %16, label %BB_141, label %BB_154
  
  BB_141:                                           ; preds = %BB_140
    call void asm sideeffect "# LLVM BB: BB_141", ""()
    %17 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %18 = load ptr, ptr %17, align 8
    %19 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %18, i32 0, i32 2
    %20 = bitcast ptr %19 to ptr
    store ptr %20, ptr %1, align 8
    store i32 2, ptr %2, align 4
    %21 = load ptr, ptr %1, align 8
    %22 = load i32, ptr %2, align 4
    %23 = call noundef i32 @_ZStanSt12memory_orderSt23__memory_order_modifier(i32 noundef %22, i32 noundef 65535)
    br label %BB_142
  
  BB_142:                                           ; preds = %BB_141
    call void asm sideeffect "# LLVM BB: BB_142", ""()
    store i32 %23, ptr %3, align 4
    %24 = getelementptr inbounds %"struct.std::__atomic_base", ptr %21, i32 0, i32 0
    %25 = load i32, ptr %2, align 4
    switch i32 %25, label %BB_143 [
      i32 1, label %BB_144
      i32 2, label %BB_144
      i32 5, label %BB_145
    ]
  
  BB_143:                                           ; preds = %BB_142
    call void asm sideeffect "# LLVM BB: BB_143", ""()
    %26 = load atomic i64, ptr %24 monotonic, align 8
    store i64 %26, ptr %4, align 8
    br label %BB_146
  
  BB_144:                                           ; preds = %BB_142, %BB_142
    call void asm sideeffect "# LLVM BB: BB_144", ""()
    %27 = load atomic i64, ptr %24 acquire, align 8
    store i64 %27, ptr %4, align 8
    br label %BB_146
  
  BB_145:                                           ; preds = %BB_142
    call void asm sideeffect "# LLVM BB: BB_145", ""()
    %28 = load atomic i64, ptr %24 seq_cst, align 8
    store i64 %28, ptr %4, align 8
    br label %BB_146
  
  BB_146:                                           ; preds = %BB_145, %BB_144, %BB_143
    call void asm sideeffect "# LLVM BB: BB_146", ""()
    %29 = load i64, ptr %4, align 8
    %30 = icmp eq i64 %29, 1
    %31 = zext i1 %30 to i8
    store i8 %31, ptr %6, align 1
    %32 = load i8, ptr %6, align 1
    %33 = trunc i8 %32 to i1
    br i1 %33, label %BB_149, label %BB_147
  
  BB_147:                                           ; preds = %BB_146
    call void asm sideeffect "# LLVM BB: BB_147", ""()
    %34 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %35 = load ptr, ptr %34, align 8
    %36 = bitcast ptr %35 to ptr
    %37 = load ptr, ptr %36, align 8
    %38 = getelementptr inbounds ptr, ptr %37, i64 2
    %39 = load ptr, ptr %38, align 8
    invoke void %39(ptr noundef nonnull align 8 dereferenceable(24) %35)
            to label %BB_148 unwind label %BB_155
  
  BB_148:                                           ; preds = %BB_147
    call void asm sideeffect "# LLVM BB: BB_148", ""()
    %40 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %41 = load ptr, ptr %40, align 8
    %42 = getelementptr inbounds %"class.c10::intrusive_ptr_target", ptr %41, i32 0, i32 2
    %43 = call noundef i64 @_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE(ptr noundef nonnull align 8 dereferenceable(8) %42)
    %44 = icmp eq i64 %43, 0
    %45 = zext i1 %44 to i8
    store i8 %45, ptr %6, align 1
    br label %BB_149
  
  BB_149:                                           ; preds = %BB_148, %BB_146
    call void asm sideeffect "# LLVM BB: BB_149", ""()
    %46 = load i8, ptr %6, align 1
    %47 = trunc i8 %46 to i1
    br i1 %47, label %BB_150, label %BB_153
  
  BB_150:                                           ; preds = %BB_149
    call void asm sideeffect "# LLVM BB: BB_150", ""()
    %48 = getelementptr inbounds %"class.c10::intrusive_ptr.44", ptr %7, i32 0, i32 0
    %49 = load ptr, ptr %48, align 8
    %50 = icmp eq ptr %49, null
    br i1 %50, label %BB_152, label %BB_151
  
  BB_151:                                           ; preds = %BB_150
    call void asm sideeffect "# LLVM BB: BB_151", ""()
    %51 = bitcast ptr %49 to ptr
    %52 = load ptr, ptr %51, align 8
    %53 = getelementptr inbounds ptr, ptr %52, i64 1
    %54 = load ptr, ptr %53, align 8
    call void %54(ptr noundef nonnull align 8 dereferenceable(24) %49) #9
    br label %BB_152
  
  BB_152:                                           ; preds = %BB_151, %BB_150
    call void asm sideeffect "# LLVM BB: BB_152", ""()
    br label %BB_153
  
  BB_153:                                           ; preds = %BB_152, %BB_149
    call void asm sideeffect "# LLVM BB: BB_153", ""()
    br label %BB_154
  
  BB_154:                                           ; preds = %BB_153, %BB_140, %BB_139
    call void asm sideeffect "# LLVM BB: BB_154", ""()
    ret void
  
  BB_155:                                           ; preds = %BB_147
    %55 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_155", ""()
    %56 = extractvalue { ptr, i32 } %55, 0
    call void @__clang_call_terminate(ptr %56) #11
    unreachable
  }
  
  declare void @_ZN2at4_ops17where_ScalarOther4callERKNS_6TensorES4_RKN3c106ScalarE(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 8 dereferenceable(8), ptr noundef nonnull align 16 dereferenceable(32)) local_unnamed_addr #5
  
  declare void @_ZN2at4_ops33_make_per_tensor_quantized_tensor4callERKNS_6TensorEdl(ptr sret(%"class.at::Tensor") align 8, ptr noundef nonnull align 8 dereferenceable(8), double noundef, i64 noundef) local_unnamed_addr #5
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
  declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #8
  
  declare void @_Unwind_Resume(ptr)
  
  attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #4 = { noinline noreturn nounwind }
  attributes #5 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #6 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
  attributes #8 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
  attributes #9 = { nounwind }
  attributes #10 = { noreturn }
  attributes #11 = { noreturn nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 1}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _ZN2at6native19gelu_quantized_cudaERKNS_6TensorEN3c1017basic_string_viewIcEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: fr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr32, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%4' }
  - { reg: '$rdx', virtual-reg: '%5' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_0:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %6:gr64 = COPY $rcx
    %5:gr64 = COPY $rdx
    %4:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %7:gr64 = COPY %3
    INLINEASM &"# LLVM BB: BB_0", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.14)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %6 :: (store (s64) into %ir.15)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.6)
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    CALL64pcrel32 @_ZNK2at10TensorBase5numelEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    CMP64ri32 %10, 0, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1.BB_1:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_1", 1 /* sideeffect attdialect */
    %49:gr32 = MOV32r0 implicit-def $eflags
    %50:gr64 = MOV32ri64 8
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    $esi = COPY %49
    $rdx = COPY %50
    CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZN2at6TensorC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.12
  
  bb.2.BB_2:
    successors: %bb.3(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_2", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN2at10dequantizeERKNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = MOV32ri64 @.str
    %17:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %17
    $rsi = COPY %16
    CALL64pcrel32 @_ZN3c1017basic_string_viewIcEC2EPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.3
  
  bb.3.BB_3:
    successors: %bb.4(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_3", 1 /* sideeffect attdialect */
    %18:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.23)
    %19:gr64 = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.25)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %21:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %20
    $rsi = COPY %21
    $rdx = COPY %18
    $rcx = COPY %19
    CALL64pcrel32 @_ZN2at4geluERKNS_6TensorEN3c1017basic_string_viewIcEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.4
  
  bb.4.BB_4:
    successors: %bb.5(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_4", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    CALL64pcrel32 @_ZNK2at6Tensor7q_scaleEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %29:fr64 = COPY $xmm0
    EH_LABEL <mcsymbol >
    %0:fr64 = COPY %29
    JMP_1 %bb.5
  
  bb.5.BB_5:
    successors: %bb.6(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_5", 1 /* sideeffect attdialect */
    %30:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %30
    CALL64pcrel32 @_ZNK2at6Tensor12q_zero_pointEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %31:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %31
    JMP_1 %bb.6
  
  bb.6.BB_6:
    successors: %bb.7(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_6", 1 /* sideeffect attdialect */
    %32:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %32
    CALL64pcrel32 @_ZNK2at10TensorBase11scalar_typeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %33:gr8 = COPY $al
    EH_LABEL <mcsymbol >
    %2:gr8 = COPY %33
    JMP_1 %bb.7
  
  bb.7.BB_7:
    successors: %bb.8(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_7", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %34:gr32 = MOVSX32rr8 %2
    %35:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rdi = COPY %3
    $rsi = COPY %35
    $xmm0 = COPY %0
    $rdx = COPY %1
    $ecx = COPY %34
    CALL64pcrel32 @_ZN2at19quantize_per_tensorERKNS_6TensorEdlN3c1010ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit $rdx, implicit $ecx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.8
  
  bb.8.BB_8:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_8", 1 /* sideeffect attdialect */
    %47:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %47
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %46:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %46
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.12
  
  bb.9.BB_9 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %23:gr64 = COPY killed $rdx
    %22:gr64 = COPY killed $rax
    %26:gr32 = COPY %23.sub_32bit
    %25:gr64 = COPY %22
    INLINEASM &"# LLVM BB: BB_9", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %25 :: (store (s64) into %ir.10)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %26 :: (store (s32) into %ir.11)
    JMP_1 %bb.11
  
  bb.10.BB_10 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %37:gr64 = COPY killed $rdx
    %36:gr64 = COPY killed $rax
    %41:gr32 = COPY %37.sub_32bit
    %40:gr64 = COPY %36
    INLINEASM &"# LLVM BB: BB_10", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %40 :: (store (s64) into %ir.10)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %41 :: (store (s32) into %ir.11)
    %38:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %38
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.11.BB_11:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_11", 1 /* sideeffect attdialect */
    %43:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %43
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.13
  
  bb.12.BB_12:
    INLINEASM &"# LLVM BB: BB_12", 1 /* sideeffect attdialect */
    $rax = COPY %7
    RET64 implicit $rax
  
  bb.13.BB_13:
    INLINEASM &"# LLVM BB: BB_13", 1 /* sideeffect attdialect */
    %45:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %45
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK2at10TensorBase5numelEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_14:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_14", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNK3c1010TensorImpl5numelEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN2at6TensorC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_15:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_15", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZN2at10TensorBaseC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at10dequantizeERKNS_6TensorE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_16:
    liveins: $rdi, $rsi
  
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %2:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_16", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    %4:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops15dequantize_self4callERKNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            _ZN2at4geluERKNS_6TensorEN3c1017basic_string_viewIcEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_17:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_17", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.10)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %3 :: (store (s64) into %ir.11)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %10
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, %11
    %9:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16)
    %8:gr64 = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %ir.18)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %12
    $rdx = COPY %9
    $rcx = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops4gelu4callERKNS_6TensorEN3c1017basic_string_viewIcEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c1017basic_string_viewIcEC2EPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_18:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_18", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZN3c1017basic_string_viewIcE7strlen_EPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %10
    $rdx = COPY %8
    CALL64pcrel32 @_ZN3c1017basic_string_viewIcEC2EPKcm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at19quantize_per_tensorERKNS_6TensorEdlN3c1010ScalarTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: fr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: fr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$xmm0', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%3' }
  - { reg: '$ecx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_19:
    liveins: $rdi, $rsi, $xmm0, $rdx, $ecx
  
    %4:gr32 = COPY $ecx
    %3:gr64 = COPY $rdx
    %2:fr64 = COPY $xmm0
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr8 = COPY %4.sub_8bit
    %5:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_19", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV8mr %stack.4, 1, $noreg, 0, $noreg, %6 :: (store (s8) into %ir.9)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %12:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %14
    $xmm0 = COPY %13
    $rdx = COPY %12
    %11:gr32 = MOVSX32rm8 %stack.4, 1, $noreg, 0, $noreg :: (load (s8) from %ir.9)
    $ecx = COPY %11
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops19quantize_per_tensor4callERKNS_6TensorEdlN3c1010ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit $rdx, implicit $ecx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK2at6Tensor7q_scaleEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: fr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_20:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_20", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops7q_scale4callERKNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:fr64 = COPY $xmm0
    $xmm0 = COPY %4
    RET64 implicit $xmm0

...
---
name:            _ZNK2at6Tensor12q_zero_pointEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_21:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_21", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops12q_zero_point4callERKNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK2at10TensorBase11scalar_typeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_22:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_22", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZNK3c1010TensorImpl5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr16 = COPY $ax
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %9 :: (store (s16) into %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr32 = MOVZX32rm16 %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.8)
    $edi = COPY %5
    CALL64pcrel32 @_ZN3c10L20typeMetaToScalarTypeEN6caffe28TypeMetaE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr32 = MOVSX32rr8 %6
    $eax = COPY %3
    RET64 implicit $eax

...
---
name:            _ZN2at6TensorD2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_23:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_23", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZN2at10TensorBaseD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at6native19relu_quantized_cudaERKNS_6TensorE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: fr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr32, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 32, alignment: 16, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 32, alignment: 16, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_24:
    successors: %bb.1(0x40000000), %bb.7(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %3:gr64 = COPY %1
    INLINEASM &"# LLVM BB: BB_24", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    %4:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZNK2at6Tensor12q_zero_pointEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.4)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %7
    $rsi = COPY %6
    CALL64pcrel32 @_ZNK2at6Tensor8int_reprEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %9
    $rsi = COPY %8
    CALL64pcrel32 @_ZN3c106ScalarC2El, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_25:
    successors: %bb.2(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_25", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %17:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %18:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %16
    $rsi = COPY %17
    $rdx = COPY %18
    CALL64pcrel32 @_ZN2atgtERKNS_6TensorERKN3c106ScalarE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_26:
    successors: %bb.3(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_26", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %26:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %26
    CALL64pcrel32 @_ZN3c106ScalarD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %27:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %28:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %28
    $rsi = COPY %27
    CALL64pcrel32 @_ZN3c106ScalarC2El, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.3
  
  bb.3.BB_27:
    successors: %bb.4(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_27", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %35:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    %36:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %37:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %38:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %35
    $rsi = COPY %36
    $rdx = COPY %37
    $rcx = COPY %38
    CALL64pcrel32 @_ZN2at5whereERKNS_6TensorES2_RKN3c106ScalarE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.4
  
  bb.4.BB_28:
    successors: %bb.5(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_28", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %46:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %46
    CALL64pcrel32 @_ZN3c106ScalarD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %47:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %47
    CALL64pcrel32 @_ZNK2at6Tensor7q_scaleEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %48:fr64 = COPY $xmm0
    EH_LABEL <mcsymbol >
    %0:fr64 = COPY %48
    JMP_1 %bb.5
  
  bb.5.BB_29:
    successors: %bb.6(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_29", 1 /* sideeffect attdialect */
    %49:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %50:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rdi = COPY %1
    $rsi = COPY %50
    $xmm0 = COPY %0
    $rdx = COPY %49
    CALL64pcrel32 @_ZN2at33_make_per_tensor_quantized_tensorERKNS_6TensorEdl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.6
  
  bb.6.BB_30:
    INLINEASM &"# LLVM BB: BB_30", 1 /* sideeffect attdialect */
    %64:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %64
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %63:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %63
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %62:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %62
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.7.BB_31 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %11:gr64 = COPY killed $rdx
    %10:gr64 = COPY killed $rax
    %14:gr32 = COPY %11.sub_32bit
    %13:gr64 = COPY %10
    INLINEASM &"# LLVM BB: BB_31", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.8)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.9)
    JMP_1 %bb.13
  
  bb.8.BB_32 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %20:gr64 = COPY killed $rdx
    %19:gr64 = COPY killed $rax
    %24:gr32 = COPY %20.sub_32bit
    %23:gr64 = COPY %19
    INLINEASM &"# LLVM BB: BB_32", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.8)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %24 :: (store (s32) into %ir.9)
    %21:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    CALL64pcrel32 @_ZN3c106ScalarD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.13
  
  bb.9.BB_33 (landing-pad):
    successors: %bb.12(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %30:gr64 = COPY killed $rdx
    %29:gr64 = COPY killed $rax
    %33:gr32 = COPY %30.sub_32bit
    %32:gr64 = COPY %29
    INLINEASM &"# LLVM BB: BB_33", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %32 :: (store (s64) into %ir.8)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %33 :: (store (s32) into %ir.9)
    JMP_1 %bb.12
  
  bb.10.BB_34 (landing-pad):
    successors: %bb.12(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %40:gr64 = COPY killed $rdx
    %39:gr64 = COPY killed $rax
    %44:gr32 = COPY %40.sub_32bit
    %43:gr64 = COPY %39
    INLINEASM &"# LLVM BB: BB_34", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %43 :: (store (s64) into %ir.8)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %44 :: (store (s32) into %ir.9)
    %41:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %41
    CALL64pcrel32 @_ZN3c106ScalarD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.12
  
  bb.11.BB_35 (landing-pad):
    successors: %bb.12(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %52:gr64 = COPY killed $rdx
    %51:gr64 = COPY killed $rax
    %56:gr32 = COPY %52.sub_32bit
    %55:gr64 = COPY %51
    INLINEASM &"# LLVM BB: BB_35", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %55 :: (store (s64) into %ir.8)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %56 :: (store (s32) into %ir.9)
    %53:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.12.BB_36:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_36", 1 /* sideeffect attdialect */
    %58:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %58
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.13.BB_37:
    successors: %bb.14(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_37", 1 /* sideeffect attdialect */
    %59:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %59
    CALL64pcrel32 @_ZN2at6TensorD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.14.BB_38:
    INLINEASM &"# LLVM BB: BB_38", 1 /* sideeffect attdialect */
    %61:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %61
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK2at6Tensor8int_reprEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_39:
    liveins: $rdi, $rsi
  
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %2:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_39", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    %4:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops8int_repr4callERKNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            _ZN2atgtERKNS_6TensorERKN3c106ScalarE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_40:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    INLINEASM &"# LLVM BB: BB_40", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %5:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %6
    $rdx = COPY %5
    CALL64pcrel32 @_ZNK2at6Tensor2gtERKN3c106ScalarE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106ScalarC2El
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_41:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_41", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr32 = MOV32ri 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %7
    $edx = COPY %6
    CALL64pcrel32 @_ZN3c106ScalarC2IlLPb0EEET_b, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106ScalarD2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_42:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_42", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %2:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZN3c106Scalar7destroyEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_43:
    INLINEASM &"# LLVM BB: BB_43", 1 /* sideeffect attdialect */
    RET64
  
  bb.2.BB_44 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %4:gr64 = COPY killed $rdx
    %3:gr64 = COPY killed $rax
    %7:gr32 = COPY %4.sub_32bit
    %6:gr64 = COPY %3
    INLINEASM &"# LLVM BB: BB_44", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN2at5whereERKNS_6TensorES2_RKN3c106ScalarE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_45:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_45", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %8:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %10
    $rdx = COPY %9
    $rcx = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops17where_ScalarOther4callERKNS_6TensorES4_RKN3c106ScalarE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN2at33_make_per_tensor_quantized_tensorERKNS_6TensorEdl
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: fr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: fr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: fr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$xmm0', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_46:
    liveins: $rdi, $rsi, $xmm0, $rdx
  
    %3:gr64 = COPY $rdx
    %2:fr64 = COPY $xmm0
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_46", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %9:fr64 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %8:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %10
    $xmm0 = COPY %9
    $rdx = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops33_make_per_tensor_quantized_tensor4callERKNS_6TensorEdl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $xmm0, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_47:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_47", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl5numelEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_48:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_48", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %4:gr32 = MOV32ri 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %4
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    TEST8ri %5, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_49:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_49", 1 /* sideeffect attdialect */
    %13:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64m %13, 1, $noreg, 80, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.1)
    JMP_1 %bb.3
  
  bb.2.BB_50:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_50", 1 /* sideeffect attdialect */
    %8:gr64 = MOV64rm %6, 1, $noreg, 168, $noreg :: (load (s64) from %ir.10)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.1)
  
  bb.3.BB_51:
    INLINEASM &"# LLVM BB: BB_51", 1 /* sideeffect attdialect */
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %15
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_52:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_52", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s8) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    %14:gr32 = MOVZX32rm16 killed %13, 1, $noreg, 181, $noreg :: (load (s16) from %ir.6, align 1)
    %15:gr32 = SHR32ri %14, 10, implicit-def dead $eflags
    %16:gr8 = COPY %15.sub_8bit
    %11:gr8 = AND8ri %16, 3, implicit-def dead $eflags
    %12:gr32 = MOVZX32rr8 %11
    %10:gr32 = MOVZX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    CMP32rr %12, %10, implicit-def $eflags
    %6:gr8 = SETCCr 13, implicit $eflags
    %4:gr8 = AND8ri %6, 1, implicit-def $eflags
    %5:gr32 = MOVZX32rr8 %4
    $eax = COPY %5
    RET64 implicit $eax

...
---
name:            _ZN2at10TensorBaseC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_53:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_53", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_54:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    %2:gr64 = COPY $rdi
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_54", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c1019UndefinedTensorImpl9singletonEv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
  
  bb.1.BB_55:
    INLINEASM &"# LLVM BB: BB_55", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    $rsi = COPY %4
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2EPS1_NS_3raw20DontIncreaseRefcountE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1019UndefinedTensorImpl9singletonEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_56:
    INLINEASM &"# LLVM BB: BB_56", 1 /* sideeffect attdialect */
    %0:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZN3c1019UndefinedTensorImpl10_singletonE, $noreg
    $rax = COPY %0
    RET64 implicit $rax

...
---
name:            __clang_call_terminate
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_57:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_57", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %1
    CALL64pcrel32 target-flags(x86-plt) @__cxa_begin_catch, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %2:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @_ZSt9terminatev, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEC2EPS1_NS_3raw20DontIncreaseRefcountE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_58:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_58", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %7, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.6)
    RET64

...
---
name:            _ZN3c1017basic_string_viewIcE7strlen_EPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_59:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_59", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.2)
  
  bb.1.BB_60:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_60", 1 /* sideeffect attdialect */
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %6:gr32 = MOVSX32rm8 %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    CMP32ri %6, 0, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
  
  bb.2.BB_61:
    successors: %bb.1(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_61", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %19:gr64 = ADD64ri32 %20, 1, implicit-def $eflags
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.2)
    JMP_1 %bb.1
  
  bb.3.BB_62:
    INLINEASM &"# LLVM BB: BB_62", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %12:gr64 = SUB64rr %16, %15, implicit-def $eflags
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZN3c1017basic_string_viewIcEC2EPKcm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_63:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_63", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %11, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.7)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    MOV64mr %11, 1, $noreg, 8, $noreg, %8 :: (store (s64) into %ir.9)
    RET64

...
---
name:            _ZN3c10L20typeMetaToScalarTypeEN6caffe28TypeMetaE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr16, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_64:
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr16 = COPY %0.sub_16bit
    INLINEASM &"# LLVM BB: BB_64", 1 /* sideeffect attdialect */
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s16) into %ir.2)
    %4:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZN6caffe28TypeMeta12toScalarTypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    %3:gr32 = MOVSX32rr8 %5
    $eax = COPY %3
    RET64 implicit $eax

...
---
name:            _ZNK3c1010TensorImpl5dtypeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_65:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_65", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr16 = MOV16rm %6, 1, $noreg, 176, $noreg
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.7)
    $ax = COPY %3
    RET64 implicit $ax

...
---
name:            _ZN6caffe28TypeMeta12toScalarTypeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_66:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_66", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK6caffe28TypeMeta12isScalarTypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_67:
    INLINEASM &"# LLVM BB: BB_67", 1 /* sideeffect attdialect */
    %13:gr16 = MOV16rm %5, 1, $noreg, 0, $noreg :: (load (s16) from %ir.5)
    %12:gr8 = COPY %13.sub_8bit
    %10:gr32 = MOVSX32rr8 %12
    $eax = COPY %10
    RET64 implicit $eax
  
  bb.2.BB_68:
    INLINEASM &"# LLVM BB: BB_68", 1 /* sideeffect attdialect */
    %8:gr16 = MOV16rm %5, 1, $noreg, 0, $noreg
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %8
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr32 = MOVZX32rm16 %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.10)
    $edi = COPY %7
    CALL64pcrel32 target-flags(x86-plt) @_ZN6caffe28TypeMeta26error_unsupported_typemetaES0_, csr_64, implicit $rsp, implicit $ssp, implicit $edi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK6caffe28TypeMeta12isScalarTypeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_69:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_69", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %8:gr32 = MOVZX32rm16 %10, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    CMP32ri %8, 26, implicit-def $eflags
    %5:gr8 = SETCCr 12, implicit $eflags
    %3:gr8 = AND8ri %5, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN2at10TensorBaseD2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_70:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_70", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_71:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_71", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEE6reset_Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr8, preferred-register: '' }
  - { id: 42, class: gr8, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr8, preferred-register: '' }
  - { id: 59, class: gr8, preferred-register: '' }
  - { id: 60, class: gr8, preferred-register: '' }
  - { id: 61, class: gr8, preferred-register: '' }
  - { id: 62, class: gr8, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_72:
    successors: %bb.17(0x40000000), %bb.1(0x40000000)
    liveins: $rdi
  
    %7:gr64 = COPY $rdi
    %8:gr64 = COPY killed %7
    INLINEASM &"# LLVM BB: BB_72", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.5)
    %13:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %12:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c1019UndefinedTensorImpl9singletonEv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    CMP64rr %12, %11, implicit-def $eflags
    JCC_1 %bb.17, 4, implicit $eflags
  
  bb.1.BB_73:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_73", 1 /* sideeffect attdialect */
    %19:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %17:gr64 = ADD64ri32 %19, 8, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 @_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
  
  bb.2.BB_74:
    successors: %bb.17(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_74", 1 /* sideeffect attdialect */
    CMP64ri32 %15, 0, implicit-def $eflags
    JCC_1 %bb.17, 5, implicit $eflags
  
  bb.3.BB_75:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_75", 1 /* sideeffect attdialect */
    %30:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.18)
    %28:gr64 = ADD64ri32 %30, 16, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %28 :: (store (s64) into %ir.1)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
    %24:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %23:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %21:gr32 = MOV32ri 65535
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %23
    $esi = COPY %21
    CALL64pcrel32 @_ZStanSt12memory_orderSt23__memory_order_modifier, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %22:gr32 = COPY $eax
  
  bb.4.BB_76:
    successors: %bb.6(0x40000000), %bb.19(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_76", 1 /* sideeffect attdialect */
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %22 :: (store (s32) into %ir.3)
    %4:gr64 = COPY %24
    %31:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
    %32:gr32 = DEC32r %31, implicit-def dead $eflags
    %33:gr32 = SUB32ri %32, 2, implicit-def $eflags
    JCC_1 %bb.6, 2, implicit $eflags
    JMP_1 %bb.19
  
  bb.19.BB_76:
    successors: %bb.7(0x40000000), %bb.5(0x40000000)
  
    %34:gr32 = SUB32ri %31, 5, implicit-def $eflags
    JCC_1 %bb.7, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.5.BB_77:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_77", 1 /* sideeffect attdialect */
    %37:gr64 = MOV64rm %4, 1, $noreg, 0, $noreg :: (load monotonic (s64) from %ir.26)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %37 :: (store (s64) into %ir.4)
    JMP_1 %bb.8
  
  bb.6.BB_78:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_78", 1 /* sideeffect attdialect */
    %36:gr64 = MOV64rm %4, 1, $noreg, 0, $noreg :: (load acquire (s64) from %ir.26)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %36 :: (store (s64) into %ir.4)
    JMP_1 %bb.8
  
  bb.7.BB_79:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_79", 1 /* sideeffect attdialect */
    %35:gr64 = MOV64rm %4, 1, $noreg, 0, $noreg :: (load seq_cst (s64) from %ir.26)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %35 :: (store (s64) into %ir.4)
  
  bb.8.BB_80:
    successors: %bb.12(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_80", 1 /* sideeffect attdialect */
    CMP64mi32 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s64) from %ir.4)
    %42:gr8 = SETCCr 4, implicit $eflags
    %41:gr8 = AND8ri %42, 1, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 0, $noreg, %41 :: (store (s8) into %ir.6)
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.6)
    JCC_1 %bb.12, 5, implicit $eflags
  
  bb.9.BB_81:
    successors: %bb.10(0x40000000), %bb.18(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_81", 1 /* sideeffect attdialect */
    %44:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.36)
    %45:gr64 = MOV64rm %44, 1, $noreg, 0, $noreg :: (load (s64) from %ir.38)
    %46:gr64 = MOV64rm killed %45, 1, $noreg, 16, $noreg :: (load (s64) from %ir.40)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %44
    CALL64r killed %46, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.10
  
  bb.10.BB_82:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_82", 1 /* sideeffect attdialect */
    %57:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.42)
    %55:gr64 = ADD64ri32 %57, 16, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %55
    CALL64pcrel32 @_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %53:gr64 = COPY $rax
  
  bb.11.BB_83:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_83", 1 /* sideeffect attdialect */
    CMP64ri32 %53, 0, implicit-def $eflags
    %61:gr8 = SETCCr 4, implicit $eflags
    %60:gr8 = AND8ri %61, 1, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 0, $noreg, %60 :: (store (s8) into %ir.6)
  
  bb.12.BB_84:
    successors: %bb.16(0x40000000), %bb.13(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_84", 1 /* sideeffect attdialect */
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.6)
    JCC_1 %bb.16, 4, implicit $eflags
  
  bb.13.BB_85:
    successors: %bb.15(0x40000000), %bb.14(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_85", 1 /* sideeffect attdialect */
    %63:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.51)
    CMP64ri32 %63, 0, implicit-def $eflags
    JCC_1 %bb.15, 4, implicit $eflags
  
  bb.14.BB_86:
    successors: %bb.15(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_86", 1 /* sideeffect attdialect */
    %66:gr64 = MOV64rm %63, 1, $noreg, 0, $noreg :: (load (s64) from %ir.54)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %63
    CALL64m %66, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.56)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.15.BB_87:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_87", 1 /* sideeffect attdialect */
  
  bb.16.BB_88:
    successors: %bb.17(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_88", 1 /* sideeffect attdialect */
  
  bb.17.BB_89:
    INLINEASM &"# LLVM BB: BB_89", 1 /* sideeffect attdialect */
    RET64
  
  bb.18.BB_90 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %48:gr64 = COPY killed $rdx
    %47:gr64 = COPY killed $rax
    %51:gr32 = COPY %48.sub_32bit
    %50:gr64 = COPY %47
    INLINEASM &"# LLVM BB: BB_90", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %50
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail25atomic_refcount_decrementERSt6atomicImE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64_nosp, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
jumpTable:
  kind:            block-address
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.2', '%bb.3', '%bb.4', '%bb.5' ]
body:             |
  bb.0.BB_91:
    successors: %bb.1(0x40000000), %bb.7(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_91", 1 /* sideeffect attdialect */
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    %4:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %4 :: (store (s64) into %ir.1)
    MOV64mi32 %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.2)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 4 :: (store (s32) into %ir.3)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %6 :: (store (s64) into %ir.4)
    %7:gr32 = DEC32r %5, implicit-def dead $eflags
    %3:gr64_nosp = SUBREG_TO_REG 0, %7, %subreg.sub_32bit
    %8:gr32 = SUB32ri %7, 4, implicit-def $eflags
    JCC_1 %bb.1, 7, implicit $eflags
  
  bb.7.BB_91:
    successors: %bb.2(0x20000000), %bb.3(0x20000000), %bb.4(0x20000000), %bb.5(0x20000000)
  
    %9:gr64 = MOV64rm $noreg, 8, %3, %jump-table.0, $noreg :: (load (s64) from jump-table)
    JMP64r killed %9
  
  bb.1.BB_92:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_92", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %24:gr64 = NEG64r %23, implicit-def dead $eflags
    %22:gr64 = LXADD64 %24, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store monotonic (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %22 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.2.BB_93:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_93", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %21:gr64 = NEG64r %20, implicit-def dead $eflags
    %19:gr64 = LXADD64 %21, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store acquire (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.3.BB_94:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_94", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %18:gr64 = NEG64r %17, implicit-def dead $eflags
    %16:gr64 = LXADD64 %18, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store release (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.4.BB_95:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_95", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %15:gr64 = NEG64r %14, implicit-def dead $eflags
    %13:gr64 = LXADD64 %15, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store acq_rel (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.5.BB_96:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_96", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %12:gr64 = NEG64r %11, implicit-def dead $eflags
    %10:gr64 = LXADD64 %12, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store seq_cst (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.5)
  
  bb.6.BB_97:
    INLINEASM &"# LLVM BB: BB_97", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %27:gr64 = SUB64ri32 %28, 1, implicit-def $eflags
    $rax = COPY %27
    RET64 implicit $rax

...
---
name:            _ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64_nosp, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
jumpTable:
  kind:            block-address
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.2', '%bb.3', '%bb.4', '%bb.5' ]
body:             |
  bb.0.BB_98:
    successors: %bb.1(0x40000000), %bb.7(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_98", 1 /* sideeffect attdialect */
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    %4:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %4 :: (store (s64) into %ir.1)
    MOV64mi32 %stack.1, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.2)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 4 :: (store (s32) into %ir.3)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    %5:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, killed %6 :: (store (s64) into %ir.4)
    %7:gr32 = DEC32r %5, implicit-def dead $eflags
    %3:gr64_nosp = SUBREG_TO_REG 0, %7, %subreg.sub_32bit
    %8:gr32 = SUB32ri %7, 4, implicit-def $eflags
    JCC_1 %bb.1, 7, implicit $eflags
  
  bb.7.BB_98:
    successors: %bb.2(0x20000000), %bb.3(0x20000000), %bb.4(0x20000000), %bb.5(0x20000000)
  
    %9:gr64 = MOV64rm $noreg, 8, %3, %jump-table.0, $noreg :: (load (s64) from jump-table)
    JMP64r killed %9
  
  bb.1.BB_99:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_99", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %24:gr64 = NEG64r %23, implicit-def dead $eflags
    %22:gr64 = LXADD64 %24, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store monotonic (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %22 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.2.BB_100:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_100", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %21:gr64 = NEG64r %20, implicit-def dead $eflags
    %19:gr64 = LXADD64 %21, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store acquire (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.3.BB_101:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_101", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %18:gr64 = NEG64r %17, implicit-def dead $eflags
    %16:gr64 = LXADD64 %18, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store release (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.4.BB_102:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_102", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %15:gr64 = NEG64r %14, implicit-def dead $eflags
    %13:gr64 = LXADD64 %15, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store acq_rel (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.5.BB_103:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_103", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %12:gr64 = NEG64r %11, implicit-def dead $eflags
    %10:gr64 = LXADD64 %12, %0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load store seq_cst (s64) on %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.5)
  
  bb.6.BB_104:
    INLINEASM &"# LLVM BB: BB_104", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %27:gr64 = SUB64ri32 %28, 1, implicit-def $eflags
    $rax = COPY %27
    RET64 implicit $rax

...
---
name:            _ZStanSt12memory_orderSt23__memory_order_modifier
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_105:
    liveins: $edi, $esi
  
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_105", 1 /* sideeffect attdialect */
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.2)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.3)
    %8:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %7:gr32 = AND32rm %8, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
    $eax = COPY %7
    RET64 implicit $eax

...
---
name:            _ZNK2at6Tensor2gtERKN3c106ScalarE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_106:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_106", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %7
    $rdx = COPY %6
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops9gt_Scalar4callERKNS_6TensorERKN3c106ScalarE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c106ScalarC2IlLPb0EEET_b
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$edx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_107:
    liveins: $rdi, $rsi, $edx
  
    %2:gr32 = COPY $edx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr8 = COPY %2.sub_8bit
    INLINEASM &"# LLVM BB: BB_107", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %13:gr8 = AND8ri %3, 1, implicit-def $eflags
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %13 :: (store (s8) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV32mi %11, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.8, align 16)
    %10:gr64 = ADD64ri32 %11, 16, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZN3c106Scalar3v_tC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c107convertIllEET_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    MOV64mr %11, 1, $noreg, 16, $noreg, %7 :: (store (s64) into %ir.13, align 16)
    RET64

...
---
name:            _ZN3c106Scalar3v_tC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: fr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_108:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_108", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %3:fr64 = FsFLD0SD
    MOVSDmr %4, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3, align 16)
    RET64

...
---
name:            _ZN3c107convertIllEET_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_109:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_109", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZN3c1027static_cast_with_inter_typeIllE5applyEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c1027static_cast_with_inter_typeIllE5applyEl
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_110:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_110", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    MOV8mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.2)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZN3c1010maybe_realILb0ElE5applyEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.3)
    %3:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1010maybe_realILb0ElE5applyEl
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_111:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_111", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c106Scalar7destroyEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_112:
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_112", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %3:gr32 = MOV32ri 5
    CMP32rm %3, %5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3, align 16)
    JCC_1 %bb.3, 4, implicit $eflags
  
  bb.1.BB_113:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_113", 1 /* sideeffect attdialect */
    %6:gr32 = MOV32ri 4
    CMP32rm %6, %5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6, align 16)
    JCC_1 %bb.3, 4, implicit $eflags
  
  bb.2.BB_114:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_114", 1 /* sideeffect attdialect */
    %8:gr32 = MOV32ri 6
    CMP32rm %8, %5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.9, align 16)
    JCC_1 %bb.4, 5, implicit $eflags
  
  bb.3.BB_115:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_115", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64rm %5, 1, $noreg, 16, $noreg :: (load (s64) from %ir.13, align 16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZN3c103raw13intrusive_ptr6decrefEPNS_20intrusive_ptr_targetE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    MOV64mi32 %5, 1, $noreg, 16, $noreg, 0 :: (store (s64) into %ir.16, align 16)
  
  bb.4.BB_116:
    INLINEASM &"# LLVM BB: BB_116", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZN3c103raw13intrusive_ptr6decrefEPNS_20intrusive_ptr_targetE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_117:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_117", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %3:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    $rsi = COPY %5
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %2:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr32, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr8, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr8, preferred-register: '' }
  - { id: 56, class: gr8, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%8' }
  - { reg: '$rsi', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_118:
    successors: %bb.13(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %9:gr64 = COPY $rsi
    %8:gr64 = COPY $rdi
    %10:gr64 = COPY %8
    INLINEASM &"# LLVM BB: BB_118", 1 /* sideeffect attdialect */
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.10)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.11)
    %15:gr64 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    %11:gr8 = MOV8ri 1
    CMP64rr %15, %14, implicit-def $eflags
    %66:gr8 = COPY %11
    JCC_1 %bb.13, 4, implicit $eflags
  
  bb.1.BB_119:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_119", 1 /* sideeffect attdialect */
    %26:gr64 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %25:gr64 = ADD64ri32 %26, 8, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %25 :: (store (s64) into %ir.2)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.3)
    %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %20:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    %18:gr32 = MOV32ri 65535
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %20
    $esi = COPY %18
    CALL64pcrel32 @_ZStanSt12memory_orderSt23__memory_order_modifier, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr32 = COPY $eax
  
  bb.2.BB_120:
    successors: %bb.4(0x40000000), %bb.16(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_120", 1 /* sideeffect attdialect */
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %19 :: (store (s32) into %ir.4)
    %2:gr64 = COPY %21
    %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
    %28:gr32 = DEC32r %27, implicit-def dead $eflags
    %29:gr32 = SUB32ri %28, 2, implicit-def $eflags
    JCC_1 %bb.4, 2, implicit $eflags
    JMP_1 %bb.16
  
  bb.16.BB_120:
    successors: %bb.5(0x40000000), %bb.3(0x40000000)
  
    %30:gr32 = SUB32ri %27, 5, implicit-def $eflags
    JCC_1 %bb.5, 4, implicit $eflags
    JMP_1 %bb.3
  
  bb.3.BB_121:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_121", 1 /* sideeffect attdialect */
    %33:gr64 = MOV64rm %2, 1, $noreg, 0, $noreg :: (load monotonic (s64) from %ir.23)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %33 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.4.BB_122:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_122", 1 /* sideeffect attdialect */
    %32:gr64 = MOV64rm %2, 1, $noreg, 0, $noreg :: (load acquire (s64) from %ir.23)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %32 :: (store (s64) into %ir.5)
    JMP_1 %bb.6
  
  bb.5.BB_123:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_123", 1 /* sideeffect attdialect */
    %31:gr64 = MOV64rm %2, 1, $noreg, 0, $noreg :: (load seq_cst (s64) from %ir.23)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %31 :: (store (s64) into %ir.5)
  
  bb.6.BB_124:
    successors: %bb.13(0x40000000), %bb.7(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_124", 1 /* sideeffect attdialect */
    %34:gr8 = MOV8ri 1
    CMP64mi32 %stack.3, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.5)
    %66:gr8 = COPY %34
    JCC_1 %bb.13, 4, implicit $eflags
  
  bb.7.BB_125:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_125", 1 /* sideeffect attdialect */
    %45:gr64 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %44:gr64 = ADD64ri32 %45, 16, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %44 :: (store (s64) into %ir.6)
    MOV32mi %stack.5, 1, $noreg, 0, $noreg, 5 :: (store (s32) into %ir.7)
    %40:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %39:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    %37:gr32 = MOV32ri 65535
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %39
    $esi = COPY %37
    CALL64pcrel32 @_ZStanSt12memory_orderSt23__memory_order_modifier, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %38:gr32 = COPY $eax
  
  bb.8.BB_126:
    successors: %bb.10(0x40000000), %bb.17(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_126", 1 /* sideeffect attdialect */
    MOV32mr %stack.6, 1, $noreg, 0, $noreg, %38 :: (store (s32) into %ir.8)
    %5:gr64 = COPY %40
    %46:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.7)
    %47:gr32 = DEC32r %46, implicit-def dead $eflags
    %48:gr32 = SUB32ri %47, 2, implicit-def $eflags
    JCC_1 %bb.10, 2, implicit $eflags
    JMP_1 %bb.17
  
  bb.17.BB_126:
    successors: %bb.11(0x40000000), %bb.9(0x40000000)
  
    %49:gr32 = SUB32ri %46, 5, implicit-def $eflags
    JCC_1 %bb.11, 4, implicit $eflags
    JMP_1 %bb.9
  
  bb.9.BB_127:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_127", 1 /* sideeffect attdialect */
    %52:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load monotonic (s64) from %ir.36)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %52 :: (store (s64) into %ir.9)
    JMP_1 %bb.12
  
  bb.10.BB_128:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_128", 1 /* sideeffect attdialect */
    %51:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load acquire (s64) from %ir.36)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %51 :: (store (s64) into %ir.9)
    JMP_1 %bb.12
  
  bb.11.BB_129:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_129", 1 /* sideeffect attdialect */
    %50:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load seq_cst (s64) from %ir.36)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %50 :: (store (s64) into %ir.9)
  
  bb.12.BB_130:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_130", 1 /* sideeffect attdialect */
    CMP64mi32 %stack.7, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.9)
    %53:gr8 = SETCCr 5, implicit $eflags
    %66:gr8 = COPY %53
  
  bb.13.BB_131:
    successors: %bb.14(0x40000000), %bb.15(0x40000000)
  
    %7:gr8 = COPY %66
    INLINEASM &"# LLVM BB: BB_131", 1 /* sideeffect attdialect */
    %56:gr8 = XOR8ri %7, -1, implicit-def $eflags
    TEST8ri %56, 1, implicit-def $eflags
    JCC_1 %bb.14, 5, implicit $eflags
    JMP_1 %bb.15
  
  bb.14.BB_132:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_132", 1 /* sideeffect attdialect */
    %64:gr64 = MOV64ri @.str.3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %64
    CALL64pcrel32 @_ZN3c103strIJA68_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %65:gr64 = COPY $rax
    %59:gr64 = MOV64ri @__func__._ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE7reclaimEPS1_
    %60:gr64 = MOV64ri @.str.1
    %61:gr32 = MOV32ri 475
    %62:gr64 = MOV64ri @.str.2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %59
    $rsi = COPY %60
    $edx = COPY %61
    $rcx = COPY %62
    $r8 = COPY %65
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.15.BB_133:
    INLINEASM &"# LLVM BB: BB_133", 1 /* sideeffect attdialect */
    %58:gr64 = MOV64rm %stack.9, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %58
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEEC2EPS1_NS_3raw20DontIncreaseRefcountE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %10
    RET64 implicit $rax

...
---
name:            _ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_134:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_134", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE6reset_Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_135:
    INLINEASM &"# LLVM BB: BB_135", 1 /* sideeffect attdialect */
    %0:gr32 = MOV32r0 implicit-def $eflags
    %1:gr64 = SUBREG_TO_REG 0, %0, %subreg.sub_32bit
    $rax = COPY %1
    RET64 implicit $rax

...
---
name:            _ZN3c103strIJA68_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_136:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_136", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEEC2EPS1_NS_3raw20DontIncreaseRefcountE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_137:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_137", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %7, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.6)
    RET64

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcEE4callES3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_138:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_138", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1013intrusive_ptrINS_20intrusive_ptr_targetENS_6detail34intrusive_target_default_null_typeIS1_EEE6reset_Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr8, preferred-register: '' }
  - { id: 36, class: gr8, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr8, preferred-register: '' }
  - { id: 50, class: gr8, preferred-register: '' }
  - { id: 51, class: gr8, preferred-register: '' }
  - { id: 52, class: gr8, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr8, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_139:
    successors: %bb.15(0x40000000), %bb.1(0x40000000)
    liveins: $rdi
  
    %5:gr64 = COPY $rdi
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_139", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c106detail34intrusive_target_default_null_typeINS_20intrusive_ptr_targetEE9singletonEv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    CMP64rr %10, %9, implicit-def $eflags
    JCC_1 %bb.15, 4, implicit $eflags
  
  bb.1.BB_140:
    successors: %bb.15(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_140", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %16:gr64 = ADD64ri32 %17, 8, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    CALL64pcrel32 @_ZN3c106detail25atomic_refcount_decrementERSt6atomicImE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    CMP64ri32 %14, 0, implicit-def $eflags
    JCC_1 %bb.15, 5, implicit $eflags
  
  bb.2.BB_141:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_141", 1 /* sideeffect attdialect */
    %27:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.17)
    %26:gr64 = ADD64ri32 %27, 16, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %26 :: (store (s64) into %ir.1)
    MOV32mi %stack.1, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.2)
    %22:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %21:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
    %19:gr32 = MOV32ri 65535
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %21
    $esi = COPY %19
    CALL64pcrel32 @_ZStanSt12memory_orderSt23__memory_order_modifier, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr32 = COPY $eax
  
  bb.3.BB_142:
    successors: %bb.5(0x40000000), %bb.17(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_142", 1 /* sideeffect attdialect */
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %20 :: (store (s32) into %ir.3)
    %3:gr64 = COPY %22
    %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.2)
    %29:gr32 = DEC32r %28, implicit-def dead $eflags
    %30:gr32 = SUB32ri %29, 2, implicit-def $eflags
    JCC_1 %bb.5, 2, implicit $eflags
    JMP_1 %bb.17
  
  bb.17.BB_142:
    successors: %bb.6(0x40000000), %bb.4(0x40000000)
  
    %31:gr32 = SUB32ri %28, 5, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
    JMP_1 %bb.4
  
  bb.4.BB_143:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_143", 1 /* sideeffect attdialect */
    %34:gr64 = MOV64rm %3, 1, $noreg, 0, $noreg :: (load monotonic (s64) from %ir.24)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %34 :: (store (s64) into %ir.4)
    JMP_1 %bb.7
  
  bb.5.BB_144:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_144", 1 /* sideeffect attdialect */
    %33:gr64 = MOV64rm %3, 1, $noreg, 0, $noreg :: (load acquire (s64) from %ir.24)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %33 :: (store (s64) into %ir.4)
    JMP_1 %bb.7
  
  bb.6.BB_145:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_145", 1 /* sideeffect attdialect */
    %32:gr64 = MOV64rm %3, 1, $noreg, 0, $noreg :: (load seq_cst (s64) from %ir.24)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %32 :: (store (s64) into %ir.4)
  
  bb.7.BB_146:
    successors: %bb.10(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_146", 1 /* sideeffect attdialect */
    CMP64mi32 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s64) from %ir.4)
    %39:gr8 = SETCCr 4, implicit $eflags
    %38:gr8 = AND8ri %39, 1, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 0, $noreg, %38 :: (store (s8) into %ir.6)
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.6)
    JCC_1 %bb.10, 5, implicit $eflags
  
  bb.8.BB_147:
    successors: %bb.9(0x40000000), %bb.16(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_147", 1 /* sideeffect attdialect */
    %41:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.34)
    %42:gr64 = MOV64rm %41, 1, $noreg, 0, $noreg :: (load (s64) from %ir.36)
    %43:gr64 = MOV64rm killed %42, 1, $noreg, 16, $noreg :: (load (s64) from %ir.38)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %41
    CALL64r killed %43, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.9
  
  bb.9.BB_148:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_148", 1 /* sideeffect attdialect */
    %58:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.40)
    %57:gr64 = ADD64ri32 %58, 16, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %57
    CALL64pcrel32 @_ZN3c106detail26atomic_weakcount_decrementERSt6atomicImE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %55:gr64 = COPY $rax
    CMP64ri32 %55, 0, implicit-def $eflags
    %52:gr8 = SETCCr 4, implicit $eflags
    %51:gr8 = AND8ri %52, 1, implicit-def $eflags
    MOV8mr %stack.5, 1, $noreg, 0, $noreg, %51 :: (store (s8) into %ir.6)
  
  bb.10.BB_149:
    successors: %bb.14(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_149", 1 /* sideeffect attdialect */
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.6)
    JCC_1 %bb.14, 4, implicit $eflags
  
  bb.11.BB_150:
    successors: %bb.13(0x40000000), %bb.12(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_150", 1 /* sideeffect attdialect */
    %60:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.48)
    CMP64ri32 %60, 0, implicit-def $eflags
    JCC_1 %bb.13, 4, implicit $eflags
  
  bb.12.BB_151:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_151", 1 /* sideeffect attdialect */
    %63:gr64 = MOV64rm %60, 1, $noreg, 0, $noreg :: (load (s64) from %ir.51)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %60
    CALL64m %63, 1, $noreg, 8, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi :: (load (s64) from %ir.53)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.13.BB_152:
    successors: %bb.14(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_152", 1 /* sideeffect attdialect */
  
  bb.14.BB_153:
    successors: %bb.15(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_153", 1 /* sideeffect attdialect */
  
  bb.15.BB_154:
    INLINEASM &"# LLVM BB: BB_154", 1 /* sideeffect attdialect */
    RET64
  
  bb.16.BB_155 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %45:gr64 = COPY killed $rdx
    %44:gr64 = COPY killed $rax
    %48:gr32 = COPY %45.sub_32bit
    %47:gr64 = COPY %44
    INLINEASM &"# LLVM BB: BB_155", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %47
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
