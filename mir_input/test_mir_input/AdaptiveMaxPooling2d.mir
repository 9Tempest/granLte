--- |
  ; ModuleID = 'AdaptiveMaxPooling2d.ll'
  source_filename = "pytorch/aten/src/ATen/native/AdaptiveMaxPooling2d.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  %"struct.at::native::DispatchStubImpl" = type { %"struct.std::atomic.51", ptr, ptr, ptr, ptr }
  %"struct.std::atomic.51" = type { %"struct.std::__atomic_base.52" }
  %"struct.std::__atomic_base.52" = type { ptr }
  %"class.c10::DispatchKeySet" = type { i64 }
  %"class.c10::ArrayRef" = type { ptr, i64 }
  %"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
  %"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { ptr }
  %union.anon = type { i64, [8 x i8] }
  %"struct.c10::integer_range" = type { %"struct.c10::detail::integer_iterator", %"struct.c10::detail::integer_iterator" }
  %"struct.c10::detail::integer_iterator" = type { i32 }
  %"class.std::initializer_list" = type { ptr, i64 }
  %"struct.c10::TensorOptions" = type <{ %"struct.c10::Device", %"class.caffe2::TypeMeta", i8, i8, i8, i8 }>
  %"struct.c10::Device" = type { i8, i8 }
  %"class.caffe2::TypeMeta" = type { i16 }
  %"class.c10::ArrayRef.44" = type { ptr, i64 }
  %"class.c10::optional.45" = type { %"struct.c10::trivially_copyable_optimization_optional_base.46" }
  %"struct.c10::trivially_copyable_optimization_optional_base.46" = type { i8, %"union.c10::constexpr_storage_t.47" }
  %"union.c10::constexpr_storage_t.47" = type { i8 }
  %"class.c10::optional.48" = type { %"struct.c10::trivially_copyable_optimization_optional_base.49" }
  %"struct.c10::trivially_copyable_optimization_optional_base.49" = type { i8, %"union.c10::constexpr_storage_t.50" }
  %"union.c10::constexpr_storage_t.50" = type { i8 }
  %"class.at::TensorBase" = type { %"class.c10::intrusive_ptr" }
  %"class.c10::intrusive_ptr" = type { ptr }
  %"class.c10::optional.54" = type { %"struct.c10::trivially_copyable_optimization_optional_base.55" }
  %"struct.c10::trivially_copyable_optimization_optional_base.55" = type { i8, %"union.c10::constexpr_storage_t.56" }
  %"union.c10::constexpr_storage_t.56" = type { %"class.caffe2::TypeMeta" }
  %"class.c10::optional.57" = type { %"struct.c10::trivially_copyable_optimization_optional_base.58" }
  %"struct.c10::trivially_copyable_optimization_optional_base.58" = type { i8, %"union.c10::constexpr_storage_t.59" }
  %"union.c10::constexpr_storage_t.59" = type { i8 }
  %"class.std::vector" = type { %"struct.std::_Vector_base" }
  %"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl" }
  %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl" = type { %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data" }
  %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data" = type { ptr, ptr, ptr }
  %"struct.c10::integer_range.64" = type { %"struct.c10::detail::integer_iterator.65", %"struct.c10::detail::integer_iterator.65" }
  %"struct.c10::detail::integer_iterator.65" = type { i64 }
  %"struct.c10::TensorImpl" = type { %"class.c10::intrusive_ptr_target", %"struct.c10::Storage", %"class.std::unique_ptr.5", %"class.std::unique_ptr.13", %"struct.c10::VariableVersion", %"struct.c10::impl::PyObjectSlot", %"class.c10::impl::SizesAndStrides", i64, i64, %"class.caffe2::TypeMeta", %"class.c10::optional.43", [3 x i8], %"class.c10::DispatchKeySet" }
  %"class.c10::intrusive_ptr_target" = type { ptr, %"struct.std::atomic", %"struct.std::atomic" }
  %"struct.std::atomic" = type { %"struct.std::__atomic_base" }
  %"struct.std::__atomic_base" = type { i64 }
  %"struct.c10::Storage" = type { %"class.c10::intrusive_ptr.0" }
  %"class.c10::intrusive_ptr.0" = type { ptr }
  %"class.std::unique_ptr.5" = type { %"struct.std::__uniq_ptr_data.6" }
  %"struct.std::__uniq_ptr_data.6" = type { %"class.std::__uniq_ptr_impl.7" }
  %"class.std::__uniq_ptr_impl.7" = type { %"class.std::tuple.8" }
  %"class.std::tuple.8" = type { %"struct.std::_Tuple_impl.9" }
  %"struct.std::_Tuple_impl.9" = type { %"struct.std::_Head_base.12" }
  %"struct.std::_Head_base.12" = type { ptr }
  %"class.std::unique_ptr.13" = type { %"struct.std::__uniq_ptr_data.14" }
  %"struct.std::__uniq_ptr_data.14" = type { %"class.std::__uniq_ptr_impl.15" }
  %"class.std::__uniq_ptr_impl.15" = type { %"class.std::tuple.16" }
  %"class.std::tuple.16" = type { %"struct.std::_Tuple_impl.17" }
  %"struct.std::_Tuple_impl.17" = type { %"struct.std::_Head_base.20" }
  %"struct.std::_Head_base.20" = type { ptr }
  %"struct.c10::VariableVersion" = type { %"class.c10::intrusive_ptr.39" }
  %"class.c10::intrusive_ptr.39" = type { ptr }
  %"struct.c10::impl::PyObjectSlot" = type { %"struct.std::atomic.3", ptr }
  %"struct.std::atomic.3" = type { %"struct.std::__atomic_base.4" }
  %"struct.std::__atomic_base.4" = type { ptr }
  %"class.c10::impl::SizesAndStrides" = type { i64, %union.anon.42 }
  %union.anon.42 = type { [10 x i64] }
  %"class.c10::optional.43" = type { %"struct.c10::trivially_copyable_optimization_optional_base" }
  %"struct.c10::trivially_copyable_optimization_optional_base" = type { i8, %"union.c10::constexpr_storage_t" }
  %"union.c10::constexpr_storage_t" = type { %"struct.c10::Device" }
  %"class.std::__cxx11::basic_ostringstream" = type { %"class.std::basic_ostream.base", %"class.std::__cxx11::basic_stringbuf", %"class.std::basic_ios" }
  %"class.std::basic_ostream.base" = type { ptr }
  %"class.std::__cxx11::basic_stringbuf" = type { %"class.std::basic_streambuf", i32, %"class.std::__cxx11::basic_string" }
  %"class.std::basic_streambuf" = type { ptr, ptr, ptr, ptr, ptr, ptr, ptr, %"class.std::locale" }
  %"class.std::locale" = type { ptr }
  %"class.std::basic_ios" = type { %"class.std::ios_base", ptr, i8, i8, ptr, ptr, ptr, ptr }
  %"class.std::ios_base" = type { ptr, i64, i64, i32, i32, i32, ptr, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, ptr, %"class.std::locale" }
  %"struct.std::ios_base::_Words" = type { ptr, i64 }
  %"struct.c10::in_place_t" = type { i8 }
  %class.anon = type { i8 }
  %"class.std::initializer_list.60" = type { ptr, i64 }
  %"struct.c10::detail::CompileTimeEmptyString" = type { i8 }
  %"struct.c10::SymbolicShapeMeta" = type { %"class.c10::SmallVector", %"class.c10::SmallVector", %"class.c10::SymInt", %"class.c10::SymInt", %"class.c10::SymBool", %"class.c10::SymBool", %"class.c10::SymBool", %"class.c10::SymBool", %"class.c10::SymBool", %"class.c10::SymBool" }
  %"class.c10::SmallVector" = type { %"class.c10::SmallVectorImpl", %"struct.c10::SmallVectorStorage" }
  %"class.c10::SmallVectorImpl" = type { %"class.c10::SmallVectorTemplateBase" }
  %"class.c10::SmallVectorTemplateBase" = type { %"class.c10::SmallVectorTemplateCommon" }
  %"class.c10::SmallVectorTemplateCommon" = type { %"class.c10::SmallVectorBase" }
  %"class.c10::SmallVectorBase" = type { ptr, i32, i32 }
  %"struct.c10::SmallVectorStorage" = type { [40 x i8] }
  %"class.c10::SymInt" = type { i64 }
  %"class.c10::SymBool" = type { i8, %"class.c10::intrusive_ptr.29" }
  %"class.c10::intrusive_ptr.29" = type { ptr }
  %"struct.c10::ExtraMeta" = type { %"class.std::unique_ptr.21", %"class.std::unique_ptr.30", %"class.c10::intrusive_ptr.38", %"class.c10::optional", %"class.c10::optional" }
  %"class.std::unique_ptr.21" = type { %"struct.std::__uniq_ptr_data.22" }
  %"struct.std::__uniq_ptr_data.22" = type { %"class.std::__uniq_ptr_impl.23" }
  %"class.std::__uniq_ptr_impl.23" = type { %"class.std::tuple.24" }
  %"class.std::tuple.24" = type { %"struct.std::_Tuple_impl.25" }
  %"struct.std::_Tuple_impl.25" = type { %"struct.std::_Head_base.28" }
  %"struct.std::_Head_base.28" = type { ptr }
  %"class.std::unique_ptr.30" = type { %"struct.std::__uniq_ptr_data.31" }
  %"struct.std::__uniq_ptr_data.31" = type { %"class.std::__uniq_ptr_impl.32" }
  %"class.std::__uniq_ptr_impl.32" = type { %"class.std::tuple.33" }
  %"class.std::tuple.33" = type { %"struct.std::_Tuple_impl.34" }
  %"struct.std::_Tuple_impl.34" = type { %"struct.std::_Head_base.37" }
  %"struct.std::_Head_base.37" = type { ptr }
  %"class.c10::intrusive_ptr.38" = type { ptr }
  %"class.c10::optional" = type { %"struct.c10::optional_base" }
  %"struct.c10::optional_base" = type { i8, %"union.c10::storage_t" }
  %"union.c10::storage_t" = type { %"class.std::__cxx11::basic_string" }
  %"class.std::allocator.61" = type { i8 }
  %"struct.std::random_access_iterator_tag" = type { i8 }
  %"class.c10::basic_string_view" = type { ptr, i64 }
  %"class.std::basic_string_view" = type { i64, ptr }
  %"struct.caffe2::detail::TypeMetaData" = type { i64, ptr, ptr, ptr, ptr, ptr, %"class.caffe2::TypeIdentifier", %"class.c10::basic_string_view" }
  %"class.caffe2::TypeIdentifier" = type { %"class.c10::IdWrapper" }
  %"class.c10::IdWrapper" = type { %"struct.c10::util::type_index" }
  %"struct.c10::util::type_index" = type { %"class.c10::IdWrapper.66" }
  %"class.c10::IdWrapper.66" = type { i64 }
  %"struct.at::native::DispatchStub" = type { %"struct.at::native::DispatchStubImpl" }
  %"struct.at::native::DispatchStub.53" = type { %"struct.at::native::DispatchStubImpl" }
  
  $_ZNK2at10TensorBase10ndimensionEv = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplIJA59_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_ = comdat any
  
  $_ZNK2at10TensorBase5sizesEv = comdat any
  
  $_ZN3c106irangeIiiLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_ = comdat any
  
  $_ZNK3c1013integer_rangeIiLb0ELb1EE5beginEv = comdat any
  
  $_ZNK3c1013integer_rangeIiLb0ELb1EE3endEv = comdat any
  
  $_ZNK3c106detail16integer_iteratorIiLb0ELi0EEneERKS2_ = comdat any
  
  $_ZNK3c106detail16integer_iteratorIiLb0ELi0EEdeEv = comdat any
  
  $_ZNK2at10TensorBase4sizeEl = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcPKcDpRKT_ = comdat any
  
  $_ZN3c106detail16integer_iteratorIiLb0ELi0EEppEv = comdat any
  
  $_ZNK3c108ArrayRefIlE4sizeEv = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplEPKcS2_ = comdat any
  
  $_ZNK3c108ArrayRefIlEixEm = comdat any
  
  $_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE = comdat any
  
  $_ZN3c108ArrayRefIlEC2Ev = comdat any
  
  $_ZNK2at10TensorBase7optionsEv = comdat any
  
  $_ZN3c108ArrayRefIN2at7DimnameEEC2Ev = comdat any
  
  $_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE = comdat any
  
  $_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_ = comdat any
  
  $_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE = comdat any
  
  $_ZNK2at10TensorBase21suggest_memory_formatEb = comdat any
  
  $_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_ = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplIJA76_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_ = comdat any
  
  $_ZN6caffe2eqERKNS_8TypeMetaES2_ = comdat any
  
  $_ZNK2at10TensorBase5dtypeEv = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplIJA16_cN6caffe28TypeMetaEA34_cS4_EEEDcPKcDpRKT_ = comdat any
  
  $_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEEclIJS4_S4_S4_RS7_EEEvNS5_10DeviceTypeEDpOT_ = comdat any
  
  $_ZNK2at6Tensor5zero_Ev = comdat any
  
  $_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEEclIJS4_S4_S4_EEEvN3c1010DeviceTypeEDpOT_ = comdat any
  
  $_ZNK2at10TensorBase3dimEv = comdat any
  
  $_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv = comdat any
  
  $_ZNK3c1010TensorImpl3dimEv = comdat any
  
  $_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE = comdat any
  
  $_ZNK3c104impl15SizesAndStrides4sizeEv = comdat any
  
  $_ZN3c103strIJA59_cNS_8ArrayRefIlEEEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_ = comdat any
  
  $_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEEEEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_ = comdat any
  
  $_ZN3c106detail4_strIPKcEERSoS4_RKT_ = comdat any
  
  $_ZN3c10lsIlEERSoS1_NS_8ArrayRefIT_EE = comdat any
  
  $_ZNK3c108ArrayRefIlE5beginEv = comdat any
  
  $_ZNK3c108ArrayRefIlE3endEv = comdat any
  
  $_ZNK3c1010TensorImpl5sizesEv = comdat any
  
  $_ZNK3c104impl15SizesAndStrides14sizes_arrayrefEv = comdat any
  
  $_ZNK3c104impl15SizesAndStrides10sizes_dataEv = comdat any
  
  $_ZN3c108ArrayRefIlEC2EPKlm = comdat any
  
  $__clang_call_terminate = comdat any
  
  $_ZNK3c104impl15SizesAndStrides8isInlineEv = comdat any
  
  $_ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv = comdat any
  
  $_ZN3c103strIJA94_cEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcEE4callES3_ = comdat any
  
  $_ZNK3c1010TensorImpl4sizeEl = comdat any
  
  $_ZN3c1014maybe_wrap_dimEllb = comdat any
  
  $_ZNK3c104impl15SizesAndStrides17size_at_uncheckedEm = comdat any
  
  $_ZN3c1015_maybe_wrap_dimIlEET_S1_S1_b = comdat any
  
  $_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_ = comdat any
  
  $_ZN3c103strIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEES3_RKiS3_EE4callB5cxx11ERKS3_S7_SC_S9_SC_ = comdat any
  
  $_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_iS3_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strINS_8ArrayRefIlEEJPKciS5_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIPKcJiS3_EEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIiJPKcEEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIiEERSoS2_RKT_ = comdat any
  
  $_ZSt5beginIlEPKT_St16initializer_listIS0_E = comdat any
  
  $_ZSt3endIlEPKT_St16initializer_listIS0_E = comdat any
  
  $_ZNKSt16initializer_listIlE4sizeEv = comdat any
  
  $_ZNKSt16initializer_listIlE5beginEv = comdat any
  
  $_ZNKSt16initializer_listIlE3endEv = comdat any
  
  $_ZN3c1013TensorOptionsC2Ev = comdat any
  
  $_ZNK3c1013TensorOptions5dtypeENS_8optionalIN6caffe28TypeMetaEEE = comdat any
  
  $_ZN3c108optionalIN6caffe28TypeMetaEEC2IS2_Lb0EEEOT_ = comdat any
  
  $_ZNK3c1013TensorOptions6deviceIJNS_6DeviceEEEES0_DpOT_ = comdat any
  
  $_ZNK2at10TensorBase6deviceEv = comdat any
  
  $_ZNK3c1013TensorOptions6layoutENS_8optionalINS_6LayoutEEE = comdat any
  
  $_ZNK2at10TensorBase6layoutEv = comdat any
  
  $_ZN3c108optionalINS_6LayoutEEC2IS1_Lb0EEEOT_ = comdat any
  
  $_ZN3c106DeviceC2ENS_10DeviceTypeEa = comdat any
  
  $_ZN6caffe28TypeMeta4MakeIfEES0_v = comdat any
  
  $_ZN3c106Device8validateEv = comdat any
  
  $_ZN3c103strIJA46_ciEEEDcDpRKT_ = comdat any
  
  $_ZNK3c106Device6is_cpuEv = comdat any
  
  $_ZN3c103strIJA42_ciEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_ = comdat any
  
  $_ZN3c106detail4_strIPKcJiEEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN6caffe28TypeMeta13_typeMetaDataIfEEtv = comdat any
  
  $_ZN6caffe28TypeMetaC2Et = comdat any
  
  $_ZNR3c1013TensorOptions9set_dtypeENS_8optionalIN6caffe28TypeMetaEEE = comdat any
  
  $_ZNK3c108optionalIN6caffe28TypeMetaEEcvbEv = comdat any
  
  $_ZNR3c108optionalIN6caffe28TypeMetaEEdeEv = comdat any
  
  $_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv = comdat any
  
  $_ZNK3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEE11initializedEv = comdat any
  
  $_ZNR3c108optionalIN6caffe28TypeMetaEE13contained_valEv = comdat any
  
  $_ZSt7forwardIN6caffe28TypeMetaEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEEC2EOS2_ = comdat any
  
  $_ZN3c1014constexpr_moveIRN6caffe28TypeMetaEEEONSt16remove_referenceIT_E4typeEOS5_ = comdat any
  
  $_ZN3c1019constexpr_storage_tIN6caffe28TypeMetaEEC2IJS2_EEEDpOT_ = comdat any
  
  $_ZN3c1017constexpr_forwardIN6caffe28TypeMetaEEEOT_RNSt16remove_referenceIS3_E4typeE = comdat any
  
  $_ZNK3c1013TensorOptions6deviceENS_8optionalINS_6DeviceEEE = comdat any
  
  $_ZSt7forwardIN3c106DeviceEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c108optionalINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_ = comdat any
  
  $_ZNR3c1013TensorOptions10set_deviceENS_8optionalINS_6DeviceEEE = comdat any
  
  $_ZNK3c108optionalINS_6DeviceEEcvbEv = comdat any
  
  $_ZNR3c108optionalINS_6DeviceEEdeEv = comdat any
  
  $_ZNK3c108optionalINS_6DeviceEE11initializedEv = comdat any
  
  $_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEE11initializedEv = comdat any
  
  $_ZNR3c108optionalINS_6DeviceEE13contained_valEv = comdat any
  
  $_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_ = comdat any
  
  $_ZN3c1019constexpr_storage_tINS_6DeviceEEC2IJS1_EEEDpOT_ = comdat any
  
  $_ZNK3c1010TensorImpl6deviceEv = comdat any
  
  $_ZNK3c1010TensorImpl14device_defaultEv = comdat any
  
  $_ZNK3c108optionalINS_6DeviceEE9has_valueEv = comdat any
  
  $_ZNKR3c108optionalINS_6DeviceEEdeEv = comdat any
  
  $_ZNKR3c108optionalINS_6DeviceEE13contained_valEv = comdat any
  
  $_ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv = comdat any
  
  $_ZNR3c1013TensorOptions10set_layoutENS_8optionalINS_6LayoutEEE = comdat any
  
  $_ZNK3c108optionalINS_6LayoutEEcvbEv = comdat any
  
  $_ZNR3c108optionalINS_6LayoutEEdeEv = comdat any
  
  $_ZNK3c108optionalINS_6LayoutEE11initializedEv = comdat any
  
  $_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEE11initializedEv = comdat any
  
  $_ZNR3c108optionalINS_6LayoutEE13contained_valEv = comdat any
  
  $_ZNK3c1010TensorImpl6layoutEv = comdat any
  
  $_ZNK3c1014DispatchKeySet7has_anyES0_ = comdat any
  
  $_ZNK3c1010TensorImpl9is_sparseEv = comdat any
  
  $_ZNK3c1010TensorImpl9is_mkldnnEv = comdat any
  
  $_ZN3c103strIJA51_cEEEDcDpRKT_ = comdat any
  
  $_ZNK3c1014DispatchKeySetanES0_ = comdat any
  
  $_ZN3c1014DispatchKeySetC2ESt16initializer_listINS_11DispatchKeyEE = comdat any
  
  $_ZN3c1014DispatchKeySetC2Em = comdat any
  
  $_ZNK3c1014DispatchKeySeteqES0_ = comdat any
  
  $_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE = comdat any
  
  $_ZN3c103strIJEEEDcDpRKT_ = comdat any
  
  $_ZN3c1014DispatchKeySet12keys_to_reprESt16initializer_listINS_11DispatchKeyEE = comdat any
  
  $_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv = comdat any
  
  $_ZNKSt16initializer_listIN3c1011DispatchKeyEE3endEv = comdat any
  
  $_ZN3c1014DispatchKeySetC2ENS_11DispatchKeyE = comdat any
  
  $_ZNKSt16initializer_listIN3c1011DispatchKeyEE4sizeEv = comdat any
  
  $_ZN3c1018toFunctionalityKeyENS_11DispatchKeyE = comdat any
  
  $_ZN3c1018toBackendComponentENS_11DispatchKeyE = comdat any
  
  $_ZN3c106detail12_str_wrapperIJEE4callEv = comdat any
  
  $_ZNK3c1014DispatchKeySet7has_allES0_ = comdat any
  
  $_ZSt7forwardIN3c106LayoutEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEEC2EOS1_ = comdat any
  
  $_ZN3c1014constexpr_moveIRNS_6LayoutEEEONSt16remove_referenceIT_E4typeEOS4_ = comdat any
  
  $_ZN3c1019constexpr_storage_tINS_6LayoutEEC2IJS1_EEEDpOT_ = comdat any
  
  $_ZN3c1017constexpr_forwardINS_6LayoutEEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZNR3c1013TensorOptions9set_dtypeENS_8optionalINS_10ScalarTypeEEE = comdat any
  
  $_ZNK3c108optionalINS_10ScalarTypeEEcvbEv = comdat any
  
  $_ZNR3c108optionalINS_10ScalarTypeEEdeEv = comdat any
  
  $_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv = comdat any
  
  $_ZNK3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEE11initializedEv = comdat any
  
  $_ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE = comdat any
  
  $_ZN3c103strIJA25_cNS_10ScalarTypeEA28_cEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_ = comdat any
  
  $_ZN3c106detail4_strIPKcJNS_10ScalarTypeES3_EEERSoS5_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strINS_10ScalarTypeEJPKcEEERSoS5_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strINS_10ScalarTypeEEERSoS3_RKT_ = comdat any
  
  $_ZN3c10lsERSoNS_10ScalarTypeE = comdat any
  
  $_ZNR3c108optionalINS_10ScalarTypeEE13contained_valEv = comdat any
  
  $_ZSt7forwardIRKN3c1010ScalarTypeEEOT_RNSt16remove_referenceIS4_E4typeE = comdat any
  
  $_ZN3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEEC2ERKS1_ = comdat any
  
  $_ZN3c1019constexpr_storage_tINS_10ScalarTypeEEC2IJRKS1_EEEDpOT_ = comdat any
  
  $_ZN3c1017constexpr_forwardIRKNS_10ScalarTypeEEEOT_RNSt16remove_referenceIS4_E4typeE = comdat any
  
  $_ZNR3c1013TensorOptions17set_memory_formatENS_8optionalINS_12MemoryFormatEEE = comdat any
  
  $_ZNK3c108optionalINS_12MemoryFormatEEcvbEv = comdat any
  
  $_ZNR3c108optionalINS_12MemoryFormatEEdeEv = comdat any
  
  $_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv = comdat any
  
  $_ZNK3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEE11initializedEv = comdat any
  
  $_ZNR3c108optionalINS_12MemoryFormatEE13contained_valEv = comdat any
  
  $_ZNK3c1010TensorImpl29is_strides_like_channels_lastEv = comdat any
  
  $_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE = comdat any
  
  $_ZN3c1028get_channels_last_strides_2dENS_8ArrayRefIlEE = comdat any
  
  $_ZNK2at10TensorBase7stridesEv = comdat any
  
  $_ZNSt6vectorIlSaIlEED2Ev = comdat any
  
  $_ZNK3c1010TensorImpl32is_strides_like_channels_last_3dEv = comdat any
  
  $_ZN3c1028get_channels_last_strides_3dENS_8ArrayRefIlEE = comdat any
  
  $_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE = comdat any
  
  $_ZNK3c1010TensorImpl23is_strides_like_defaultENS_12MemoryFormatE = comdat any
  
  $_ZNK3c1010TensorImpl19symbolic_shape_metaEv = comdat any
  
  $_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEcvbEv = comdat any
  
  $_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv = comdat any
  
  $_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEcvbEv = comdat any
  
  $_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEdeEv = comdat any
  
  $_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv = comdat any
  
  $_ZNKSt15__uniq_ptr_implIN3c109ExtraMetaESt14default_deleteIS1_EE6_M_ptrEv = comdat any
  
  $_ZSt3getILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_ = comdat any
  
  $_ZSt12__get_helperILm0EPN3c109ExtraMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE = comdat any
  
  $_ZNSt11_Tuple_implILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEE7_M_headERKS5_ = comdat any
  
  $_ZNSt10_Head_baseILm0EPN3c109ExtraMetaELb0EE7_M_headERKS3_ = comdat any
  
  $_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv = comdat any
  
  $_ZNKSt15__uniq_ptr_implIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE6_M_ptrEv = comdat any
  
  $_ZSt3getILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_ = comdat any
  
  $_ZSt12__get_helperILm0EPN3c1017SymbolicShapeMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE = comdat any
  
  $_ZNSt11_Tuple_implILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEE7_M_headERKS5_ = comdat any
  
  $_ZNSt10_Head_baseILm0EPN3c1017SymbolicShapeMetaELb0EE7_M_headERKS3_ = comdat any
  
  $_ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E = comdat any
  
  $_ZNK3c108ArrayRefIlE6equalsES1_ = comdat any
  
  $_ZNKSt6vectorIlSaIlEE4dataEv = comdat any
  
  $_ZNKSt6vectorIlSaIlEE4sizeEv = comdat any
  
  $_ZNKSt6vectorIlSaIlEE11_M_data_ptrIlEEPT_S4_ = comdat any
  
  $_ZSt5equalIPKlS1_EbT_S2_T0_ = comdat any
  
  $_ZSt11__equal_auxIPKlS1_EbT_S2_T0_ = comdat any
  
  $_ZSt12__equal_aux1IPKlS1_EbT_S2_T0_ = comdat any
  
  $_ZSt12__niter_baseIPKlET_S2_ = comdat any
  
  $_ZNSt7__equalILb1EE5equalIlEEbPKT_S4_S4_ = comdat any
  
  $_ZSt8__memcmpIllEiPKT_PKT0_m = comdat any
  
  $_ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE = comdat any
  
  $_ZNSaIlEC2Ev = comdat any
  
  $_ZNSt6vectorIlSaIlEEC2EmRKS0_ = comdat any
  
  $_ZNSaIlED2Ev = comdat any
  
  $_ZNSt6vectorIlSaIlEEixEm = comdat any
  
  $_ZN3c103strIJA37_cmEEEDcDpRKT_ = comdat any
  
  $_ZNSt15__new_allocatorIlEC2Ev = comdat any
  
  $_ZNSt6vectorIlSaIlEE17_S_check_init_lenEmRKS0_ = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEEC2EmRKS0_ = comdat any
  
  $_ZNSt6vectorIlSaIlEE21_M_default_initializeEm = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEED2Ev = comdat any
  
  $_ZNSt6vectorIlSaIlEE11_S_max_sizeERKS0_ = comdat any
  
  $_ZNSaIlEC2ERKS_ = comdat any
  
  $_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_ = comdat any
  
  $_ZSt3minImERKT_S2_S2_ = comdat any
  
  $_ZNKSt15__new_allocatorIlE8max_sizeEv = comdat any
  
  $_ZNKSt15__new_allocatorIlE11_M_max_sizeEv = comdat any
  
  $_ZNSt15__new_allocatorIlEC2ERKS0_ = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_ = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE17_M_create_storageEm = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE17_Vector_impl_dataC2Ev = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm = comdat any
  
  $_ZNSt16allocator_traitsISaIlEE8allocateERS0_m = comdat any
  
  $_ZNSt15__new_allocatorIlE8allocateEmPKv = comdat any
  
  $_ZNSt15__new_allocatorIlED2Ev = comdat any
  
  $_ZSt27__uninitialized_default_n_aIPlmlET_S1_T0_RSaIT1_E = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv = comdat any
  
  $_ZSt25__uninitialized_default_nIPlmET_S1_T0_ = comdat any
  
  $_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPlmEET_S3_T0_ = comdat any
  
  $_ZSt11__addressofIlEPT_RS0_ = comdat any
  
  $_ZSt10_ConstructIlJEEvPT_DpOT0_ = comdat any
  
  $_ZSt6fill_nIPlmlET_S1_T0_RKT1_ = comdat any
  
  $_ZSt10__fill_n_aIPlmlET_S1_T0_RKT1_St26random_access_iterator_tag = comdat any
  
  $_ZSt17__size_to_integerm = comdat any
  
  $_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_ = comdat any
  
  $_ZSt8__fill_aIPllEvT_S1_RKT0_ = comdat any
  
  $_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_ = comdat any
  
  $_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm = comdat any
  
  $_ZNSt16allocator_traitsISaIlEE10deallocateERS0_Plm = comdat any
  
  $_ZNSt15__new_allocatorIlE10deallocateEPlm = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKmEE4callB5cxx11ERKS3_S5_ = comdat any
  
  $_ZN3c106detail4_strIPKcJmEEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strImEERSoS2_RKT_ = comdat any
  
  $_ZNK3c1010TensorImpl7stridesEv = comdat any
  
  $_ZNK3c104impl15SizesAndStrides16strides_arrayrefEv = comdat any
  
  $_ZNK3c104impl15SizesAndStrides12strides_dataEv = comdat any
  
  $_ZSt8_DestroyIPllEvT_S1_RSaIT0_E = comdat any
  
  $_ZSt8_DestroyIPlEvT_S1_ = comdat any
  
  $_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_ = comdat any
  
  $_ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE = comdat any
  
  $_ZSt7forwardIN3c1012MemoryFormatEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEEC2EOS1_ = comdat any
  
  $_ZN3c1014constexpr_moveIRNS_12MemoryFormatEEEONSt16remove_referenceIT_E4typeEOS4_ = comdat any
  
  $_ZN3c1019constexpr_storage_tINS_12MemoryFormatEEC2IJS1_EEEDpOT_ = comdat any
  
  $_ZN3c1017constexpr_forwardINS_12MemoryFormatEEEOT_RNSt16remove_referenceIS2_E4typeE = comdat any
  
  $_ZN3c103strIJA76_cNS_8ArrayRefIlEEEEEDcDpRKT_ = comdat any
  
  $_ZN3c106irangeIilLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_ = comdat any
  
  $_ZNK3c1013integer_rangeIlLb0ELb1EE5beginEv = comdat any
  
  $_ZNK3c1013integer_rangeIlLb0ELb1EE3endEv = comdat any
  
  $_ZNK3c106detail16integer_iteratorIlLb0ELi0EEneERKS2_ = comdat any
  
  $_ZNK3c106detail16integer_iteratorIlLb0ELi0EEdeEv = comdat any
  
  $_ZN3c106detail17torchCheckMsgImplIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcS3_DpRKT_ = comdat any
  
  $_ZN3c106detail16integer_iteratorIlLb0ELi0EEppEv = comdat any
  
  $_ZSt3maxIlERKT_S2_S2_ = comdat any
  
  $_ZN3c1013integer_rangeIlLb0ELb1EEC2Ell = comdat any
  
  $_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El = comdat any
  
  $_ZNK3c106detail16integer_iteratorIlLb0ELi0EEeqERKS2_ = comdat any
  
  $_ZN3c103strIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJRKPKcS3_RKNS_8ArrayRefIlEES3_RKlS3_EE4callB5cxx11ES5_S5_S9_S5_SB_S5_ = comdat any
  
  $_ZN3c106detail4_strIPKcJS3_NS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strINS_8ArrayRefIlEEJPKclS5_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIPKcJlS3_EEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIlJPKcEEERSoS4_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIlEERSoS2_RKT_ = comdat any
  
  $_ZNK3c1010TensorImpl5dtypeEv = comdat any
  
  $_ZN3c103strIJA16_cN6caffe28TypeMetaEA34_cS3_EEEDcDpRKT_ = comdat any
  
  $_ZN3c106detail12_str_wrapperIJPKcRKN6caffe28TypeMetaES3_S7_EE4callB5cxx11ERKS3_S7_SA_S7_ = comdat any
  
  $_ZN3c106detail4_strIPKcJN6caffe28TypeMetaES3_S5_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIN6caffe28TypeMetaEJPKcS3_EEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIPKcJN6caffe28TypeMetaEEEERSoS6_RKT_DpRKT0_ = comdat any
  
  $_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_ = comdat any
  
  $_ZN6caffe2lsERSoNS_8TypeMetaE = comdat any
  
  $_ZN3c10lsIcEERSt13basic_ostreamIT_St11char_traitsIS2_EES6_NS_17basic_string_viewIS2_EE = comdat any
  
  $_ZNK6caffe28TypeMeta4nameEv = comdat any
  
  $_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E = comdat any
  
  $_ZNK3c1017basic_string_viewIcE4dataEv = comdat any
  
  $_ZNK3c1017basic_string_viewIcE4sizeEv = comdat any
  
  $_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm = comdat any
  
  $_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv = comdat any
  
  $_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv = comdat any
  
  $_ZNK6caffe28TypeMeta4dataEv = comdat any
  
  $_ZSt3maxIiERKT_S2_S2_ = comdat any
  
  $_ZN3c1013integer_rangeIiLb0ELb1EEC2Eii = comdat any
  
  $_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei = comdat any
  
  $_ZNK3c106detail16integer_iteratorIiLb0ELi0EEeqERKS2_ = comdat any
  
  $_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE12get_call_ptrENS5_10DeviceTypeE = comdat any
  
  $_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE = comdat any
  
  $_ZSt7forwardIRN3c108ArrayRefIlEEEOT_RNSt16remove_referenceIS4_E4typeE = comdat any
  
  $_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE12get_call_ptrEN3c1010DeviceTypeE = comdat any
  
  @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE = private unnamed_addr constant [5 x i8] c"meta\00", align 1
  @.str = private unnamed_addr constant [54 x i8] c"pytorch/aten/src/ATen/native/AdaptiveMaxPooling2d.cpp\00", align 1
  @.str.1 = private unnamed_addr constant [157 x i8] c"Expected ndim == 3 || ndim == 4 to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.2 = private unnamed_addr constant [59 x i8] c"adaptive_max_pool2d(): Expected 3D or 4D tensor, but got: \00", align 1
  @.str.3 = private unnamed_addr constant [152 x i8] c"Expected input.size(i) > 0 to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.4 = private unnamed_addr constant [107 x i8] c"adaptive_max_pool2d(): Expected input to have non-zero size for non-batch dimensions, but input has sizes \00", align 1
  @.str.5 = private unnamed_addr constant [17 x i8] c" with dimension \00", align 1
  @.str.6 = private unnamed_addr constant [13 x i8] c" being empty\00", align 1
  @.str.7 = private unnamed_addr constant [158 x i8] c"Expected output_size.size() == 2 to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.8 = private unnamed_addr constant [68 x i8] c"adaptive_max_pool2d(): internal error: output_size.size() must be 2\00", align 1
  @_ZN3c10L5kLongE = internal constant i8 4, align 1
  @.str.9 = private unnamed_addr constant [76 x i8] c"adaptive_max_pooling2d_backward(): Expected 3D or 4D grad_output, but got: \00", align 1
  @.str.10 = private unnamed_addr constant [29 x i8] c"adaptive_max_pool2d_backward\00", align 1
  @.str.11 = private unnamed_addr constant [171 x i8] c"Expected input.dtype() == grad_output.dtype() to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.12 = private unnamed_addr constant [16 x i8] c"expected dtype \00", align 1
  @.str.13 = private unnamed_addr constant [34 x i8] c" for `grad_output` but got dtype \00", align 1
  @_ZN2at6native26adaptive_max_pool2d_kernelE = dso_local global { %"struct.at::native::DispatchStubImpl" } zeroinitializer, align 8
  @_ZN2at6native35adaptive_max_pool2d_backward_kernelE = dso_local global { %"struct.at::native::DispatchStubImpl" } zeroinitializer, align 8
  @.str.16 = private unnamed_addr constant [2 x i8] c"[\00", align 1
  @.str.17 = private unnamed_addr constant [3 x i8] c", \00", align 1
  @.str.18 = private unnamed_addr constant [2 x i8] c"]\00", align 1
  @__func__._ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv = private unnamed_addr constant [27 x i8] c"debugCheckNullptrInvariant\00", align 1
  @.str.19 = private unnamed_addr constant [48 x i8] c"/u9/z277zhu/granLte/pytorch/c10/util/ArrayRef.h\00", align 1
  @.str.20 = private unnamed_addr constant [144 x i8] c"Data != nullptr || Length == 0 INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/util/ArrayRef.h\22:58, please report a bug to PyTorch. \00", align 1
  @.str.21 = private unnamed_addr constant [94 x i8] c"created ArrayRef with nullptr and non-zero length! c10::optional relies on this being illegal\00", align 1
  @__func__._ZN3c106Device8validateEv = private unnamed_addr constant [9 x i8] c"validate\00", align 1
  @.str.22 = private unnamed_addr constant [46 x i8] c"/u9/z277zhu/granLte/pytorch/c10/core/Device.h\00", align 1
  @.str.23 = private unnamed_addr constant [125 x i8] c"index_ >= -1 INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/Device.h\22:179, please report a bug to PyTorch. \00", align 1
  @.str.24 = private unnamed_addr constant [46 x i8] c"Device index must be -1 or non-negative, got \00", align 1
  @.str.25 = private unnamed_addr constant [137 x i8] c"!is_cpu() || index_ <= 0 INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/Device.h\22:183, please report a bug to PyTorch. \00", align 1
  @.str.26 = private unnamed_addr constant [42 x i8] c"CPU device index must be -1 or zero, got \00", align 1
  @.str.27 = private unnamed_addr constant [14 x i8] c"initialized()\00", align 1
  @.str.28 = private unnamed_addr constant [48 x i8] c"/u9/z277zhu/granLte/pytorch/c10/util/Optional.h\00", align 1
  @__PRETTY_FUNCTION__._ZNR3c108optionalIN6caffe28TypeMetaEEdeEv = private unnamed_addr constant [73 x i8] c"T &c10::optional<caffe2::TypeMeta>::operator*() & [T = caffe2::TypeMeta]\00", align 1
  @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6DeviceEEdeEv = private unnamed_addr constant [63 x i8] c"T &c10::optional<c10::Device>::operator*() & [T = c10::Device]\00", align 1
  @__func__._ZNK3c1010TensorImpl14device_defaultEv = private unnamed_addr constant [15 x i8] c"device_default\00", align 1
  @.str.29 = private unnamed_addr constant [50 x i8] c"/u9/z277zhu/granLte/pytorch/c10/core/TensorImpl.h\00", align 1
  @.str.30 = private unnamed_addr constant [158 x i8] c"Expected device_opt_.has_value() to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.31 = private unnamed_addr constant [30 x i8] c"tensor does not have a device\00", align 1
  @.str.32 = private unnamed_addr constant [6 x i8] c"false\00", align 1
  @__PRETTY_FUNCTION__._ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv = private unnamed_addr constant [102 x i8] c"auto c10::optional<c10::Device>::operator*()::(anonymous class)::operator()() const [T = c10::Device]\00", align 1
  @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6LayoutEEdeEv = private unnamed_addr constant [63 x i8] c"T &c10::optional<c10::Layout>::operator*() & [T = c10::Layout]\00", align 1
  @__const._ZNK3c1010TensorImpl6layoutEv.sparse_and_sparsecsr_and_mkldnn_ks = private unnamed_addr constant %"class.c10::DispatchKeySet" { i64 62914560 }, align 8
  @_ZN3c10L13sparse_csr_ksE = internal unnamed_addr constant %"class.c10::DispatchKeySet" { i64 50331648 }, align 8
  @__func__._ZNK3c1010TensorImpl6layoutEv = private unnamed_addr constant [7 x i8] c"layout\00", align 1
  @.str.33 = private unnamed_addr constant [129 x i8] c"is_mkldnn() INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/TensorImpl.h\22:1279, please report a bug to PyTorch. \00", align 1
  @.str.34 = private unnamed_addr constant [51 x i8] c"There is an error in the layout calculation logic.\00", align 1
  @__func__._ZNK3c1014DispatchKeySet7has_anyES0_ = private unnamed_addr constant [8 x i8] c"has_any\00", align 1
  @.str.35 = private unnamed_addr constant [54 x i8] c"/u9/z277zhu/granLte/pytorch/c10/core/DispatchKeySet.h\00", align 1
  @.str.36 = private unnamed_addr constant [303 x i8] c"((ks.repr_ & full_backend_mask) == 0) || ((ks & DispatchKeySet({ DispatchKey::Dense, DispatchKey::Quantized, DispatchKey::Sparse, DispatchKey::AutogradFunctionality, }) .repr_) == 0) INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/DispatchKeySet.h\22:302, please report a bug to PyTorch. \00", align 1
  @_ZN3c10L9sparse_ksE = internal unnamed_addr constant %"class.c10::DispatchKeySet" { i64 8388608 }, align 8
  @_ZN3c10L9mkldnn_ksE = internal unnamed_addr constant %"class.c10::DispatchKeySet" { i64 4194304 }, align 8
  @__func__._ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE = private unnamed_addr constant [15 x i8] c"fromScalarType\00", align 1
  @.str.37 = private unnamed_addr constant [46 x i8] c"/u9/z277zhu/granLte/pytorch/c10/util/typeid.h\00", align 1
  @.str.38 = private unnamed_addr constant [135 x i8] c"index < NumScalarTypes INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/util/typeid.h\22:467, please report a bug to PyTorch. \00", align 1
  @.str.39 = private unnamed_addr constant [25 x i8] c"Unrecognized Scalartype \00", align 1
  @.str.40 = private unnamed_addr constant [28 x i8] c" (please report this error)\00", align 1
  @.str.41 = private unnamed_addr constant [5 x i8] c"Byte\00", align 1
  @.str.42 = private unnamed_addr constant [5 x i8] c"Char\00", align 1
  @.str.43 = private unnamed_addr constant [6 x i8] c"Short\00", align 1
  @.str.44 = private unnamed_addr constant [4 x i8] c"Int\00", align 1
  @.str.45 = private unnamed_addr constant [5 x i8] c"Long\00", align 1
  @.str.46 = private unnamed_addr constant [5 x i8] c"Half\00", align 1
  @.str.47 = private unnamed_addr constant [6 x i8] c"Float\00", align 1
  @.str.48 = private unnamed_addr constant [7 x i8] c"Double\00", align 1
  @.str.49 = private unnamed_addr constant [12 x i8] c"ComplexHalf\00", align 1
  @.str.50 = private unnamed_addr constant [13 x i8] c"ComplexFloat\00", align 1
  @.str.51 = private unnamed_addr constant [14 x i8] c"ComplexDouble\00", align 1
  @.str.52 = private unnamed_addr constant [5 x i8] c"Bool\00", align 1
  @.str.53 = private unnamed_addr constant [6 x i8] c"QInt8\00", align 1
  @.str.54 = private unnamed_addr constant [7 x i8] c"QUInt8\00", align 1
  @.str.55 = private unnamed_addr constant [7 x i8] c"QInt32\00", align 1
  @.str.56 = private unnamed_addr constant [9 x i8] c"BFloat16\00", align 1
  @.str.57 = private unnamed_addr constant [9 x i8] c"QUInt4x2\00", align 1
  @.str.58 = private unnamed_addr constant [9 x i8] c"QUInt2x4\00", align 1
  @.str.59 = private unnamed_addr constant [8 x i8] c"Bits1x8\00", align 1
  @.str.60 = private unnamed_addr constant [8 x i8] c"Bits2x4\00", align 1
  @.str.61 = private unnamed_addr constant [8 x i8] c"Bits4x2\00", align 1
  @.str.62 = private unnamed_addr constant [6 x i8] c"Bits8\00", align 1
  @.str.63 = private unnamed_addr constant [7 x i8] c"Bits16\00", align 1
  @.str.64 = private unnamed_addr constant [12 x i8] c"Float8_e5m2\00", align 1
  @.str.65 = private unnamed_addr constant [14 x i8] c"Float8_e4m3fn\00", align 1
  @.str.66 = private unnamed_addr constant [15 x i8] c"UNKNOWN_SCALAR\00", align 1
  @__PRETTY_FUNCTION__._ZNR3c108optionalINS_10ScalarTypeEEdeEv = private unnamed_addr constant [71 x i8] c"T &c10::optional<c10::ScalarType>::operator*() & [T = c10::ScalarType]\00", align 1
  @__PRETTY_FUNCTION__._ZNR3c108optionalINS_12MemoryFormatEEdeEv = private unnamed_addr constant [75 x i8] c"T &c10::optional<c10::MemoryFormat>::operator*() & [T = c10::MemoryFormat]\00", align 1
  @__func__._ZNK3c1010TensorImpl19symbolic_shape_metaEv = private unnamed_addr constant [20 x i8] c"symbolic_shape_meta\00", align 1
  @.str.67 = private unnamed_addr constant [166 x i8] c"extra_meta_ && extra_meta_->symbolic_shape_meta_ INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/TensorImpl.h\22:1707, please report a bug to PyTorch. \00", align 1
  @__func__._ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE = private unnamed_addr constant [29 x i8] c"get_channels_last_strides_2d\00", align 1
  @.str.68 = private unnamed_addr constant [52 x i8] c"/u9/z277zhu/granLte/pytorch/c10/core/MemoryFormat.h\00", align 1
  @.str.69 = private unnamed_addr constant [123 x i8] c"false INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/MemoryFormat.h\22:81, please report a bug to PyTorch. \00", align 1
  @.str.70 = private unnamed_addr constant [37 x i8] c"ChannelsLast2d doesn't support size \00", align 1
  @.str.71 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
  @__func__._ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE = private unnamed_addr constant [29 x i8] c"get_channels_last_strides_3d\00", align 1
  @.str.72 = private unnamed_addr constant [124 x i8] c"false INTERNAL ASSERT FAILED at \22/u9/z277zhu/granLte/pytorch/c10/core/MemoryFormat.h\22:108, please report a bug to PyTorch. \00", align 1
  @.str.73 = private unnamed_addr constant [37 x i8] c"ChannelsLast3d doesn't support size \00", align 1
  @__func__._ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc = private unnamed_addr constant [33 x i8] c"adaptive_pool_empty_output_check\00", align 1
  @.str.74 = private unnamed_addr constant [67 x i8] c"/u9/z277zhu/granLte/pytorch/aten/src/ATen/native/AdaptivePooling.h\00", align 1
  @.str.75 = private unnamed_addr constant [158 x i8] c"Expected gradOutput_.size(i) > 0 to be true, but got false.  (Could this error message be improved?  If so, please report an enhancement request to PyTorch.)\00", align 1
  @.str.76 = private unnamed_addr constant [100 x i8] c"(): Expected grad_output to have non-zero size for non-batch dimensions, but grad_output has sizes \00", align 1
  @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE7DEFAULTE = external local_unnamed_addr global ptr, align 8
  @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE7DEFAULTE = external local_unnamed_addr global ptr, align 8
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr %2, i64 %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  BB_0:
    call void asm sideeffect "# LLVM BB: BB_0", ""()
    %4 = alloca %"class.c10::ArrayRef", align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i32, align 4
    %8 = alloca %"class.std::__cxx11::basic_string", align 8
    %9 = alloca %"class.c10::ArrayRef", align 8
    %10 = alloca ptr, align 8
    %11 = alloca i32, align 4
    %12 = alloca ptr, align 8
    %13 = alloca %"struct.c10::integer_range", align 4
    %14 = alloca %"struct.c10::detail::integer_iterator", align 4
    %15 = alloca %"struct.c10::detail::integer_iterator", align 4
    %16 = alloca i32, align 4
    %17 = alloca %"class.std::__cxx11::basic_string", align 8
    %18 = alloca %"class.c10::ArrayRef", align 8
    %19 = alloca i32, align 4
    %20 = alloca i64, align 8
    %21 = alloca i64, align 8
    %22 = alloca i64, align 8
    %23 = alloca i64, align 8
    %24 = alloca %"class.c10::ArrayRef", align 8
    %25 = alloca %"class.std::initializer_list", align 8
    %26 = alloca [3 x i64], align 8
    %27 = alloca %"class.c10::ArrayRef", align 8
    %28 = alloca %"struct.c10::TensorOptions", align 2
    %29 = alloca %"class.c10::ArrayRef.44", align 8
    %30 = alloca %"class.c10::ArrayRef", align 8
    %31 = alloca %"class.std::initializer_list", align 8
    %32 = alloca [3 x i64], align 8
    %33 = alloca %"class.c10::ArrayRef", align 8
    %34 = alloca %"struct.c10::TensorOptions", align 2
    %35 = alloca %"struct.c10::TensorOptions", align 2
    %36 = alloca %"class.c10::optional.45", align 1
    %37 = alloca %"class.c10::ArrayRef.44", align 8
    %38 = alloca %"class.c10::ArrayRef", align 8
    %39 = alloca %"class.std::initializer_list", align 8
    %40 = alloca [4 x i64], align 8
    %41 = alloca %"class.c10::ArrayRef", align 8
    %42 = alloca %"struct.c10::TensorOptions", align 2
    %43 = alloca %"struct.c10::TensorOptions", align 2
    %44 = alloca %"class.c10::optional.48", align 1
    %45 = alloca i8, align 1
    %46 = alloca %"class.c10::ArrayRef.44", align 8
    %47 = alloca %"class.c10::ArrayRef", align 8
    %48 = alloca %"class.std::initializer_list", align 8
    %49 = alloca [4 x i64], align 8
    %50 = alloca %"class.c10::ArrayRef", align 8
    %51 = alloca %"struct.c10::TensorOptions", align 2
    %52 = alloca %"struct.c10::TensorOptions", align 2
    %53 = alloca %"struct.c10::TensorOptions", align 2
    %54 = alloca %"class.c10::optional.48", align 1
    %55 = alloca i8, align 1
    %56 = alloca %"class.c10::optional.45", align 1
    %57 = alloca %"class.c10::ArrayRef.44", align 8
    %58 = bitcast ptr %4 to ptr
    %59 = getelementptr inbounds { ptr, i64 }, ptr %58, i32 0, i32 0
    store ptr %2, ptr %59, align 8
    %60 = getelementptr inbounds { ptr, i64 }, ptr %58, i32 0, i32 1
    store i64 %3, ptr %60, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    %61 = load ptr, ptr %5, align 8
    %62 = load ptr, ptr %6, align 8
    %63 = bitcast ptr %62 to ptr
    %64 = call noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %63)
    %65 = trunc i64 %64 to i32
    store i32 %65, ptr %7, align 4
    %66 = load i32, ptr %7, align 4
    %67 = icmp eq i32 %66, 3
    br i1 %67, label %BB_2, label %BB_1
  
  BB_1:                                             ; preds = %BB_0
    call void asm sideeffect "# LLVM BB: BB_1", ""()
    %68 = load i32, ptr %7, align 4
    %69 = icmp eq i32 %68, 4
    br label %BB_2
  
  BB_2:                                             ; preds = %BB_1, %BB_0
    %70 = phi i1 [ true, %BB_0 ], [ %69, %BB_1 ]
    call void asm sideeffect "# LLVM BB: BB_2", ""()
    %71 = xor i1 %70, true
    br i1 %71, label %BB_3, label %BB_6
  
  BB_3:                                             ; preds = %BB_2
    call void asm sideeffect "# LLVM BB: BB_3", ""()
    %72 = load ptr, ptr %6, align 8
    %73 = bitcast ptr %72 to ptr
    %74 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %73)
    %75 = bitcast ptr %9 to ptr
    %76 = getelementptr inbounds { ptr, i64 }, ptr %75, i32 0, i32 0
    %77 = extractvalue { ptr, i64 } %74, 0
    store ptr %77, ptr %76, align 8
    %78 = getelementptr inbounds { ptr, i64 }, ptr %75, i32 0, i32 1
    %79 = extractvalue { ptr, i64 } %74, 1
    store i64 %79, ptr %78, align 8
    call void @_ZN3c106detail17torchCheckMsgImplIJA59_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %8, ptr noundef @.str.1, ptr noundef nonnull align 1 dereferenceable(59) @.str.2, ptr noundef nonnull align 8 dereferenceable(16) %9)
    invoke void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE, ptr noundef @.str, i32 noundef 20, ptr noundef nonnull align 8 dereferenceable(32) %8) #14
            to label %BB_4 unwind label %BB_5
  
  BB_4:                                             ; preds = %BB_3
    call void asm sideeffect "# LLVM BB: BB_4", ""()
    unreachable
  
  BB_5:                                             ; preds = %BB_3
    %80 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_5", ""()
    %81 = extractvalue { ptr, i32 } %80, 0
    store ptr %81, ptr %10, align 8
    %82 = extractvalue { ptr, i32 } %80, 1
    store i32 %82, ptr %11, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %8) #15
    br label %BB_22
  
  BB_6:                                             ; preds = %BB_2
    call void asm sideeffect "# LLVM BB: BB_6", ""()
    %83 = load i32, ptr %7, align 4
    %84 = call i64 @_ZN3c106irangeIiiLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_(i32 noundef 1, i32 noundef %83)
    %85 = bitcast ptr %13 to ptr
    store i64 %84, ptr %85, align 4
    store ptr %13, ptr %12, align 8
    %86 = load ptr, ptr %12, align 8
    %87 = call i32 @_ZNK3c1013integer_rangeIiLb0ELb1EE5beginEv(ptr noundef nonnull align 4 dereferenceable(8) %86)
    %88 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %14, i32 0, i32 0
    store i32 %87, ptr %88, align 4
    %89 = load ptr, ptr %12, align 8
    %90 = call i32 @_ZNK3c1013integer_rangeIiLb0ELb1EE3endEv(ptr noundef nonnull align 4 dereferenceable(8) %89)
    %91 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %15, i32 0, i32 0
    store i32 %90, ptr %91, align 4
    br label %BB_7
  
  BB_7:                                             ; preds = %BB_13, %BB_6
    call void asm sideeffect "# LLVM BB: BB_7", ""()
    %92 = call noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEneERKS2_(ptr noundef nonnull align 4 dereferenceable(4) %14, ptr noundef nonnull align 4 dereferenceable(4) %15)
    br i1 %92, label %BB_8, label %BB_14
  
  BB_8:                                             ; preds = %BB_7
    call void asm sideeffect "# LLVM BB: BB_8", ""()
    %93 = call noundef i32 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEdeEv(ptr noundef nonnull align 4 dereferenceable(4) %14)
    store i32 %93, ptr %16, align 4
    %94 = load ptr, ptr %6, align 8
    %95 = bitcast ptr %94 to ptr
    %96 = load i32, ptr %16, align 4
    %97 = sext i32 %96 to i64
    %98 = call noundef i64 @_ZNK2at10TensorBase4sizeEl(ptr noundef nonnull align 8 dereferenceable(8) %95, i64 noundef %97)
    %99 = icmp sgt i64 %98, 0
    %100 = xor i1 %99, true
    br i1 %100, label %BB_9, label %BB_12
  
  BB_9:                                             ; preds = %BB_8
    call void asm sideeffect "# LLVM BB: BB_9", ""()
    %101 = load ptr, ptr %6, align 8
    %102 = bitcast ptr %101 to ptr
    %103 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %102)
    %104 = bitcast ptr %18 to ptr
    %105 = getelementptr inbounds { ptr, i64 }, ptr %104, i32 0, i32 0
    %106 = extractvalue { ptr, i64 } %103, 0
    store ptr %106, ptr %105, align 8
    %107 = getelementptr inbounds { ptr, i64 }, ptr %104, i32 0, i32 1
    %108 = extractvalue { ptr, i64 } %103, 1
    store i64 %108, ptr %107, align 8
    call void @_ZN3c106detail17torchCheckMsgImplIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcPKcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %17, ptr noundef @.str.3, ptr noundef nonnull align 1 dereferenceable(107) @.str.4, ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 1 dereferenceable(17) @.str.5, ptr noundef nonnull align 4 dereferenceable(4) %16, ptr noundef nonnull align 1 dereferenceable(13) @.str.6)
    invoke void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE, ptr noundef @.str, i32 noundef 25, ptr noundef nonnull align 8 dereferenceable(32) %17) #14
            to label %BB_10 unwind label %BB_11
  
  BB_10:                                            ; preds = %BB_9
    call void asm sideeffect "# LLVM BB: BB_10", ""()
    unreachable
  
  BB_11:                                            ; preds = %BB_9
    %109 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_11", ""()
    %110 = extractvalue { ptr, i32 } %109, 0
    store ptr %110, ptr %10, align 8
    %111 = extractvalue { ptr, i32 } %109, 1
    store i32 %111, ptr %11, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %17) #15
    br label %BB_22
  
  BB_12:                                            ; preds = %BB_8
    call void asm sideeffect "# LLVM BB: BB_12", ""()
    br label %BB_13
  
  BB_13:                                            ; preds = %BB_12
    call void asm sideeffect "# LLVM BB: BB_13", ""()
    %112 = call noundef nonnull align 4 dereferenceable(4) ptr @_ZN3c106detail16integer_iteratorIiLb0ELi0EEppEv(ptr noundef nonnull align 4 dereferenceable(4) %14)
    br label %BB_7
  
  BB_14:                                            ; preds = %BB_7
    call void asm sideeffect "# LLVM BB: BB_14", ""()
    %113 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    %114 = icmp eq i64 %113, 2
    %115 = xor i1 %114, true
    br i1 %115, label %BB_15, label %BB_16
  
  BB_15:                                            ; preds = %BB_14
    call void asm sideeffect "# LLVM BB: BB_15", ""()
    %116 = call noundef ptr @_ZN3c106detail17torchCheckMsgImplEPKcS2_(ptr noundef @.str.7, ptr noundef @.str.8)
    call void @_ZN3c106detail14torchCheckFailEPKcS2_jS2_(ptr noundef @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE, ptr noundef @.str, i32 noundef 29, ptr noundef %116) #14
    unreachable
  
  BB_16:                                            ; preds = %BB_14
    call void asm sideeffect "# LLVM BB: BB_16", ""()
    store i32 1, ptr %19, align 4
    store i64 1, ptr %20, align 8
    store i64 0, ptr %21, align 8
    %117 = load ptr, ptr %6, align 8
    %118 = bitcast ptr %117 to ptr
    %119 = call noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %118)
    %120 = icmp eq i64 %119, 4
    br i1 %120, label %BB_17, label %BB_18
  
  BB_17:                                            ; preds = %BB_16
    call void asm sideeffect "# LLVM BB: BB_17", ""()
    %121 = load ptr, ptr %6, align 8
    %122 = bitcast ptr %121 to ptr
    %123 = call noundef i64 @_ZNK2at10TensorBase4sizeEl(ptr noundef nonnull align 8 dereferenceable(8) %122, i64 noundef 0)
    store i64 %123, ptr %20, align 8
    %124 = load i32, ptr %19, align 4
    %125 = add nsw i32 %124, 1
    store i32 %125, ptr %19, align 4
    br label %BB_18
  
  BB_18:                                            ; preds = %BB_17, %BB_16
    call void asm sideeffect "# LLVM BB: BB_18", ""()
    %126 = load ptr, ptr %6, align 8
    %127 = bitcast ptr %126 to ptr
    %128 = load i32, ptr %19, align 4
    %129 = sub nsw i32 %128, 1
    %130 = sext i32 %129 to i64
    %131 = call noundef i64 @_ZNK2at10TensorBase4sizeEl(ptr noundef nonnull align 8 dereferenceable(8) %127, i64 noundef %130)
    store i64 %131, ptr %21, align 8
    %132 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 0)
    %133 = load i64, ptr %132, align 8
    store i64 %133, ptr %22, align 8
    %134 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 1)
    %135 = load i64, ptr %134, align 8
    store i64 %135, ptr %23, align 8
    %136 = load ptr, ptr %6, align 8
    %137 = bitcast ptr %136 to ptr
    %138 = call noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %137)
    %139 = icmp eq i64 %138, 3
    br i1 %139, label %BB_19, label %BB_20
  
  BB_19:                                            ; preds = %BB_18
    call void asm sideeffect "# LLVM BB: BB_19", ""()
    %140 = bitcast ptr %61 to ptr
    %141 = getelementptr inbounds [3 x i64], ptr %26, i64 0, i64 0
    %142 = load i64, ptr %21, align 8
    store i64 %142, ptr %141, align 8
    %143 = getelementptr inbounds i64, ptr %141, i64 1
    %144 = load i64, ptr %22, align 8
    store i64 %144, ptr %143, align 8
    %145 = getelementptr inbounds i64, ptr %143, i64 1
    %146 = load i64, ptr %23, align 8
    store i64 %146, ptr %145, align 8
    %147 = getelementptr inbounds %"class.std::initializer_list", ptr %25, i32 0, i32 0
    %148 = getelementptr inbounds [3 x i64], ptr %26, i64 0, i64 0
    store ptr %148, ptr %147, align 8
    %149 = getelementptr inbounds %"class.std::initializer_list", ptr %25, i32 0, i32 1
    store i64 3, ptr %149, align 8
    call void @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE(ptr noundef nonnull align 8 dereferenceable(16) %24, ptr noundef nonnull align 8 dereferenceable(16) %25)
    call void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %27)
    %150 = load ptr, ptr %6, align 8
    %151 = bitcast ptr %150 to ptr
    %152 = call i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %151)
    %153 = bitcast ptr %28 to ptr
    store i64 %152, ptr %153, align 2
    call void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %29)
    %154 = bitcast ptr %24 to ptr
    %155 = getelementptr inbounds { ptr, i64 }, ptr %154, i32 0, i32 0
    %156 = load ptr, ptr %155, align 8
    %157 = getelementptr inbounds { ptr, i64 }, ptr %154, i32 0, i32 1
    %158 = load i64, ptr %157, align 8
    %159 = bitcast ptr %27 to ptr
    %160 = getelementptr inbounds { ptr, i64 }, ptr %159, i32 0, i32 0
    %161 = load ptr, ptr %160, align 8
    %162 = getelementptr inbounds { ptr, i64 }, ptr %159, i32 0, i32 1
    %163 = load i64, ptr %162, align 8
    %164 = bitcast ptr %28 to ptr
    %165 = load i64, ptr %164, align 2
    %166 = bitcast ptr %140 to ptr
    %167 = load ptr, ptr %166, align 8
    %168 = getelementptr inbounds ptr, ptr %167, i64 2
    %169 = load ptr, ptr %168, align 8
    call void %169(ptr noundef nonnull align 8 dereferenceable(8) %140, i64 noundef 0, ptr %156, i64 %158, ptr %161, i64 %163, i64 %165, ptr noundef byval(%"class.c10::ArrayRef.44") align 8 %29)
    %170 = bitcast ptr %61 to ptr
    %171 = getelementptr inbounds [3 x i64], ptr %32, i64 0, i64 0
    %172 = load i64, ptr %21, align 8
    store i64 %172, ptr %171, align 8
    %173 = getelementptr inbounds i64, ptr %171, i64 1
    %174 = load i64, ptr %22, align 8
    store i64 %174, ptr %173, align 8
    %175 = getelementptr inbounds i64, ptr %173, i64 1
    %176 = load i64, ptr %23, align 8
    store i64 %176, ptr %175, align 8
    %177 = getelementptr inbounds %"class.std::initializer_list", ptr %31, i32 0, i32 0
    %178 = getelementptr inbounds [3 x i64], ptr %32, i64 0, i64 0
    store ptr %178, ptr %177, align 8
    %179 = getelementptr inbounds %"class.std::initializer_list", ptr %31, i32 0, i32 1
    store i64 3, ptr %179, align 8
    call void @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE(ptr noundef nonnull align 8 dereferenceable(16) %30, ptr noundef nonnull align 8 dereferenceable(16) %31)
    call void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %33)
    %180 = load ptr, ptr %6, align 8
    %181 = bitcast ptr %180 to ptr
    %182 = call i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %181)
    %183 = bitcast ptr %35 to ptr
    store i64 %182, ptr %183, align 2
    call void @_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %36, ptr noundef nonnull align 1 dereferenceable(1) @_ZN3c10L5kLongE)
    %184 = getelementptr inbounds %"class.c10::optional.45", ptr %36, i32 0, i32 0
    %185 = bitcast ptr %184 to ptr
    %186 = load i16, ptr %185, align 1
    %187 = call i64 @_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE(ptr noundef nonnull align 2 dereferenceable(7) %35, i16 %186) #15
    %188 = bitcast ptr %34 to ptr
    store i64 %187, ptr %188, align 2
    call void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %37)
    %189 = bitcast ptr %30 to ptr
    %190 = getelementptr inbounds { ptr, i64 }, ptr %189, i32 0, i32 0
    %191 = load ptr, ptr %190, align 8
    %192 = getelementptr inbounds { ptr, i64 }, ptr %189, i32 0, i32 1
    %193 = load i64, ptr %192, align 8
    %194 = bitcast ptr %33 to ptr
    %195 = getelementptr inbounds { ptr, i64 }, ptr %194, i32 0, i32 0
    %196 = load ptr, ptr %195, align 8
    %197 = getelementptr inbounds { ptr, i64 }, ptr %194, i32 0, i32 1
    %198 = load i64, ptr %197, align 8
    %199 = bitcast ptr %34 to ptr
    %200 = load i64, ptr %199, align 2
    %201 = bitcast ptr %170 to ptr
    %202 = load ptr, ptr %201, align 8
    %203 = getelementptr inbounds ptr, ptr %202, i64 2
    %204 = load ptr, ptr %203, align 8
    call void %204(ptr noundef nonnull align 8 dereferenceable(8) %170, i64 noundef 1, ptr %191, i64 %193, ptr %196, i64 %198, i64 %200, ptr noundef byval(%"class.c10::ArrayRef.44") align 8 %37)
    br label %BB_21
  
  BB_20:                                            ; preds = %BB_18
    call void asm sideeffect "# LLVM BB: BB_20", ""()
    %205 = bitcast ptr %61 to ptr
    %206 = getelementptr inbounds [4 x i64], ptr %40, i64 0, i64 0
    %207 = load i64, ptr %20, align 8
    store i64 %207, ptr %206, align 8
    %208 = getelementptr inbounds i64, ptr %206, i64 1
    %209 = load i64, ptr %21, align 8
    store i64 %209, ptr %208, align 8
    %210 = getelementptr inbounds i64, ptr %208, i64 1
    %211 = load i64, ptr %22, align 8
    store i64 %211, ptr %210, align 8
    %212 = getelementptr inbounds i64, ptr %210, i64 1
    %213 = load i64, ptr %23, align 8
    store i64 %213, ptr %212, align 8
    %214 = getelementptr inbounds %"class.std::initializer_list", ptr %39, i32 0, i32 0
    %215 = getelementptr inbounds [4 x i64], ptr %40, i64 0, i64 0
    store ptr %215, ptr %214, align 8
    %216 = getelementptr inbounds %"class.std::initializer_list", ptr %39, i32 0, i32 1
    store i64 4, ptr %216, align 8
    call void @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE(ptr noundef nonnull align 8 dereferenceable(16) %38, ptr noundef nonnull align 8 dereferenceable(16) %39)
    call void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %41)
    %217 = load ptr, ptr %6, align 8
    %218 = bitcast ptr %217 to ptr
    %219 = call i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %218)
    %220 = bitcast ptr %43 to ptr
    store i64 %219, ptr %220, align 2
    %221 = load ptr, ptr %6, align 8
    %222 = bitcast ptr %221 to ptr
    %223 = call noundef signext i8 @_ZNK2at10TensorBase21suggest_memory_formatEb(ptr noundef nonnull align 8 dereferenceable(8) %222, i1 noundef zeroext false)
    store i8 %223, ptr %45, align 1
    call void @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %44, ptr noundef nonnull align 1 dereferenceable(1) %45)
    %224 = getelementptr inbounds %"class.c10::optional.48", ptr %44, i32 0, i32 0
    %225 = bitcast ptr %224 to ptr
    %226 = load i16, ptr %225, align 1
    %227 = call i64 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %43, i16 %226) #15
    %228 = bitcast ptr %42 to ptr
    store i64 %227, ptr %228, align 2
    call void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %46)
    %229 = bitcast ptr %38 to ptr
    %230 = getelementptr inbounds { ptr, i64 }, ptr %229, i32 0, i32 0
    %231 = load ptr, ptr %230, align 8
    %232 = getelementptr inbounds { ptr, i64 }, ptr %229, i32 0, i32 1
    %233 = load i64, ptr %232, align 8
    %234 = bitcast ptr %41 to ptr
    %235 = getelementptr inbounds { ptr, i64 }, ptr %234, i32 0, i32 0
    %236 = load ptr, ptr %235, align 8
    %237 = getelementptr inbounds { ptr, i64 }, ptr %234, i32 0, i32 1
    %238 = load i64, ptr %237, align 8
    %239 = bitcast ptr %42 to ptr
    %240 = load i64, ptr %239, align 2
    %241 = bitcast ptr %205 to ptr
    %242 = load ptr, ptr %241, align 8
    %243 = getelementptr inbounds ptr, ptr %242, i64 2
    %244 = load ptr, ptr %243, align 8
    call void %244(ptr noundef nonnull align 8 dereferenceable(8) %205, i64 noundef 0, ptr %231, i64 %233, ptr %236, i64 %238, i64 %240, ptr noundef byval(%"class.c10::ArrayRef.44") align 8 %46)
    %245 = bitcast ptr %61 to ptr
    %246 = getelementptr inbounds [4 x i64], ptr %49, i64 0, i64 0
    %247 = load i64, ptr %20, align 8
    store i64 %247, ptr %246, align 8
    %248 = getelementptr inbounds i64, ptr %246, i64 1
    %249 = load i64, ptr %21, align 8
    store i64 %249, ptr %248, align 8
    %250 = getelementptr inbounds i64, ptr %248, i64 1
    %251 = load i64, ptr %22, align 8
    store i64 %251, ptr %250, align 8
    %252 = getelementptr inbounds i64, ptr %250, i64 1
    %253 = load i64, ptr %23, align 8
    store i64 %253, ptr %252, align 8
    %254 = getelementptr inbounds %"class.std::initializer_list", ptr %48, i32 0, i32 0
    %255 = getelementptr inbounds [4 x i64], ptr %49, i64 0, i64 0
    store ptr %255, ptr %254, align 8
    %256 = getelementptr inbounds %"class.std::initializer_list", ptr %48, i32 0, i32 1
    store i64 4, ptr %256, align 8
    call void @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE(ptr noundef nonnull align 8 dereferenceable(16) %47, ptr noundef nonnull align 8 dereferenceable(16) %48)
    call void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %50)
    %257 = load ptr, ptr %6, align 8
    %258 = bitcast ptr %257 to ptr
    %259 = call i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %258)
    %260 = bitcast ptr %53 to ptr
    store i64 %259, ptr %260, align 2
    %261 = load ptr, ptr %6, align 8
    %262 = bitcast ptr %261 to ptr
    %263 = call noundef signext i8 @_ZNK2at10TensorBase21suggest_memory_formatEb(ptr noundef nonnull align 8 dereferenceable(8) %262, i1 noundef zeroext false)
    store i8 %263, ptr %55, align 1
    call void @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %54, ptr noundef nonnull align 1 dereferenceable(1) %55)
    %264 = getelementptr inbounds %"class.c10::optional.48", ptr %54, i32 0, i32 0
    %265 = bitcast ptr %264 to ptr
    %266 = load i16, ptr %265, align 1
    %267 = call i64 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %53, i16 %266) #15
    %268 = bitcast ptr %52 to ptr
    store i64 %267, ptr %268, align 2
    call void @_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %56, ptr noundef nonnull align 1 dereferenceable(1) @_ZN3c10L5kLongE)
    %269 = getelementptr inbounds %"class.c10::optional.45", ptr %56, i32 0, i32 0
    %270 = bitcast ptr %269 to ptr
    %271 = load i16, ptr %270, align 1
    %272 = call i64 @_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE(ptr noundef nonnull align 2 dereferenceable(7) %52, i16 %271) #15
    %273 = bitcast ptr %51 to ptr
    store i64 %272, ptr %273, align 2
    call void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %57)
    %274 = bitcast ptr %47 to ptr
    %275 = getelementptr inbounds { ptr, i64 }, ptr %274, i32 0, i32 0
    %276 = load ptr, ptr %275, align 8
    %277 = getelementptr inbounds { ptr, i64 }, ptr %274, i32 0, i32 1
    %278 = load i64, ptr %277, align 8
    %279 = bitcast ptr %50 to ptr
    %280 = getelementptr inbounds { ptr, i64 }, ptr %279, i32 0, i32 0
    %281 = load ptr, ptr %280, align 8
    %282 = getelementptr inbounds { ptr, i64 }, ptr %279, i32 0, i32 1
    %283 = load i64, ptr %282, align 8
    %284 = bitcast ptr %51 to ptr
    %285 = load i64, ptr %284, align 2
    %286 = bitcast ptr %245 to ptr
    %287 = load ptr, ptr %286, align 8
    %288 = getelementptr inbounds ptr, ptr %287, i64 2
    %289 = load ptr, ptr %288, align 8
    call void %289(ptr noundef nonnull align 8 dereferenceable(8) %245, i64 noundef 1, ptr %276, i64 %278, ptr %281, i64 %283, i64 %285, ptr noundef byval(%"class.c10::ArrayRef.44") align 8 %57)
    br label %BB_21
  
  BB_21:                                            ; preds = %BB_20, %BB_19
    call void asm sideeffect "# LLVM BB: BB_21", ""()
    ret void
  
  BB_22:                                            ; preds = %BB_11, %BB_5
    call void asm sideeffect "# LLVM BB: BB_22", ""()
    %290 = load ptr, ptr %10, align 8
    call void @_Unwind_Resume(ptr %290) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_23:
    call void asm sideeffect "# LLVM BB: BB_23", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef i64 @_ZNK2at10TensorBase3dimEv(ptr noundef nonnull align 8 dereferenceable(8) %2)
    ret i64 %3
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef, ptr noundef, i32 noundef, ptr noundef nonnull align 8 dereferenceable(32)) local_unnamed_addr #1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail17torchCheckMsgImplIJA59_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef %1, ptr noundef nonnull align 1 dereferenceable(59) %2, ptr noundef nonnull align 8 dereferenceable(16) %3) local_unnamed_addr #0 comdat {
  BB_24:
    call void asm sideeffect "# LLVM BB: BB_24", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = bitcast ptr %0 to ptr
    store ptr %8, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %9 = load ptr, ptr %6, align 8
    %10 = load ptr, ptr %7, align 8
    call void @_ZN3c103strIJA59_cNS_8ArrayRefIlEEEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(59) %9, ptr noundef nonnull align 8 dereferenceable(16) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_25:
    call void asm sideeffect "# LLVM BB: BB_25", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"class.at::TensorBase", ptr %3, i32 0, i32 0
    %5 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    %6 = call { ptr, i64 } @_ZNK3c1010TensorImpl5sizesEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %7 = bitcast ptr %1 to ptr
    %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 0
    %9 = extractvalue { ptr, i64 } %6, 0
    store ptr %9, ptr %8, align 8
    %10 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 1
    %11 = extractvalue { ptr, i64 } %6, 1
    store i64 %11, ptr %10, align 8
    %12 = bitcast ptr %1 to ptr
    %13 = load { ptr, i64 }, ptr %12, align 8
    ret { ptr, i64 } %13
  }
  
  declare i32 @__gxx_personality_v0(...)
  
  ; Function Attrs: nounwind
  declare void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32)) unnamed_addr #2
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i64 @_ZN3c106irangeIiiLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_(i32 noundef %0, i32 noundef %1) local_unnamed_addr #0 comdat {
  BB_26:
    call void asm sideeffect "# LLVM BB: BB_26", ""()
    %2 = alloca %"struct.c10::integer_range", align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    store i32 %0, ptr %3, align 4
    store i32 %1, ptr %4, align 4
    %6 = load i32, ptr %3, align 4
    %7 = load i32, ptr %3, align 4
    store i32 %7, ptr %5, align 4
    %8 = call noundef nonnull align 4 dereferenceable(4) ptr @_ZSt3maxIiERKT_S2_S2_(ptr noundef nonnull align 4 dereferenceable(4) %5, ptr noundef nonnull align 4 dereferenceable(4) %4)
    %9 = load i32, ptr %8, align 4
    call void @_ZN3c1013integer_rangeIiLb0ELb1EEC2Eii(ptr noundef nonnull align 4 dereferenceable(8) %2, i32 noundef %6, i32 noundef %9)
    %10 = bitcast ptr %2 to ptr
    %11 = load i64, ptr %10, align 4
    ret i64 %11
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i32 @_ZNK3c1013integer_rangeIiLb0ELb1EE5beginEv(ptr noundef nonnull align 4 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_27:
    call void asm sideeffect "# LLVM BB: BB_27", ""()
    %1 = alloca %"struct.c10::detail::integer_iterator", align 4
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::integer_range", ptr %3, i32 0, i32 0
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
    %7 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %1, i32 0, i32 0
    %8 = load i32, ptr %7, align 4
    ret i32 %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i32 @_ZNK3c1013integer_rangeIiLb0ELb1EE3endEv(ptr noundef nonnull align 4 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_28:
    call void asm sideeffect "# LLVM BB: BB_28", ""()
    %1 = alloca %"struct.c10::detail::integer_iterator", align 4
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::integer_range", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 4 %5, ptr align 4 %6, i64 4, i1 false)
    %7 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %1, i32 0, i32 0
    %8 = load i32, ptr %7, align 4
    ret i32 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEneERKS2_(ptr noundef nonnull align 4 dereferenceable(4) %0, ptr noundef nonnull align 4 dereferenceable(4) %1) local_unnamed_addr #0 comdat align 2 {
  BB_29:
    call void asm sideeffect "# LLVM BB: BB_29", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = call noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEeqERKS2_(ptr noundef nonnull align 4 dereferenceable(4) %4, ptr noundef nonnull align 4 dereferenceable(4) %5)
    %7 = xor i1 %6, true
    ret i1 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i32 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEdeEv(ptr noundef nonnull align 4 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_30:
    call void asm sideeffect "# LLVM BB: BB_30", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %2, i32 0, i32 0
    %4 = load i32, ptr %3, align 4
    ret i32 %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK2at10TensorBase4sizeEl(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_31:
    call void asm sideeffect "# LLVM BB: BB_31", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.at::TensorBase", ptr %4, i32 0, i32 0
    %6 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %5) #15
    %7 = load i64, ptr %3, align 8
    %8 = call noundef i64 @_ZNK3c1010TensorImpl4sizeEl(ptr noundef nonnull align 8 dereferenceable(192) %6, i64 noundef %7)
    ret i64 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail17torchCheckMsgImplIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcPKcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef %1, ptr noundef nonnull align 1 dereferenceable(107) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 1 dereferenceable(17) %4, ptr noundef nonnull align 4 dereferenceable(4) %5, ptr noundef nonnull align 1 dereferenceable(13) %6) local_unnamed_addr #0 comdat {
  BB_32:
    call void asm sideeffect "# LLVM BB: BB_32", ""()
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    %14 = bitcast ptr %0 to ptr
    store ptr %14, ptr %7, align 8
    store ptr %1, ptr %8, align 8
    store ptr %2, ptr %9, align 8
    store ptr %3, ptr %10, align 8
    store ptr %4, ptr %11, align 8
    store ptr %5, ptr %12, align 8
    store ptr %6, ptr %13, align 8
    %15 = load ptr, ptr %9, align 8
    %16 = load ptr, ptr %10, align 8
    %17 = load ptr, ptr %11, align 8
    %18 = load ptr, ptr %12, align 8
    %19 = load ptr, ptr %13, align 8
    call void @_ZN3c103strIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(107) %15, ptr noundef nonnull align 8 dereferenceable(16) %16, ptr noundef nonnull align 1 dereferenceable(17) %17, ptr noundef nonnull align 4 dereferenceable(4) %18, ptr noundef nonnull align 1 dereferenceable(13) %19)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 4 dereferenceable(4) ptr @_ZN3c106detail16integer_iteratorIiLb0ELi0EEppEv(ptr noundef nonnull align 4 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_33:
    call void asm sideeffect "# LLVM BB: BB_33", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %2, i32 0, i32 0
    %4 = load i32, ptr %3, align 4
    %5 = add nsw i32 %4, 1
    store i32 %5, ptr %3, align 4
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_34:
    call void asm sideeffect "# LLVM BB: BB_34", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 1
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN3c106detail14torchCheckFailEPKcS2_jS2_(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c106detail17torchCheckMsgImplEPKcS2_(ptr noundef %0, ptr noundef %1) local_unnamed_addr #3 comdat {
  BB_35:
    call void asm sideeffect "# LLVM BB: BB_35", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %0, i64 noundef %1) local_unnamed_addr #3 comdat align 2 {
  BB_36:
    call void asm sideeffect "# LLVM BB: BB_36", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.c10::ArrayRef", ptr %4, i32 0, i32 0
    %6 = load ptr, ptr %5, align 8
    %7 = load i64, ptr %3, align 8
    %8 = getelementptr inbounds i64, ptr %6, i64 %7
    ret ptr %8
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(16) %1) unnamed_addr #4 comdat align 2 {
  BB_37:
    call void asm sideeffect "# LLVM BB: BB_37", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca %"class.std::initializer_list", align 8
    %5 = alloca %"class.std::initializer_list", align 8
    %6 = alloca %"class.std::initializer_list", align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %7 = load ptr, ptr %2, align 8
    %8 = getelementptr inbounds %"class.c10::ArrayRef", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %3, align 8
    %10 = bitcast ptr %4 to ptr
    %11 = bitcast ptr %9 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %11, i64 16, i1 false)
    %12 = bitcast ptr %4 to ptr
    %13 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 0
    %14 = load ptr, ptr %13, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 1
    %16 = load i64, ptr %15, align 8
    %17 = call noundef ptr @_ZSt5beginIlEPKT_St16initializer_listIS0_E(ptr %14, i64 %16) #15
    %18 = load ptr, ptr %3, align 8
    %19 = bitcast ptr %5 to ptr
    %20 = bitcast ptr %18 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %19, ptr align 8 %20, i64 16, i1 false)
    %21 = bitcast ptr %5 to ptr
    %22 = getelementptr inbounds { ptr, i64 }, ptr %21, i32 0, i32 0
    %23 = load ptr, ptr %22, align 8
    %24 = getelementptr inbounds { ptr, i64 }, ptr %21, i32 0, i32 1
    %25 = load i64, ptr %24, align 8
    %26 = call noundef ptr @_ZSt3endIlEPKT_St16initializer_listIS0_E(ptr %23, i64 %25) #15
    %27 = icmp eq ptr %17, %26
    br i1 %27, label %BB_38, label %BB_39
  
  BB_38:                                            ; preds = %BB_37
    call void asm sideeffect "# LLVM BB: BB_38", ""()
    br label %BB_40
  
  BB_39:                                            ; preds = %BB_37
    call void asm sideeffect "# LLVM BB: BB_39", ""()
    %28 = load ptr, ptr %3, align 8
    %29 = bitcast ptr %6 to ptr
    %30 = bitcast ptr %28 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %29, ptr align 8 %30, i64 16, i1 false)
    %31 = bitcast ptr %6 to ptr
    %32 = getelementptr inbounds { ptr, i64 }, ptr %31, i32 0, i32 0
    %33 = load ptr, ptr %32, align 8
    %34 = getelementptr inbounds { ptr, i64 }, ptr %31, i32 0, i32 1
    %35 = load i64, ptr %34, align 8
    %36 = call noundef ptr @_ZSt5beginIlEPKT_St16initializer_listIS0_E(ptr %33, i64 %35) #15
    br label %BB_40
  
  BB_40:                                            ; preds = %BB_39, %BB_38
    %37 = phi ptr [ null, %BB_38 ], [ %36, %BB_39 ]
    call void asm sideeffect "# LLVM BB: BB_40", ""()
    store ptr %37, ptr %8, align 8
    %38 = getelementptr inbounds %"class.c10::ArrayRef", ptr %7, i32 0, i32 1
    %39 = load ptr, ptr %3, align 8
    %40 = call noundef i64 @_ZNKSt16initializer_listIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %39) #15
    store i64 %40, ptr %38, align 8
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %0) unnamed_addr #4 comdat align 2 {
  BB_41:
    call void asm sideeffect "# LLVM BB: BB_41", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 0
    store ptr null, ptr %3, align 8
    %4 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 1
    store i64 0, ptr %4, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_42:
    call void asm sideeffect "# LLVM BB: BB_42", ""()
    %1 = alloca %"struct.c10::TensorOptions", align 2
    %2 = alloca ptr, align 8
    %3 = alloca %"struct.c10::TensorOptions", align 2
    %4 = alloca %"struct.c10::TensorOptions", align 2
    %5 = alloca %"struct.c10::TensorOptions", align 2
    %6 = alloca %"class.c10::optional.54", align 2
    %7 = alloca %"class.caffe2::TypeMeta", align 2
    %8 = alloca %"struct.c10::Device", align 1
    %9 = alloca %"class.c10::optional.57", align 1
    %10 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    %11 = load ptr, ptr %2, align 8
    call void @_ZN3c1013TensorOptionsC2Ev(ptr noundef nonnull align 2 dereferenceable(7) %5)
    %12 = call i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %11)
    %13 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %7, i32 0, i32 0
    store i16 %12, ptr %13, align 2
    call void @_ZN3c108optionalIN6caffe28TypeMetaEEC2IS2_Lb0EEEOT_(ptr noundef nonnull align 2 dereferenceable(4) %6, ptr noundef nonnull align 2 dereferenceable(2) %7)
    %14 = getelementptr inbounds %"class.c10::optional.54", ptr %6, i32 0, i32 0
    %15 = bitcast ptr %14 to ptr
    %16 = load i32, ptr %15, align 2
    %17 = call i64 @_ZNK3c1013TensorOptions5dtypeENS_8optionalIN6caffe28TypeMetaEEE(ptr noundef nonnull align 2 dereferenceable(7) %5, i32 %16) #15
    %18 = bitcast ptr %4 to ptr
    store i64 %17, ptr %18, align 2
    %19 = call i16 @_ZNK2at10TensorBase6deviceEv(ptr noundef nonnull align 8 dereferenceable(8) %11)
    %20 = bitcast ptr %8 to ptr
    store i16 %19, ptr %20, align 1
    %21 = call i64 @_ZNK3c1013TensorOptions6deviceIJNS_6DeviceEEEES0_DpOT_(ptr noundef nonnull align 2 dereferenceable(7) %4, ptr noundef nonnull align 1 dereferenceable(2) %8) #15
    %22 = bitcast ptr %3 to ptr
    store i64 %21, ptr %22, align 2
    %23 = call noundef signext i8 @_ZNK2at10TensorBase6layoutEv(ptr noundef nonnull align 8 dereferenceable(8) %11)
    store i8 %23, ptr %10, align 1
    call void @_ZN3c108optionalINS_6LayoutEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %9, ptr noundef nonnull align 1 dereferenceable(1) %10)
    %24 = getelementptr inbounds %"class.c10::optional.57", ptr %9, i32 0, i32 0
    %25 = bitcast ptr %24 to ptr
    %26 = load i16, ptr %25, align 1
    %27 = call i64 @_ZNK3c1013TensorOptions6layoutENS_8optionalINS_6LayoutEEE(ptr noundef nonnull align 2 dereferenceable(7) %3, i16 %26) #15
    %28 = bitcast ptr %1 to ptr
    store i64 %27, ptr %28, align 2
    %29 = bitcast ptr %1 to ptr
    %30 = load i64, ptr %29, align 2
    ret i64 %30
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %0) unnamed_addr #4 comdat align 2 {
  BB_43:
    call void asm sideeffect "# LLVM BB: BB_43", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef.44", ptr %2, i32 0, i32 0
    store ptr null, ptr %3, align 8
    %4 = getelementptr inbounds %"class.c10::ArrayRef.44", ptr %2, i32 0, i32 1
    store i64 0, ptr %4, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 {
  BB_44:
    call void asm sideeffect "# LLVM BB: BB_44", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca %"class.c10::optional.45", align 1
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::optional.45", align 1
    %6 = getelementptr inbounds %"class.c10::optional.45", ptr %3, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    store i16 %1, ptr %7, align 1
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = bitcast ptr %2 to ptr
    %10 = bitcast ptr %8 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %9, ptr align 2 %10, i64 8, i1 false)
    %11 = bitcast ptr %5 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr align 1 %12, i64 2, i1 false)
    %13 = getelementptr inbounds %"class.c10::optional.45", ptr %5, i32 0, i32 0
    %14 = bitcast ptr %13 to ptr
    %15 = load i16, ptr %14, align 1
    call void @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalINS_10ScalarTypeEEE(ptr noundef nonnull align 2 dereferenceable(7) %2, i16 %15) #15
    %16 = bitcast ptr %2 to ptr
    %17 = load i64, ptr %16, align 2
    ret i64 %17
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_45:
    call void asm sideeffect "# LLVM BB: BB_45", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIRKN3c1010ScalarTypeEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    call void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEEC2ERKS1_(ptr noundef nonnull align 1 dereferenceable(2) %5, ptr noundef nonnull align 1 dereferenceable(1) %7)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 {
  BB_46:
    call void asm sideeffect "# LLVM BB: BB_46", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca %"class.c10::optional.48", align 1
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::optional.48", align 1
    %6 = getelementptr inbounds %"class.c10::optional.48", ptr %3, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    store i16 %1, ptr %7, align 1
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = bitcast ptr %2 to ptr
    %10 = bitcast ptr %8 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %9, ptr align 2 %10, i64 8, i1 false)
    %11 = bitcast ptr %5 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr align 1 %12, i64 2, i1 false)
    %13 = getelementptr inbounds %"class.c10::optional.48", ptr %5, i32 0, i32 0
    %14 = bitcast ptr %13 to ptr
    %15 = load i16, ptr %14, align 1
    call void @_ZNR3c1013TensorOptions17set_memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %2, i16 %15) #15
    %16 = bitcast ptr %2 to ptr
    %17 = load i64, ptr %16, align 2
    ret i64 %17
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef signext i8 @_ZNK2at10TensorBase21suggest_memory_formatEb(ptr noundef nonnull align 8 dereferenceable(8) %0, i1 noundef zeroext %1) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_47:
    call void asm sideeffect "# LLVM BB: BB_47", ""()
    %2 = alloca i8, align 1
    %3 = alloca ptr, align 8
    %4 = alloca i8, align 1
    %5 = alloca %"class.std::vector", align 8
    %6 = alloca %"class.c10::ArrayRef", align 8
    %7 = alloca i1, align 1
    %8 = alloca %"class.c10::ArrayRef", align 8
    %9 = alloca ptr, align 8
    %10 = alloca i32, align 4
    %11 = alloca %"class.std::vector", align 8
    %12 = alloca %"class.c10::ArrayRef", align 8
    %13 = alloca i1, align 1
    %14 = alloca %"class.c10::ArrayRef", align 8
    store ptr %0, ptr %3, align 8
    %15 = zext i1 %1 to i8
    store i8 %15, ptr %4, align 1
    %16 = load ptr, ptr %3, align 8
    %17 = call noundef signext i8 @_ZNK2at10TensorBase6layoutEv(ptr noundef nonnull align 8 dereferenceable(8) %16)
    %18 = icmp eq i8 %17, 0
    br i1 %18, label %BB_48, label %BB_76
  
  BB_48:                                            ; preds = %BB_47
    call void asm sideeffect "# LLVM BB: BB_48", ""()
    %19 = getelementptr inbounds %"class.at::TensorBase", ptr %16, i32 0, i32 0
    %20 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %19) #15
    %21 = call noundef zeroext i1 @_ZNK3c1010TensorImpl29is_strides_like_channels_lastEv(ptr noundef nonnull align 8 dereferenceable(192) %20)
    br i1 %21, label %BB_49, label %BB_61
  
  BB_49:                                            ; preds = %BB_48
    call void asm sideeffect "# LLVM BB: BB_49", ""()
    %22 = load i8, ptr %4, align 1
    %23 = trunc i8 %22 to i1
    store i1 false, ptr %7, align 1
    br i1 %23, label %BB_50, label %BB_53
  
  BB_50:                                            ; preds = %BB_49
    call void asm sideeffect "# LLVM BB: BB_50", ""()
    %24 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %16)
    %25 = bitcast ptr %6 to ptr
    %26 = getelementptr inbounds { ptr, i64 }, ptr %25, i32 0, i32 0
    %27 = extractvalue { ptr, i64 } %24, 0
    store ptr %27, ptr %26, align 8
    %28 = getelementptr inbounds { ptr, i64 }, ptr %25, i32 0, i32 1
    %29 = extractvalue { ptr, i64 } %24, 1
    store i64 %29, ptr %28, align 8
    %30 = bitcast ptr %6 to ptr
    %31 = getelementptr inbounds { ptr, i64 }, ptr %30, i32 0, i32 0
    %32 = load ptr, ptr %31, align 8
    %33 = getelementptr inbounds { ptr, i64 }, ptr %30, i32 0, i32 1
    %34 = load i64, ptr %33, align 8
    call void @_ZN3c1028get_channels_last_strides_2dENS_8ArrayRefIlEE(ptr sret(%"class.std::vector") align 8 %5, ptr %32, i64 %34)
    store i1 true, ptr %7, align 1
    %35 = invoke { ptr, i64 } @_ZNK2at10TensorBase7stridesEv(ptr noundef nonnull align 8 dereferenceable(8) %16)
            to label %BB_51 unwind label %BB_57
  
  BB_51:                                            ; preds = %BB_50
    call void asm sideeffect "# LLVM BB: BB_51", ""()
    %36 = bitcast ptr %8 to ptr
    %37 = getelementptr inbounds { ptr, i64 }, ptr %36, i32 0, i32 0
    %38 = extractvalue { ptr, i64 } %35, 0
    store ptr %38, ptr %37, align 8
    %39 = getelementptr inbounds { ptr, i64 }, ptr %36, i32 0, i32 1
    %40 = extractvalue { ptr, i64 } %35, 1
    store i64 %40, ptr %39, align 8
    %41 = bitcast ptr %8 to ptr
    %42 = getelementptr inbounds { ptr, i64 }, ptr %41, i32 0, i32 0
    %43 = load ptr, ptr %42, align 8
    %44 = getelementptr inbounds { ptr, i64 }, ptr %41, i32 0, i32 1
    %45 = load i64, ptr %44, align 8
    %46 = invoke noundef zeroext i1 @_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr noundef nonnull align 8 dereferenceable(24) %5, ptr %43, i64 %45)
            to label %BB_52 unwind label %BB_57
  
  BB_52:                                            ; preds = %BB_51
    call void asm sideeffect "# LLVM BB: BB_52", ""()
    br label %BB_53
  
  BB_53:                                            ; preds = %BB_52, %BB_49
    %47 = phi i1 [ true, %BB_49 ], [ %46, %BB_52 ]
    call void asm sideeffect "# LLVM BB: BB_53", ""()
    %48 = load i1, ptr %7, align 1
    br i1 %48, label %BB_54, label %BB_55
  
  BB_54:                                            ; preds = %BB_53
    call void asm sideeffect "# LLVM BB: BB_54", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %5) #15
    br label %BB_55
  
  BB_55:                                            ; preds = %BB_54, %BB_53
    call void asm sideeffect "# LLVM BB: BB_55", ""()
    br i1 %47, label %BB_56, label %BB_60
  
  BB_56:                                            ; preds = %BB_55
    call void asm sideeffect "# LLVM BB: BB_56", ""()
    store i8 2, ptr %2, align 1
    br label %BB_77
  
  BB_57:                                            ; preds = %BB_51, %BB_50
    %49 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_57", ""()
    %50 = extractvalue { ptr, i32 } %49, 0
    store ptr %50, ptr %9, align 8
    %51 = extractvalue { ptr, i32 } %49, 1
    store i32 %51, ptr %10, align 4
    %52 = load i1, ptr %7, align 1
    br i1 %52, label %BB_58, label %BB_59
  
  BB_58:                                            ; preds = %BB_57
    call void asm sideeffect "# LLVM BB: BB_58", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %5) #15
    br label %BB_59
  
  BB_59:                                            ; preds = %BB_58, %BB_57
    call void asm sideeffect "# LLVM BB: BB_59", ""()
    br label %BB_78
  
  BB_60:                                            ; preds = %BB_55
    call void asm sideeffect "# LLVM BB: BB_60", ""()
    br label %BB_75
  
  BB_61:                                            ; preds = %BB_48
    call void asm sideeffect "# LLVM BB: BB_61", ""()
    %53 = getelementptr inbounds %"class.at::TensorBase", ptr %16, i32 0, i32 0
    %54 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %53) #15
    %55 = call noundef zeroext i1 @_ZNK3c1010TensorImpl32is_strides_like_channels_last_3dEv(ptr noundef nonnull align 8 dereferenceable(192) %54)
    br i1 %55, label %BB_62, label %BB_74
  
  BB_62:                                            ; preds = %BB_61
    call void asm sideeffect "# LLVM BB: BB_62", ""()
    %56 = load i8, ptr %4, align 1
    %57 = trunc i8 %56 to i1
    store i1 false, ptr %13, align 1
    br i1 %57, label %BB_63, label %BB_66
  
  BB_63:                                            ; preds = %BB_62
    call void asm sideeffect "# LLVM BB: BB_63", ""()
    %58 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %16)
    %59 = bitcast ptr %12 to ptr
    %60 = getelementptr inbounds { ptr, i64 }, ptr %59, i32 0, i32 0
    %61 = extractvalue { ptr, i64 } %58, 0
    store ptr %61, ptr %60, align 8
    %62 = getelementptr inbounds { ptr, i64 }, ptr %59, i32 0, i32 1
    %63 = extractvalue { ptr, i64 } %58, 1
    store i64 %63, ptr %62, align 8
    %64 = bitcast ptr %12 to ptr
    %65 = getelementptr inbounds { ptr, i64 }, ptr %64, i32 0, i32 0
    %66 = load ptr, ptr %65, align 8
    %67 = getelementptr inbounds { ptr, i64 }, ptr %64, i32 0, i32 1
    %68 = load i64, ptr %67, align 8
    call void @_ZN3c1028get_channels_last_strides_3dENS_8ArrayRefIlEE(ptr sret(%"class.std::vector") align 8 %11, ptr %66, i64 %68)
    store i1 true, ptr %13, align 1
    %69 = invoke { ptr, i64 } @_ZNK2at10TensorBase7stridesEv(ptr noundef nonnull align 8 dereferenceable(8) %16)
            to label %BB_64 unwind label %BB_70
  
  BB_64:                                            ; preds = %BB_63
    call void asm sideeffect "# LLVM BB: BB_64", ""()
    %70 = bitcast ptr %14 to ptr
    %71 = getelementptr inbounds { ptr, i64 }, ptr %70, i32 0, i32 0
    %72 = extractvalue { ptr, i64 } %69, 0
    store ptr %72, ptr %71, align 8
    %73 = getelementptr inbounds { ptr, i64 }, ptr %70, i32 0, i32 1
    %74 = extractvalue { ptr, i64 } %69, 1
    store i64 %74, ptr %73, align 8
    %75 = bitcast ptr %14 to ptr
    %76 = getelementptr inbounds { ptr, i64 }, ptr %75, i32 0, i32 0
    %77 = load ptr, ptr %76, align 8
    %78 = getelementptr inbounds { ptr, i64 }, ptr %75, i32 0, i32 1
    %79 = load i64, ptr %78, align 8
    %80 = invoke noundef zeroext i1 @_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr noundef nonnull align 8 dereferenceable(24) %11, ptr %77, i64 %79)
            to label %BB_65 unwind label %BB_70
  
  BB_65:                                            ; preds = %BB_64
    call void asm sideeffect "# LLVM BB: BB_65", ""()
    br label %BB_66
  
  BB_66:                                            ; preds = %BB_65, %BB_62
    %81 = phi i1 [ true, %BB_62 ], [ %80, %BB_65 ]
    call void asm sideeffect "# LLVM BB: BB_66", ""()
    %82 = load i1, ptr %13, align 1
    br i1 %82, label %BB_67, label %BB_68
  
  BB_67:                                            ; preds = %BB_66
    call void asm sideeffect "# LLVM BB: BB_67", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %11) #15
    br label %BB_68
  
  BB_68:                                            ; preds = %BB_67, %BB_66
    call void asm sideeffect "# LLVM BB: BB_68", ""()
    br i1 %81, label %BB_69, label %BB_73
  
  BB_69:                                            ; preds = %BB_68
    call void asm sideeffect "# LLVM BB: BB_69", ""()
    store i8 3, ptr %2, align 1
    br label %BB_77
  
  BB_70:                                            ; preds = %BB_64, %BB_63
    %83 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_70", ""()
    %84 = extractvalue { ptr, i32 } %83, 0
    store ptr %84, ptr %9, align 8
    %85 = extractvalue { ptr, i32 } %83, 1
    store i32 %85, ptr %10, align 4
    %86 = load i1, ptr %13, align 1
    br i1 %86, label %BB_71, label %BB_72
  
  BB_71:                                            ; preds = %BB_70
    call void asm sideeffect "# LLVM BB: BB_71", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %11) #15
    br label %BB_72
  
  BB_72:                                            ; preds = %BB_71, %BB_70
    call void asm sideeffect "# LLVM BB: BB_72", ""()
    br label %BB_78
  
  BB_73:                                            ; preds = %BB_68
    call void asm sideeffect "# LLVM BB: BB_73", ""()
    br label %BB_74
  
  BB_74:                                            ; preds = %BB_73, %BB_61
    call void asm sideeffect "# LLVM BB: BB_74", ""()
    br label %BB_75
  
  BB_75:                                            ; preds = %BB_74, %BB_60
    call void asm sideeffect "# LLVM BB: BB_75", ""()
    br label %BB_76
  
  BB_76:                                            ; preds = %BB_75, %BB_47
    call void asm sideeffect "# LLVM BB: BB_76", ""()
    store i8 0, ptr %2, align 1
    br label %BB_77
  
  BB_77:                                            ; preds = %BB_76, %BB_69, %BB_56
    call void asm sideeffect "# LLVM BB: BB_77", ""()
    %87 = load i8, ptr %2, align 1
    ret i8 %87
  
  BB_78:                                            ; preds = %BB_72, %BB_59
    call void asm sideeffect "# LLVM BB: BB_78", ""()
    %88 = load ptr, ptr %9, align 8
    call void @_Unwind_Resume(ptr %88) #14
    unreachable
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_79:
    call void asm sideeffect "# LLVM BB: BB_79", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIN3c1012MemoryFormatEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    call void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEEC2EOS1_(ptr noundef nonnull align 1 dereferenceable(2) %5, ptr noundef nonnull align 1 dereferenceable(1) %7)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at4meta39structured_adaptive_max_pool2d_backward4metaERKNS_6TensorES4_S4_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #0 align 2 personality ptr @__gxx_personality_v0 {
  BB_80:
    call void asm sideeffect "# LLVM BB: BB_80", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca i64, align 8
    %9 = alloca %"class.std::__cxx11::basic_string", align 8
    %10 = alloca %"class.c10::ArrayRef", align 8
    %11 = alloca ptr, align 8
    %12 = alloca i32, align 4
    %13 = alloca %"class.caffe2::TypeMeta", align 2
    %14 = alloca %"class.caffe2::TypeMeta", align 2
    %15 = alloca %"class.std::__cxx11::basic_string", align 8
    %16 = alloca %"class.caffe2::TypeMeta", align 2
    %17 = alloca %"class.caffe2::TypeMeta", align 2
    %18 = alloca %"class.c10::ArrayRef", align 8
    %19 = alloca %"class.c10::ArrayRef", align 8
    %20 = alloca %"struct.c10::TensorOptions", align 2
    %21 = alloca %"struct.c10::TensorOptions", align 2
    %22 = alloca %"class.c10::optional.48", align 1
    %23 = alloca i8, align 1
    %24 = alloca %"class.c10::ArrayRef.44", align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %25 = load ptr, ptr %4, align 8
    %26 = load ptr, ptr %5, align 8
    %27 = bitcast ptr %26 to ptr
    %28 = call noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %27)
    store i64 %28, ptr %8, align 8
    %29 = load i64, ptr %8, align 8
    %30 = icmp eq i64 %29, 3
    br i1 %30, label %BB_82, label %BB_81
  
  BB_81:                                            ; preds = %BB_80
    call void asm sideeffect "# LLVM BB: BB_81", ""()
    %31 = load i64, ptr %8, align 8
    %32 = icmp eq i64 %31, 4
    br label %BB_82
  
  BB_82:                                            ; preds = %BB_81, %BB_80
    %33 = phi i1 [ true, %BB_80 ], [ %32, %BB_81 ]
    call void asm sideeffect "# LLVM BB: BB_82", ""()
    %34 = xor i1 %33, true
    br i1 %34, label %BB_83, label %BB_86
  
  BB_83:                                            ; preds = %BB_82
    call void asm sideeffect "# LLVM BB: BB_83", ""()
    %35 = load ptr, ptr %5, align 8
    %36 = bitcast ptr %35 to ptr
    %37 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %36)
    %38 = bitcast ptr %10 to ptr
    %39 = getelementptr inbounds { ptr, i64 }, ptr %38, i32 0, i32 0
    %40 = extractvalue { ptr, i64 } %37, 0
    store ptr %40, ptr %39, align 8
    %41 = getelementptr inbounds { ptr, i64 }, ptr %38, i32 0, i32 1
    %42 = extractvalue { ptr, i64 } %37, 1
    store i64 %42, ptr %41, align 8
    call void @_ZN3c106detail17torchCheckMsgImplIJA76_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %9, ptr noundef @.str.1, ptr noundef nonnull align 1 dereferenceable(76) @.str.9, ptr noundef nonnull align 8 dereferenceable(16) %10)
    invoke void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE, ptr noundef @.str, i32 noundef 61, ptr noundef nonnull align 8 dereferenceable(32) %9) #14
            to label %BB_84 unwind label %BB_85
  
  BB_84:                                            ; preds = %BB_83
    call void asm sideeffect "# LLVM BB: BB_84", ""()
    unreachable
  
  BB_85:                                            ; preds = %BB_83
    %43 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_85", ""()
    %44 = extractvalue { ptr, i32 } %43, 0
    store ptr %44, ptr %11, align 8
    %45 = extractvalue { ptr, i32 } %43, 1
    store i32 %45, ptr %12, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %9) #15
    br label %BB_91
  
  BB_86:                                            ; preds = %BB_82
    call void asm sideeffect "# LLVM BB: BB_86", ""()
    %46 = load ptr, ptr %5, align 8
    call fastcc void @_ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc(ptr noundef nonnull align 8 dereferenceable(8) %46)
    %47 = load ptr, ptr %6, align 8
    %48 = bitcast ptr %47 to ptr
    %49 = call i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %48)
    %50 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %13, i32 0, i32 0
    store i16 %49, ptr %50, align 2
    %51 = load ptr, ptr %5, align 8
    %52 = bitcast ptr %51 to ptr
    %53 = call i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %52)
    %54 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %14, i32 0, i32 0
    store i16 %53, ptr %54, align 2
    %55 = call noundef zeroext i1 @_ZN6caffe2eqERKNS_8TypeMetaES2_(ptr noundef nonnull align 2 dereferenceable(2) %13, ptr noundef nonnull align 2 dereferenceable(2) %14) #15
    %56 = xor i1 %55, true
    br i1 %56, label %BB_87, label %BB_90
  
  BB_87:                                            ; preds = %BB_86
    call void asm sideeffect "# LLVM BB: BB_87", ""()
    %57 = load ptr, ptr %6, align 8
    %58 = bitcast ptr %57 to ptr
    %59 = call i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %58)
    %60 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %16, i32 0, i32 0
    store i16 %59, ptr %60, align 2
    %61 = load ptr, ptr %5, align 8
    %62 = bitcast ptr %61 to ptr
    %63 = call i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %62)
    %64 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %17, i32 0, i32 0
    store i16 %63, ptr %64, align 2
    call void @_ZN3c106detail17torchCheckMsgImplIJA16_cN6caffe28TypeMetaEA34_cS4_EEEDcPKcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %15, ptr noundef @.str.11, ptr noundef nonnull align 1 dereferenceable(16) @.str.12, ptr noundef nonnull align 2 dereferenceable(2) %16, ptr noundef nonnull align 1 dereferenceable(34) @.str.13, ptr noundef nonnull align 2 dereferenceable(2) %17)
    invoke void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE, ptr noundef @.str, i32 noundef 66, ptr noundef nonnull align 8 dereferenceable(32) %15) #14
            to label %BB_88 unwind label %BB_89
  
  BB_88:                                            ; preds = %BB_87
    call void asm sideeffect "# LLVM BB: BB_88", ""()
    unreachable
  
  BB_89:                                            ; preds = %BB_87
    %65 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_89", ""()
    %66 = extractvalue { ptr, i32 } %65, 0
    store ptr %66, ptr %11, align 8
    %67 = extractvalue { ptr, i32 } %65, 1
    store i32 %67, ptr %12, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %15) #15
    br label %BB_91
  
  BB_90:                                            ; preds = %BB_86
    call void asm sideeffect "# LLVM BB: BB_90", ""()
    %68 = bitcast ptr %25 to ptr
    %69 = load ptr, ptr %6, align 8
    %70 = bitcast ptr %69 to ptr
    %71 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %70)
    %72 = bitcast ptr %18 to ptr
    %73 = getelementptr inbounds { ptr, i64 }, ptr %72, i32 0, i32 0
    %74 = extractvalue { ptr, i64 } %71, 0
    store ptr %74, ptr %73, align 8
    %75 = getelementptr inbounds { ptr, i64 }, ptr %72, i32 0, i32 1
    %76 = extractvalue { ptr, i64 } %71, 1
    store i64 %76, ptr %75, align 8
    call void @_ZN3c108ArrayRefIlEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %19)
    %77 = load ptr, ptr %6, align 8
    %78 = bitcast ptr %77 to ptr
    %79 = call i64 @_ZNK2at10TensorBase7optionsEv(ptr noundef nonnull align 8 dereferenceable(8) %78)
    %80 = bitcast ptr %21 to ptr
    store i64 %79, ptr %80, align 2
    %81 = load ptr, ptr %6, align 8
    %82 = bitcast ptr %81 to ptr
    %83 = call noundef signext i8 @_ZNK2at10TensorBase21suggest_memory_formatEb(ptr noundef nonnull align 8 dereferenceable(8) %82, i1 noundef zeroext false)
    store i8 %83, ptr %23, align 1
    call void @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %22, ptr noundef nonnull align 1 dereferenceable(1) %23)
    %84 = getelementptr inbounds %"class.c10::optional.48", ptr %22, i32 0, i32 0
    %85 = bitcast ptr %84 to ptr
    %86 = load i16, ptr %85, align 1
    %87 = call i64 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %21, i16 %86) #15
    %88 = bitcast ptr %20 to ptr
    store i64 %87, ptr %88, align 2
    call void @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev(ptr noundef nonnull align 8 dereferenceable(16) %24)
    %89 = bitcast ptr %18 to ptr
    %90 = getelementptr inbounds { ptr, i64 }, ptr %89, i32 0, i32 0
    %91 = load ptr, ptr %90, align 8
    %92 = getelementptr inbounds { ptr, i64 }, ptr %89, i32 0, i32 1
    %93 = load i64, ptr %92, align 8
    %94 = bitcast ptr %19 to ptr
    %95 = getelementptr inbounds { ptr, i64 }, ptr %94, i32 0, i32 0
    %96 = load ptr, ptr %95, align 8
    %97 = getelementptr inbounds { ptr, i64 }, ptr %94, i32 0, i32 1
    %98 = load i64, ptr %97, align 8
    %99 = bitcast ptr %20 to ptr
    %100 = load i64, ptr %99, align 2
    %101 = bitcast ptr %68 to ptr
    %102 = load ptr, ptr %101, align 8
    %103 = getelementptr inbounds ptr, ptr %102, i64 2
    %104 = load ptr, ptr %103, align 8
    call void %104(ptr noundef nonnull align 8 dereferenceable(8) %68, i64 noundef 0, ptr %91, i64 %93, ptr %96, i64 %98, i64 %100, ptr noundef byval(%"class.c10::ArrayRef.44") align 8 %24)
    ret void
  
  BB_91:                                            ; preds = %BB_89, %BB_85
    call void asm sideeffect "# LLVM BB: BB_91", ""()
    %105 = load ptr, ptr %11, align 8
    call void @_Unwind_Resume(ptr %105) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail17torchCheckMsgImplIJA76_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef %1, ptr noundef nonnull align 1 dereferenceable(76) %2, ptr noundef nonnull align 8 dereferenceable(16) %3) local_unnamed_addr #0 comdat {
  BB_92:
    call void asm sideeffect "# LLVM BB: BB_92", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = bitcast ptr %0 to ptr
    store ptr %8, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %9 = load ptr, ptr %6, align 8
    %10 = load ptr, ptr %7, align 8
    call void @_ZN3c103strIJA76_cNS_8ArrayRefIlEEEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(76) %9, ptr noundef nonnull align 8 dereferenceable(16) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define internal fastcc void @_ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc(ptr noundef nonnull align 8 dereferenceable(8) %0) unnamed_addr #0 personality ptr @__gxx_personality_v0 {
  BB_93:
    call void asm sideeffect "# LLVM BB: BB_93", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"struct.c10::integer_range.64", align 8
    %6 = alloca %"struct.c10::detail::integer_iterator.65", align 8
    %7 = alloca %"struct.c10::detail::integer_iterator.65", align 8
    %8 = alloca i64, align 8
    %9 = alloca %"class.std::__cxx11::basic_string", align 8
    %10 = alloca %"class.c10::ArrayRef", align 8
    %11 = alloca ptr, align 8
    %12 = alloca i32, align 4
    store ptr %0, ptr %1, align 8
    store ptr @.str.10, ptr %2, align 8
    %13 = load ptr, ptr %1, align 8
    %14 = bitcast ptr %13 to ptr
    %15 = call noundef i64 @_ZNK2at10TensorBase10ndimensionEv(ptr noundef nonnull align 8 dereferenceable(8) %14)
    store i64 %15, ptr %3, align 8
    %16 = load i64, ptr %3, align 8
    %17 = call { i64, i64 } @_ZN3c106irangeIilLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_(i32 noundef 1, i64 noundef %16)
    %18 = bitcast ptr %5 to ptr
    %19 = getelementptr inbounds { i64, i64 }, ptr %18, i32 0, i32 0
    %20 = extractvalue { i64, i64 } %17, 0
    store i64 %20, ptr %19, align 8
    %21 = getelementptr inbounds { i64, i64 }, ptr %18, i32 0, i32 1
    %22 = extractvalue { i64, i64 } %17, 1
    store i64 %22, ptr %21, align 8
    store ptr %5, ptr %4, align 8
    %23 = load ptr, ptr %4, align 8
    %24 = call i64 @_ZNK3c1013integer_rangeIlLb0ELb1EE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %23)
    %25 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %6, i32 0, i32 0
    store i64 %24, ptr %25, align 8
    %26 = load ptr, ptr %4, align 8
    %27 = call i64 @_ZNK3c1013integer_rangeIlLb0ELb1EE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %26)
    %28 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %7, i32 0, i32 0
    store i64 %27, ptr %28, align 8
    br label %BB_94
  
  BB_94:                                            ; preds = %BB_100, %BB_93
    call void asm sideeffect "# LLVM BB: BB_94", ""()
    %29 = call noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEneERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    br i1 %29, label %BB_95, label %BB_101
  
  BB_95:                                            ; preds = %BB_94
    call void asm sideeffect "# LLVM BB: BB_95", ""()
    %30 = call noundef i64 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEdeEv(ptr noundef nonnull align 8 dereferenceable(8) %6)
    store i64 %30, ptr %8, align 8
    %31 = load ptr, ptr %1, align 8
    %32 = bitcast ptr %31 to ptr
    %33 = load i64, ptr %8, align 8
    %34 = call noundef i64 @_ZNK2at10TensorBase4sizeEl(ptr noundef nonnull align 8 dereferenceable(8) %32, i64 noundef %33)
    %35 = icmp sgt i64 %34, 0
    %36 = xor i1 %35, true
    br i1 %36, label %BB_96, label %BB_99
  
  BB_96:                                            ; preds = %BB_95
    call void asm sideeffect "# LLVM BB: BB_96", ""()
    %37 = load ptr, ptr %1, align 8
    %38 = bitcast ptr %37 to ptr
    %39 = call { ptr, i64 } @_ZNK2at10TensorBase5sizesEv(ptr noundef nonnull align 8 dereferenceable(8) %38)
    %40 = bitcast ptr %10 to ptr
    %41 = getelementptr inbounds { ptr, i64 }, ptr %40, i32 0, i32 0
    %42 = extractvalue { ptr, i64 } %39, 0
    store ptr %42, ptr %41, align 8
    %43 = getelementptr inbounds { ptr, i64 }, ptr %40, i32 0, i32 1
    %44 = extractvalue { ptr, i64 } %39, 1
    store i64 %44, ptr %43, align 8
    call void @_ZN3c106detail17torchCheckMsgImplIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcS3_DpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %9, ptr noundef @.str.75, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 1 dereferenceable(100) @.str.76, ptr noundef nonnull align 8 dereferenceable(16) %10, ptr noundef nonnull align 1 dereferenceable(17) @.str.5, ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 1 dereferenceable(13) @.str.6)
    invoke void @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc, ptr noundef @.str.74, i32 noundef 35, ptr noundef nonnull align 8 dereferenceable(32) %9) #14
            to label %BB_97 unwind label %BB_98
  
  BB_97:                                            ; preds = %BB_96
    call void asm sideeffect "# LLVM BB: BB_97", ""()
    unreachable
  
  BB_98:                                            ; preds = %BB_96
    %45 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_98", ""()
    %46 = extractvalue { ptr, i32 } %45, 0
    store ptr %46, ptr %11, align 8
    %47 = extractvalue { ptr, i32 } %45, 1
    store i32 %47, ptr %12, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %9) #15
    br label %BB_102
  
  BB_99:                                            ; preds = %BB_95
    call void asm sideeffect "# LLVM BB: BB_99", ""()
    br label %BB_100
  
  BB_100:                                           ; preds = %BB_99
    call void asm sideeffect "# LLVM BB: BB_100", ""()
    %48 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail16integer_iteratorIlLb0ELi0EEppEv(ptr noundef nonnull align 8 dereferenceable(8) %6)
    br label %BB_94
  
  BB_101:                                           ; preds = %BB_94
    call void asm sideeffect "# LLVM BB: BB_101", ""()
    ret void
  
  BB_102:                                           ; preds = %BB_98
    call void asm sideeffect "# LLVM BB: BB_102", ""()
    %49 = load ptr, ptr %11, align 8
    call void @_Unwind_Resume(ptr %49) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZN6caffe2eqERKNS_8TypeMetaES2_(ptr noundef nonnull align 2 dereferenceable(2) %0, ptr noundef nonnull align 2 dereferenceable(2) %1) local_unnamed_addr #3 comdat {
  BB_103:
    call void asm sideeffect "# LLVM BB: BB_103", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %4, i32 0, i32 0
    %6 = load i16, ptr %5, align 2
    %7 = zext i16 %6 to i32
    %8 = load ptr, ptr %3, align 8
    %9 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %8, i32 0, i32 0
    %10 = load i16, ptr %9, align 2
    %11 = zext i16 %10 to i32
    %12 = icmp eq i32 %7, %11
    ret i1 %12
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK2at10TensorBase5dtypeEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_104:
    call void asm sideeffect "# LLVM BB: BB_104", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"class.at::TensorBase", ptr %3, i32 0, i32 0
    %5 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    %6 = call i16 @_ZNK3c1010TensorImpl5dtypeEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %7 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    store i16 %6, ptr %7, align 2
    %8 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    %9 = load i16, ptr %8, align 2
    ret i16 %9
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail17torchCheckMsgImplIJA16_cN6caffe28TypeMetaEA34_cS4_EEEDcPKcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef %1, ptr noundef nonnull align 1 dereferenceable(16) %2, ptr noundef nonnull align 2 dereferenceable(2) %3, ptr noundef nonnull align 1 dereferenceable(34) %4, ptr noundef nonnull align 2 dereferenceable(2) %5) local_unnamed_addr #0 comdat {
  BB_105:
    call void asm sideeffect "# LLVM BB: BB_105", ""()
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %6, align 8
    store ptr %1, ptr %7, align 8
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    %13 = load ptr, ptr %8, align 8
    %14 = load ptr, ptr %9, align 8
    %15 = load ptr, ptr %10, align 8
    %16 = load ptr, ptr %11, align 8
    call void @_ZN3c103strIJA16_cN6caffe28TypeMetaEA34_cS3_EEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(16) %13, ptr noundef nonnull align 2 dereferenceable(2) %14, ptr noundef nonnull align 1 dereferenceable(34) %15, ptr noundef nonnull align 2 dereferenceable(2) %16)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at6native38structured_adaptive_max_pool2d_out_cpu4implERKNS_6TensorEN3c108ArrayRefIlEES4_S4_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr %2, i64 %3, ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(8) %5) local_unnamed_addr #0 align 2 {
  BB_106:
    call void asm sideeffect "# LLVM BB: BB_106", ""()
    %6 = alloca %"class.c10::ArrayRef", align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = bitcast ptr %6 to ptr
    %12 = getelementptr inbounds { ptr, i64 }, ptr %11, i32 0, i32 0
    store ptr %2, ptr %12, align 8
    %13 = getelementptr inbounds { ptr, i64 }, ptr %11, i32 0, i32 1
    store i64 %3, ptr %13, align 8
    store ptr %0, ptr %7, align 8
    store ptr %1, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    store ptr %5, ptr %10, align 8
    %14 = load ptr, ptr %7, align 8
    %15 = load ptr, ptr %9, align 8
    %16 = load ptr, ptr %10, align 8
    %17 = load ptr, ptr %8, align 8
    call void @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEEclIJS4_S4_S4_RS7_EEEvNS5_10DeviceTypeEDpOT_(ptr noundef nonnull align 8 dereferenceable(40) @_ZN2at6native26adaptive_max_pool2d_kernelE, i8 noundef signext 0, ptr noundef nonnull align 8 dereferenceable(8) %15, ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 8 dereferenceable(16) %6)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEEclIJS4_S4_S4_RS7_EEEvNS5_10DeviceTypeEDpOT_(ptr noundef nonnull align 8 dereferenceable(40) %0, i8 noundef signext %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(16) %5) local_unnamed_addr #0 comdat align 2 {
  BB_107:
    call void asm sideeffect "# LLVM BB: BB_107", ""()
    %6 = alloca ptr, align 8
    %7 = alloca i8, align 1
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca %"class.c10::ArrayRef", align 8
    store ptr %0, ptr %6, align 8
    store i8 %1, ptr %7, align 1
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    %14 = load ptr, ptr %6, align 8
    %15 = load i8, ptr %7, align 1
    %16 = call noundef ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE12get_call_ptrENS5_10DeviceTypeE(ptr noundef nonnull align 8 dereferenceable(40) %14, i8 noundef signext %15)
    store ptr %16, ptr %12, align 8
    %17 = load ptr, ptr %12, align 8
    %18 = load ptr, ptr %8, align 8
    %19 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %18) #15
    %20 = load ptr, ptr %9, align 8
    %21 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %20) #15
    %22 = load ptr, ptr %10, align 8
    %23 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %22) #15
    %24 = load ptr, ptr %11, align 8
    %25 = call noundef nonnull align 8 dereferenceable(16) ptr @_ZSt7forwardIRN3c108ArrayRefIlEEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(16) %24) #15
    %26 = bitcast ptr %13 to ptr
    %27 = bitcast ptr %25 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %26, ptr align 8 %27, i64 16, i1 false)
    %28 = bitcast ptr %13 to ptr
    %29 = getelementptr inbounds { ptr, i64 }, ptr %28, i32 0, i32 0
    %30 = load ptr, ptr %29, align 8
    %31 = getelementptr inbounds { ptr, i64 }, ptr %28, i32 0, i32 1
    %32 = load i64, ptr %31, align 8
    call void %17(ptr noundef nonnull align 8 dereferenceable(8) %19, ptr noundef nonnull align 8 dereferenceable(8) %21, ptr noundef nonnull align 8 dereferenceable(8) %23, ptr %30, i64 %32)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define dso_local void @_ZN2at6native47structured_adaptive_max_pool2d_backward_out_cpu4implERKNS_6TensorES4_S4_S4_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 8 dereferenceable(8) %4) local_unnamed_addr #0 align 2 {
  BB_108:
    call void asm sideeffect "# LLVM BB: BB_108", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %10 = load ptr, ptr %5, align 8
    %11 = load ptr, ptr %9, align 8
    %12 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK2at6Tensor5zero_Ev(ptr noundef nonnull align 8 dereferenceable(8) %11)
    %13 = load ptr, ptr %9, align 8
    %14 = load ptr, ptr %6, align 8
    %15 = load ptr, ptr %8, align 8
    call void @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEEclIJS4_S4_S4_EEEvN3c1010DeviceTypeEDpOT_(ptr noundef nonnull align 8 dereferenceable(40) @_ZN2at6native35adaptive_max_pool2d_backward_kernelE, i8 noundef signext 0, ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNK2at6Tensor5zero_Ev(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_109:
    call void asm sideeffect "# LLVM BB: BB_109", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN2at4_ops5zero_4callERNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8) %2)
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEEclIJS4_S4_S4_EEEvN3c1010DeviceTypeEDpOT_(ptr noundef nonnull align 8 dereferenceable(40) %0, i8 noundef signext %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 8 dereferenceable(8) %4) local_unnamed_addr #0 comdat align 2 {
  BB_110:
    call void asm sideeffect "# LLVM BB: BB_110", ""()
    %5 = alloca ptr, align 8
    %6 = alloca i8, align 1
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store i8 %1, ptr %6, align 1
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %11 = load ptr, ptr %5, align 8
    %12 = load i8, ptr %6, align 1
    %13 = call noundef ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE12get_call_ptrEN3c1010DeviceTypeE(ptr noundef nonnull align 8 dereferenceable(40) %11, i8 noundef signext %12)
    store ptr %13, ptr %10, align 8
    %14 = load ptr, ptr %10, align 8
    %15 = load ptr, ptr %7, align 8
    %16 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %15) #15
    %17 = load ptr, ptr %8, align 8
    %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %17) #15
    %19 = load ptr, ptr %9, align 8
    %20 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %19) #15
    call void %14(ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 8 dereferenceable(8) %18, ptr noundef nonnull align 8 dereferenceable(8) %20)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK2at10TensorBase3dimEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_111:
    call void asm sideeffect "# LLVM BB: BB_111", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.at::TensorBase", ptr %2, i32 0, i32 0
    %4 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    %5 = call noundef i64 @_ZNK3c1010TensorImpl3dimEv(ptr noundef nonnull align 8 dereferenceable(192) %4)
    ret i64 %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_112:
    call void asm sideeffect "# LLVM BB: BB_112", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::intrusive_ptr", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c1010TensorImpl3dimEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_113:
    call void asm sideeffect "# LLVM BB: BB_113", ""()
    %1 = alloca i64, align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %3, i8 noundef zeroext 2)
    br i1 %4, label %BB_114, label %BB_115
  
  BB_114:                                           ; preds = %BB_113
    call void asm sideeffect "# LLVM BB: BB_114", ""()
    %5 = bitcast ptr %3 to ptr
    %6 = load ptr, ptr %5, align 8
    %7 = getelementptr inbounds ptr, ptr %6, i64 12
    %8 = load ptr, ptr %7, align 8
    %9 = call noundef i64 %8(ptr noundef nonnull align 8 dereferenceable(192) %3)
    store i64 %9, ptr %1, align 8
    br label %BB_116
  
  BB_115:                                           ; preds = %BB_113
    call void asm sideeffect "# LLVM BB: BB_115", ""()
    %10 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 6
    %11 = call noundef i64 @_ZNK3c104impl15SizesAndStrides4sizeEv(ptr noundef nonnull align 8 dereferenceable(88) %10) #15
    store i64 %11, ptr %1, align 8
    br label %BB_116
  
  BB_116:                                           ; preds = %BB_115, %BB_114
    call void asm sideeffect "# LLVM BB: BB_116", ""()
    %12 = load i64, ptr %1, align 8
    ret i64 %12
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %0, i8 noundef zeroext %1) local_unnamed_addr #3 comdat align 2 {
  BB_117:
    call void asm sideeffect "# LLVM BB: BB_117", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i8 %1, ptr %3, align 1
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %4, i32 0, i32 11
    %6 = bitcast ptr %5 to ptr
    %7 = load i24, ptr %6, align 1
    %8 = lshr i24 %7, 10
    %9 = and i24 %8, 3
    %10 = trunc i24 %9 to i8
    %11 = zext i8 %10 to i32
    %12 = load i8, ptr %3, align 1
    %13 = zext i8 %12 to i32
    %14 = icmp sge i32 %11, %13
    ret i1 %14
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c104impl15SizesAndStrides4sizeEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 {
  BB_118:
    call void asm sideeffect "# LLVM BB: BB_118", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %2, i32 0, i32 0
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA59_cNS_8ArrayRefIlEEEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(59) %1, ptr noundef nonnull align 8 dereferenceable(16) %2) local_unnamed_addr #0 comdat {
  BB_119:
    call void asm sideeffect "# LLVM BB: BB_119", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = bitcast ptr %0 to ptr
    store ptr %7, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds [59 x i8], ptr %8, i64 0, i64 0
    store ptr %9, ptr %6, align 8
    %10 = load ptr, ptr %5, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(16) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(16) %2) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_120:
    call void asm sideeffect "# LLVM BB: BB_120", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = bitcast ptr %0 to ptr
    store ptr %9, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6)
    %10 = bitcast ptr %6 to ptr
    %11 = load ptr, ptr %4, align 8
    %12 = load ptr, ptr %5, align 8
    %13 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEEEEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 8 dereferenceable(16) %12)
            to label %BB_121 unwind label %BB_123
  
  BB_121:                                           ; preds = %BB_120
    call void asm sideeffect "# LLVM BB: BB_121", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %6)
            to label %BB_122 unwind label %BB_123
  
  BB_122:                                           ; preds = %BB_121
    call void asm sideeffect "# LLVM BB: BB_122", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    ret void
  
  BB_123:                                           ; preds = %BB_121, %BB_120
    %14 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_123", ""()
    %15 = extractvalue { ptr, i32 } %14, 0
    store ptr %15, ptr %7, align 8
    %16 = extractvalue { ptr, i32 } %14, 1
    store i32 %16, ptr %8, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    br label %BB_124
  
  BB_124:                                           ; preds = %BB_123
    call void asm sideeffect "# LLVM BB: BB_124", ""()
    %17 = load ptr, ptr %7, align 8
    call void @_Unwind_Resume(ptr %17) #14
    unreachable
  }
  
  declare void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112)) unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEEEEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(16) %2) local_unnamed_addr #0 comdat {
  BB_125:
    call void asm sideeffect "# LLVM BB: BB_125", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(16) %9)
    ret ptr %10
  }
  
  declare void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8, ptr noundef nonnull align 8 dereferenceable(112)) local_unnamed_addr #6
  
  ; Function Attrs: nounwind
  declare void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112)) unnamed_addr #2
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(16) %1) local_unnamed_addr #0 comdat {
  BB_126:
    call void asm sideeffect "# LLVM BB: BB_126", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::ArrayRef", align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %5 = load ptr, ptr %2, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %4 to ptr
    %8 = bitcast ptr %6 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %7, ptr align 8 %8, i64 16, i1 false)
    %9 = bitcast ptr %4 to ptr
    %10 = getelementptr inbounds { ptr, i64 }, ptr %9, i32 0, i32 0
    %11 = load ptr, ptr %10, align 8
    %12 = getelementptr inbounds { ptr, i64 }, ptr %9, i32 0, i32 1
    %13 = load i64, ptr %12, align 8
    %14 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsIlEERSoS1_NS_8ArrayRefIT_EE(ptr noundef nonnull align 8 dereferenceable(8) %5, ptr %11, i64 %13)
    %15 = load ptr, ptr %2, align 8
    ret ptr %15
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat {
  BB_127:
    call void asm sideeffect "# LLVM BB: BB_127", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load ptr, ptr %5, align 8
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef %6)
    %8 = load ptr, ptr %2, align 8
    ret ptr %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsIlEERSoS1_NS_8ArrayRefIT_EE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat {
  BB_128:
    call void asm sideeffect "# LLVM BB: BB_128", ""()
    %3 = alloca %"class.c10::ArrayRef", align 8
    %4 = alloca ptr, align 8
    %5 = alloca i32, align 4
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = bitcast ptr %3 to ptr
    %11 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 0
    store ptr %1, ptr %11, align 8
    %12 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 1
    store i64 %2, ptr %12, align 8
    store ptr %0, ptr %4, align 8
    store i32 0, ptr %5, align 4
    %13 = load ptr, ptr %4, align 8
    %14 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef @.str.16)
    store ptr %3, ptr %6, align 8
    %15 = load ptr, ptr %6, align 8
    %16 = call noundef ptr @_ZNK3c108ArrayRefIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %15)
    store ptr %16, ptr %7, align 8
    %17 = load ptr, ptr %6, align 8
    %18 = call noundef ptr @_ZNK3c108ArrayRefIlE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %17)
    store ptr %18, ptr %8, align 8
    br label %BB_129
  
  BB_129:                                           ; preds = %BB_133, %BB_128
    call void asm sideeffect "# LLVM BB: BB_129", ""()
    %19 = load ptr, ptr %7, align 8
    %20 = load ptr, ptr %8, align 8
    %21 = icmp ne ptr %19, %20
    br i1 %21, label %BB_130, label %BB_134
  
  BB_130:                                           ; preds = %BB_129
    call void asm sideeffect "# LLVM BB: BB_130", ""()
    %22 = load ptr, ptr %7, align 8
    store ptr %22, ptr %9, align 8
    %23 = load i32, ptr %5, align 4
    %24 = add nsw i32 %23, 1
    store i32 %24, ptr %5, align 4
    %25 = icmp sgt i32 %23, 0
    br i1 %25, label %BB_131, label %BB_132
  
  BB_131:                                           ; preds = %BB_130
    call void asm sideeffect "# LLVM BB: BB_131", ""()
    %26 = load ptr, ptr %4, align 8
    %27 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %26, ptr noundef @.str.17)
    br label %BB_132
  
  BB_132:                                           ; preds = %BB_131, %BB_130
    call void asm sideeffect "# LLVM BB: BB_132", ""()
    %28 = load ptr, ptr %4, align 8
    %29 = load ptr, ptr %9, align 8
    %30 = load i64, ptr %29, align 8
    %31 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEl(ptr noundef nonnull align 8 dereferenceable(8) %28, i64 noundef %30)
    br label %BB_133
  
  BB_133:                                           ; preds = %BB_132
    call void asm sideeffect "# LLVM BB: BB_133", ""()
    %32 = load ptr, ptr %7, align 8
    %33 = getelementptr inbounds i64, ptr %32, i32 1
    store ptr %33, ptr %7, align 8
    br label %BB_129
  
  BB_134:                                           ; preds = %BB_129
    call void asm sideeffect "# LLVM BB: BB_134", ""()
    %34 = load ptr, ptr %4, align 8
    %35 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %34, ptr noundef @.str.18)
    %36 = load ptr, ptr %4, align 8
    ret ptr %36
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c108ArrayRefIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_135:
    call void asm sideeffect "# LLVM BB: BB_135", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c108ArrayRefIlE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_136:
    call void asm sideeffect "# LLVM BB: BB_136", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    %5 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 1
    %6 = load i64, ptr %5, align 8
    %7 = getelementptr inbounds i64, ptr %4, i64 %6
    ret ptr %7
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEl(ptr noundef nonnull align 8 dereferenceable(8), i64 noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK3c1010TensorImpl5sizesEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_137:
    call void asm sideeffect "# LLVM BB: BB_137", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %3, i8 noundef zeroext 2)
    br i1 %4, label %BB_138, label %BB_139
  
  BB_138:                                           ; preds = %BB_137
    call void asm sideeffect "# LLVM BB: BB_138", ""()
    %5 = bitcast ptr %3 to ptr
    %6 = load ptr, ptr %5, align 8
    %7 = getelementptr inbounds ptr, ptr %6, i64 8
    %8 = load ptr, ptr %7, align 8
    %9 = call { ptr, i64 } %8(ptr noundef nonnull align 8 dereferenceable(192) %3)
    %10 = bitcast ptr %1 to ptr
    %11 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 0
    %12 = extractvalue { ptr, i64 } %9, 0
    store ptr %12, ptr %11, align 8
    %13 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 1
    %14 = extractvalue { ptr, i64 } %9, 1
    store i64 %14, ptr %13, align 8
    br label %BB_140
  
  BB_139:                                           ; preds = %BB_137
    call void asm sideeffect "# LLVM BB: BB_139", ""()
    %15 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 6
    %16 = call { ptr, i64 } @_ZNK3c104impl15SizesAndStrides14sizes_arrayrefEv(ptr noundef nonnull align 8 dereferenceable(88) %15) #15
    %17 = bitcast ptr %1 to ptr
    %18 = getelementptr inbounds { ptr, i64 }, ptr %17, i32 0, i32 0
    %19 = extractvalue { ptr, i64 } %16, 0
    store ptr %19, ptr %18, align 8
    %20 = getelementptr inbounds { ptr, i64 }, ptr %17, i32 0, i32 1
    %21 = extractvalue { ptr, i64 } %16, 1
    store i64 %21, ptr %20, align 8
    br label %BB_140
  
  BB_140:                                           ; preds = %BB_139, %BB_138
    call void asm sideeffect "# LLVM BB: BB_140", ""()
    %22 = bitcast ptr %1 to ptr
    %23 = load { ptr, i64 }, ptr %22, align 8
    ret { ptr, i64 } %23
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK3c104impl15SizesAndStrides14sizes_arrayrefEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_141:
    call void asm sideeffect "# LLVM BB: BB_141", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef ptr @_ZNK3c104impl15SizesAndStrides10sizes_dataEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    %5 = call noundef i64 @_ZNK3c104impl15SizesAndStrides4sizeEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    invoke void @_ZN3c108ArrayRefIlEC2EPKlm(ptr noundef nonnull align 8 dereferenceable(16) %1, ptr noundef %4, i64 noundef %5)
            to label %BB_142 unwind label %BB_143
  
  BB_142:                                           ; preds = %BB_141
    call void asm sideeffect "# LLVM BB: BB_142", ""()
    %6 = bitcast ptr %1 to ptr
    %7 = load { ptr, i64 }, ptr %6, align 8
    ret { ptr, i64 } %7
  
  BB_143:                                           ; preds = %BB_141
    %8 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_143", ""()
    %9 = extractvalue { ptr, i32 } %8, 0
    call void @__clang_call_terminate(ptr %9) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c104impl15SizesAndStrides10sizes_dataEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 {
  BB_144:
    call void asm sideeffect "# LLVM BB: BB_144", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c104impl15SizesAndStrides8isInlineEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    br i1 %4, label %BB_145, label %BB_146
  
  BB_145:                                           ; preds = %BB_144
    call void asm sideeffect "# LLVM BB: BB_145", ""()
    %5 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %3, i32 0, i32 1
    %6 = bitcast ptr %5 to ptr
    %7 = getelementptr inbounds [10 x i64], ptr %6, i64 0, i64 0
    store ptr %7, ptr %1, align 8
    br label %BB_147
  
  BB_146:                                           ; preds = %BB_144
    call void asm sideeffect "# LLVM BB: BB_146", ""()
    %8 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %3, i32 0, i32 1
    %9 = bitcast ptr %8 to ptr
    %10 = load ptr, ptr %9, align 8
    %11 = getelementptr inbounds i64, ptr %10, i64 0
    store ptr %11, ptr %1, align 8
    br label %BB_147
  
  BB_147:                                           ; preds = %BB_146, %BB_145
    call void asm sideeffect "# LLVM BB: BB_147", ""()
    %12 = load ptr, ptr %1, align 8
    ret ptr %12
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIlEC2EPKlm(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef %1, i64 noundef %2) unnamed_addr #5 comdat align 2 {
  BB_148:
    call void asm sideeffect "# LLVM BB: BB_148", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"class.c10::ArrayRef", ptr %6, i32 0, i32 0
    %8 = load ptr, ptr %4, align 8
    store ptr %8, ptr %7, align 8
    %9 = getelementptr inbounds %"class.c10::ArrayRef", ptr %6, i32 0, i32 1
    %10 = load i64, ptr %5, align 8
    store i64 %10, ptr %9, align 8
    call void @_ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv(ptr noundef nonnull align 8 dereferenceable(16) %6)
    ret void
  }
  
  ; Function Attrs: noinline noreturn nounwind
  define linkonce_odr hidden void @__clang_call_terminate(ptr %0) local_unnamed_addr #7 comdat {
  BB_149:
    call void asm sideeffect "# LLVM BB: BB_149", ""()
    %1 = tail call ptr @__cxa_begin_catch(ptr %0) #15
    tail call void @_ZSt9terminatev() #16
    unreachable
  }
  
  declare ptr @__cxa_begin_catch(ptr) local_unnamed_addr
  
  declare void @_ZSt9terminatev() local_unnamed_addr
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c104impl15SizesAndStrides8isInlineEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 {
  BB_150:
    call void asm sideeffect "# LLVM BB: BB_150", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %2, i32 0, i32 0
    %4 = load i64, ptr %3, align 8
    %5 = icmp ule i64 %4, 5
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #0 comdat align 2 {
  BB_151:
    call void asm sideeffect "# LLVM BB: BB_151", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    %5 = icmp ne ptr %4, null
    br i1 %5, label %BB_153, label %BB_152
  
  BB_152:                                           ; preds = %BB_151
    call void asm sideeffect "# LLVM BB: BB_152", ""()
    %6 = getelementptr inbounds %"class.c10::ArrayRef", ptr %2, i32 0, i32 1
    %7 = load i64, ptr %6, align 8
    %8 = icmp eq i64 %7, 0
    br label %BB_153
  
  BB_153:                                           ; preds = %BB_152, %BB_151
    %9 = phi i1 [ true, %BB_151 ], [ %8, %BB_152 ]
    call void asm sideeffect "# LLVM BB: BB_153", ""()
    %10 = xor i1 %9, true
    br i1 %10, label %BB_154, label %BB_155
  
  BB_154:                                           ; preds = %BB_153
    call void asm sideeffect "# LLVM BB: BB_154", ""()
    %11 = call noundef ptr @_ZN3c103strIJA94_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(94) @.str.21)
    call void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_(ptr noundef @__func__._ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv, ptr noundef @.str.19, i32 noundef 58, ptr noundef @.str.20, ptr noundef %11) #14
    unreachable
  
  BB_155:                                           ; preds = %BB_153
    call void asm sideeffect "# LLVM BB: BB_155", ""()
    ret void
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c103strIJA94_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(94) %0) local_unnamed_addr #0 comdat {
  BB_156:
    call void asm sideeffect "# LLVM BB: BB_156", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds [94 x i8], ptr %2, i64 0, i64 0
    %4 = call noundef ptr @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_(ptr noundef %3)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_(ptr noundef %0) local_unnamed_addr #3 comdat align 2 {
  BB_157:
    call void asm sideeffect "# LLVM BB: BB_157", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c1010TensorImpl4sizeEl(ptr noundef nonnull align 8 dereferenceable(192) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_158:
    call void asm sideeffect "# LLVM BB: BB_158", ""()
    %2 = alloca i64, align 8
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %5, i8 noundef zeroext 2)
    br i1 %6, label %BB_159, label %BB_160
  
  BB_159:                                           ; preds = %BB_158
    call void asm sideeffect "# LLVM BB: BB_159", ""()
    %7 = load i64, ptr %4, align 8
    %8 = bitcast ptr %5 to ptr
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr inbounds ptr, ptr %9, i64 6
    %11 = load ptr, ptr %10, align 8
    %12 = call noundef i64 %11(ptr noundef nonnull align 8 dereferenceable(192) %5, i64 noundef %7)
    store i64 %12, ptr %2, align 8
    br label %BB_161
  
  BB_160:                                           ; preds = %BB_158
    call void asm sideeffect "# LLVM BB: BB_160", ""()
    %13 = load i64, ptr %4, align 8
    %14 = call noundef i64 @_ZNK3c1010TensorImpl3dimEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %15 = call noundef i64 @_ZN3c1014maybe_wrap_dimEllb(i64 noundef %13, i64 noundef %14, i1 noundef zeroext false)
    store i64 %15, ptr %4, align 8
    %16 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %5, i32 0, i32 6
    %17 = load i64, ptr %4, align 8
    %18 = call noundef i64 @_ZNK3c104impl15SizesAndStrides17size_at_uncheckedEm(ptr noundef nonnull align 8 dereferenceable(88) %16, i64 noundef %17) #15
    store i64 %18, ptr %2, align 8
    br label %BB_161
  
  BB_161:                                           ; preds = %BB_160, %BB_159
    call void asm sideeffect "# LLVM BB: BB_161", ""()
    %19 = load i64, ptr %2, align 8
    ret i64 %19
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1014maybe_wrap_dimEllb(i64 noundef %0, i64 noundef %1, i1 noundef zeroext %2) local_unnamed_addr #0 comdat {
  BB_162:
    call void asm sideeffect "# LLVM BB: BB_162", ""()
    %3 = alloca i64, align 8
    %4 = alloca i64, align 8
    %5 = alloca i8, align 1
    store i64 %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    %6 = zext i1 %2 to i8
    store i8 %6, ptr %5, align 1
    %7 = load i64, ptr %3, align 8
    %8 = load i64, ptr %4, align 8
    %9 = load i8, ptr %5, align 1
    %10 = trunc i8 %9 to i1
    %11 = call noundef i64 @_ZN3c1015_maybe_wrap_dimIlEET_S1_S1_b(i64 noundef %7, i64 noundef %8, i1 noundef zeroext %10)
    ret i64 %11
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c104impl15SizesAndStrides17size_at_uncheckedEm(ptr noundef nonnull align 8 dereferenceable(88) %0, i64 noundef %1) local_unnamed_addr #3 comdat align 2 {
  BB_163:
    call void asm sideeffect "# LLVM BB: BB_163", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = call noundef ptr @_ZNK3c104impl15SizesAndStrides10sizes_dataEv(ptr noundef nonnull align 8 dereferenceable(88) %4) #15
    %6 = load i64, ptr %3, align 8
    %7 = getelementptr inbounds i64, ptr %5, i64 %6
    %8 = load i64, ptr %7, align 8
    ret i64 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1015_maybe_wrap_dimIlEET_S1_S1_b(i64 noundef %0, i64 noundef %1, i1 noundef zeroext %2) local_unnamed_addr #0 comdat {
  BB_164:
    call void asm sideeffect "# LLVM BB: BB_164", ""()
    %3 = alloca i64, align 8
    %4 = alloca i64, align 8
    %5 = alloca i64, align 8
    %6 = alloca i8, align 1
    store i64 %0, ptr %4, align 8
    store i64 %1, ptr %5, align 8
    %7 = zext i1 %2 to i8
    store i8 %7, ptr %6, align 1
    %8 = load i64, ptr %5, align 8
    %9 = mul nsw i64 %8, -1
    %10 = load i64, ptr %4, align 8
    %11 = icmp sle i64 %9, %10
    br i1 %11, label %BB_165, label %BB_166
  
  BB_165:                                           ; preds = %BB_164
    call void asm sideeffect "# LLVM BB: BB_165", ""()
    %12 = load i64, ptr %4, align 8
    %13 = load i64, ptr %5, align 8
    %14 = icmp slt i64 %12, %13
    br label %BB_166
  
  BB_166:                                           ; preds = %BB_165, %BB_164
    %15 = phi i1 [ false, %BB_164 ], [ %14, %BB_165 ]
    call void asm sideeffect "# LLVM BB: BB_166", ""()
    br i1 %15, label %BB_167, label %BB_170
  
  BB_167:                                           ; preds = %BB_166
    call void asm sideeffect "# LLVM BB: BB_167", ""()
    %16 = load i64, ptr %4, align 8
    %17 = icmp slt i64 %16, 0
    br i1 %17, label %BB_168, label %BB_169
  
  BB_168:                                           ; preds = %BB_167
    call void asm sideeffect "# LLVM BB: BB_168", ""()
    %18 = load i64, ptr %4, align 8
    %19 = load i64, ptr %5, align 8
    %20 = add nsw i64 %18, %19
    store i64 %20, ptr %3, align 8
    br label %BB_171
  
  BB_169:                                           ; preds = %BB_167
    call void asm sideeffect "# LLVM BB: BB_169", ""()
    %21 = load i64, ptr %4, align 8
    store i64 %21, ptr %3, align 8
    br label %BB_171
  
  BB_170:                                           ; preds = %BB_166
    call void asm sideeffect "# LLVM BB: BB_170", ""()
    %22 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    %23 = load i64, ptr %22, align 8
    %24 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_(ptr noundef nonnull align 8 dereferenceable(8) %5) #15
    %25 = load i64, ptr %24, align 8
    %26 = load i8, ptr %6, align 1
    %27 = trunc i8 %26 to i1
    %28 = call noundef i64 @_ZN3c106detail19maybe_wrap_dim_slowIlEET_S2_S2_b(i64 noundef %23, i64 noundef %25, i1 noundef zeroext %27)
    store i64 %28, ptr %3, align 8
    br label %BB_171
  
  BB_171:                                           ; preds = %BB_170, %BB_169, %BB_168
    call void asm sideeffect "# LLVM BB: BB_171", ""()
    %29 = load i64, ptr %3, align 8
    ret i64 %29
  }
  
  declare noundef i64 @_ZN3c106detail19maybe_wrap_dim_slowIlEET_S2_S2_b(i64 noundef, i64 noundef, i1 noundef zeroext) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_172:
    call void asm sideeffect "# LLVM BB: BB_172", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(107) %1, ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 1 dereferenceable(17) %3, ptr noundef nonnull align 4 dereferenceable(4) %4, ptr noundef nonnull align 1 dereferenceable(13) %5) local_unnamed_addr #0 comdat {
  BB_173:
    call void asm sideeffect "# LLVM BB: BB_173", ""()
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    %14 = alloca ptr, align 8
    %15 = bitcast ptr %0 to ptr
    store ptr %15, ptr %6, align 8
    store ptr %1, ptr %7, align 8
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    %16 = load ptr, ptr %7, align 8
    %17 = getelementptr inbounds [107 x i8], ptr %16, i64 0, i64 0
    store ptr %17, ptr %12, align 8
    %18 = load ptr, ptr %8, align 8
    %19 = load ptr, ptr %9, align 8
    %20 = getelementptr inbounds [17 x i8], ptr %19, i64 0, i64 0
    store ptr %20, ptr %13, align 8
    %21 = load ptr, ptr %10, align 8
    %22 = load ptr, ptr %11, align 8
    %23 = getelementptr inbounds [13 x i8], ptr %22, i64 0, i64 0
    store ptr %23, ptr %14, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEES3_RKiS3_EE4callB5cxx11ERKS3_S7_SC_S9_SC_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef nonnull align 4 dereferenceable(4) %21, ptr noundef nonnull align 8 dereferenceable(8) %14)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEES3_RKiS3_EE4callB5cxx11ERKS3_S7_SC_S9_SC_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 4 dereferenceable(4) %4, ptr noundef nonnull align 8 dereferenceable(8) %5) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_174:
    call void asm sideeffect "# LLVM BB: BB_174", ""()
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %13 = alloca ptr, align 8
    %14 = alloca i32, align 4
    %15 = bitcast ptr %0 to ptr
    store ptr %15, ptr %6, align 8
    store ptr %1, ptr %7, align 8
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %12)
    %16 = bitcast ptr %12 to ptr
    %17 = load ptr, ptr %7, align 8
    %18 = load ptr, ptr %8, align 8
    %19 = load ptr, ptr %9, align 8
    %20 = load ptr, ptr %10, align 8
    %21 = load ptr, ptr %11, align 8
    %22 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_iS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(8) %19, ptr noundef nonnull align 4 dereferenceable(4) %20, ptr noundef nonnull align 8 dereferenceable(8) %21)
            to label %BB_175 unwind label %BB_177
  
  BB_175:                                           ; preds = %BB_174
    call void asm sideeffect "# LLVM BB: BB_175", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %12)
            to label %BB_176 unwind label %BB_177
  
  BB_176:                                           ; preds = %BB_175
    call void asm sideeffect "# LLVM BB: BB_176", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %12) #15
    ret void
  
  BB_177:                                           ; preds = %BB_175, %BB_174
    %23 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_177", ""()
    %24 = extractvalue { ptr, i32 } %23, 0
    store ptr %24, ptr %13, align 8
    %25 = extractvalue { ptr, i32 } %23, 1
    store i32 %25, ptr %14, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %12) #15
    br label %BB_178
  
  BB_178:                                           ; preds = %BB_177
    call void asm sideeffect "# LLVM BB: BB_178", ""()
    %26 = load ptr, ptr %13, align 8
    call void @_Unwind_Resume(ptr %26) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_iS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 4 dereferenceable(4) %4, ptr noundef nonnull align 8 dereferenceable(8) %5) local_unnamed_addr #0 comdat {
  BB_179:
    call void asm sideeffect "# LLVM BB: BB_179", ""()
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    store ptr %0, ptr %6, align 8
    store ptr %1, ptr %7, align 8
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    %12 = load ptr, ptr %6, align 8
    %13 = load ptr, ptr %7, align 8
    %14 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(8) %13)
    %15 = load ptr, ptr %8, align 8
    %16 = load ptr, ptr %9, align 8
    %17 = load ptr, ptr %10, align 8
    %18 = load ptr, ptr %11, align 8
    %19 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKciS5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 4 dereferenceable(4) %17, ptr noundef nonnull align 8 dereferenceable(8) %18)
    ret ptr %19
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKciS5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(16) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 4 dereferenceable(4) %3, ptr noundef nonnull align 8 dereferenceable(8) %4) local_unnamed_addr #0 comdat {
  BB_180:
    call void asm sideeffect "# LLVM BB: BB_180", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %10 = load ptr, ptr %5, align 8
    %11 = load ptr, ptr %6, align 8
    %12 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(16) %11)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %8, align 8
    %15 = load ptr, ptr %9, align 8
    %16 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJiS3_EEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef nonnull align 4 dereferenceable(4) %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    ret ptr %16
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJiS3_EEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(4) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #0 comdat {
  BB_181:
    call void asm sideeffect "# LLVM BB: BB_181", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    %11 = load ptr, ptr %6, align 8
    %12 = load ptr, ptr %7, align 8
    %13 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIiJPKcEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 4 dereferenceable(4) %11, ptr noundef nonnull align 8 dereferenceable(8) %12)
    ret ptr %13
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIiJPKcEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 4 dereferenceable(4) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_182:
    call void asm sideeffect "# LLVM BB: BB_182", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIiEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 4 dereferenceable(4) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIiEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 4 dereferenceable(4) %1) local_unnamed_addr #0 comdat {
  BB_183:
    call void asm sideeffect "# LLVM BB: BB_183", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i32, ptr %5, align 4
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8) %4, i32 noundef %6)
    %8 = load ptr, ptr %2, align 8
    ret ptr %8
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEi(ptr noundef nonnull align 8 dereferenceable(8), i32 noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt5beginIlEPKT_St16initializer_listIS0_E(ptr %0, i64 %1) local_unnamed_addr #3 comdat {
  BB_184:
    call void asm sideeffect "# LLVM BB: BB_184", ""()
    %2 = alloca %"class.std::initializer_list", align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds { ptr, i64 }, ptr %3, i32 0, i32 0
    store ptr %0, ptr %4, align 8
    %5 = getelementptr inbounds { ptr, i64 }, ptr %3, i32 0, i32 1
    store i64 %1, ptr %5, align 8
    %6 = call noundef ptr @_ZNKSt16initializer_listIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt3endIlEPKT_St16initializer_listIS0_E(ptr %0, i64 %1) local_unnamed_addr #3 comdat {
  BB_185:
    call void asm sideeffect "# LLVM BB: BB_185", ""()
    %2 = alloca %"class.std::initializer_list", align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds { ptr, i64 }, ptr %3, i32 0, i32 0
    store ptr %0, ptr %4, align 8
    %5 = getelementptr inbounds { ptr, i64 }, ptr %3, i32 0, i32 1
    store i64 %1, ptr %5, align 8
    %6 = call noundef ptr @_ZNKSt16initializer_listIlE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    ret ptr %6
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt16initializer_listIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_186:
    call void asm sideeffect "# LLVM BB: BB_186", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::initializer_list", ptr %2, i32 0, i32 1
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt16initializer_listIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_187:
    call void asm sideeffect "# LLVM BB: BB_187", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::initializer_list", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt16initializer_listIlE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_188:
    call void asm sideeffect "# LLVM BB: BB_188", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZNKSt16initializer_listIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    %4 = call noundef i64 @_ZNKSt16initializer_listIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    %5 = getelementptr inbounds i64, ptr %3, i64 %4
    ret ptr %5
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013TensorOptionsC2Ev(ptr noundef nonnull align 2 dereferenceable(7) %0) unnamed_addr #5 comdat align 2 {
  BB_189:
    call void asm sideeffect "# LLVM BB: BB_189", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 0
    call void @_ZN3c106DeviceC2ENS_10DeviceTypeEa(ptr noundef nonnull align 1 dereferenceable(2) %3, i8 noundef signext 0, i8 noundef signext -1)
    %4 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 1
    %5 = call i16 @_ZN6caffe28TypeMeta4MakeIfEES0_v()
    %6 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %4, i32 0, i32 0
    store i16 %5, ptr %6, align 2
    %7 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 2
    store i8 0, ptr %7, align 2
    %8 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 3
    store i8 0, ptr %8, align 1
    %9 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %10 = load i8, ptr %9, align 2
    %11 = and i8 %10, -2
    %12 = or i8 %11, 0
    store i8 %12, ptr %9, align 2
    %13 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %14 = load i8, ptr %13, align 2
    %15 = and i8 %14, -3
    %16 = or i8 %15, 0
    store i8 %16, ptr %13, align 2
    %17 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %18 = load i8, ptr %17, align 2
    %19 = and i8 %18, -5
    %20 = or i8 %19, 0
    store i8 %20, ptr %17, align 2
    %21 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %22 = load i8, ptr %21, align 2
    %23 = and i8 %22, -9
    %24 = or i8 %23, 0
    store i8 %24, ptr %21, align 2
    %25 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %26 = load i8, ptr %25, align 2
    %27 = and i8 %26, -17
    %28 = or i8 %27, 0
    store i8 %28, ptr %25, align 2
    %29 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %30 = load i8, ptr %29, align 2
    %31 = and i8 %30, -33
    %32 = or i8 %31, 0
    store i8 %32, ptr %29, align 2
    %33 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %34 = load i8, ptr %33, align 2
    %35 = and i8 %34, -65
    %36 = or i8 %35, 0
    store i8 %36, ptr %33, align 2
    %37 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %2, i32 0, i32 4
    %38 = load i8, ptr %37, align 2
    %39 = and i8 %38, 127
    %40 = or i8 %39, 0
    store i8 %40, ptr %37, align 2
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions5dtypeENS_8optionalIN6caffe28TypeMetaEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i32 %1) local_unnamed_addr #3 comdat align 2 {
  BB_190:
    call void asm sideeffect "# LLVM BB: BB_190", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca %"class.c10::optional.54", align 2
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::optional.54", align 2
    %6 = getelementptr inbounds %"class.c10::optional.54", ptr %3, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    store i32 %1, ptr %7, align 2
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = bitcast ptr %2 to ptr
    %10 = bitcast ptr %8 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %9, ptr align 2 %10, i64 8, i1 false)
    %11 = bitcast ptr %5 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %11, ptr align 2 %12, i64 4, i1 false)
    %13 = getelementptr inbounds %"class.c10::optional.54", ptr %5, i32 0, i32 0
    %14 = bitcast ptr %13 to ptr
    %15 = load i32, ptr %14, align 2
    call void @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalIN6caffe28TypeMetaEEE(ptr noundef nonnull align 2 dereferenceable(7) %2, i32 %15) #15
    %16 = bitcast ptr %2 to ptr
    %17 = load i64, ptr %16, align 2
    ret i64 %17
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108optionalIN6caffe28TypeMetaEEC2IS2_Lb0EEEOT_(ptr noundef nonnull align 2 dereferenceable(4) %0, ptr noundef nonnull align 2 dereferenceable(2) %1) unnamed_addr #5 comdat align 2 {
  BB_191:
    call void asm sideeffect "# LLVM BB: BB_191", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 2 dereferenceable(2) ptr @_ZSt7forwardIN6caffe28TypeMetaEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 2 dereferenceable(2) %6) #15
    call void @_ZN3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEEC2EOS2_(ptr noundef nonnull align 2 dereferenceable(4) %5, ptr noundef nonnull align 2 dereferenceable(2) %7)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions6deviceIJNS_6DeviceEEEES0_DpOT_(ptr noundef nonnull align 2 dereferenceable(7) %0, ptr noundef nonnull align 1 dereferenceable(2) %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_192:
    call void asm sideeffect "# LLVM BB: BB_192", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::optional.43", align 1
    %6 = alloca %"struct.c10::in_place_t", align 1
    %7 = alloca i24, align 4
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %8 = load ptr, ptr %3, align 8
    %9 = load ptr, ptr %4, align 8
    %10 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZSt7forwardIN3c106DeviceEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %9) #15
    invoke void @_ZN3c108optionalINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_(ptr noundef nonnull align 1 dereferenceable(3) %5, ptr noundef nonnull align 1 dereferenceable(2) %10)
            to label %BB_193 unwind label %BB_194
  
  BB_193:                                           ; preds = %BB_192
    call void asm sideeffect "# LLVM BB: BB_193", ""()
    %11 = getelementptr inbounds %"class.c10::optional.43", ptr %5, i32 0, i32 0
    %12 = bitcast ptr %7 to ptr
    %13 = bitcast ptr %11 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 4 %12, ptr align 1 %13, i64 3, i1 false)
    %14 = load i24, ptr %7, align 4
    %15 = call i64 @_ZNK3c1013TensorOptions6deviceENS_8optionalINS_6DeviceEEE(ptr noundef nonnull align 2 dereferenceable(7) %8, i24 %14) #15
    %16 = bitcast ptr %2 to ptr
    store i64 %15, ptr %16, align 2
    %17 = bitcast ptr %2 to ptr
    %18 = load i64, ptr %17, align 2
    ret i64 %18
  
  BB_194:                                           ; preds = %BB_192
    %19 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_194", ""()
    %20 = extractvalue { ptr, i32 } %19, 0
    call void @__clang_call_terminate(ptr %20) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK2at10TensorBase6deviceEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_195:
    call void asm sideeffect "# LLVM BB: BB_195", ""()
    %1 = alloca %"struct.c10::Device", align 1
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"class.at::TensorBase", ptr %3, i32 0, i32 0
    %5 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    %6 = call i16 @_ZNK3c1010TensorImpl6deviceEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %7 = bitcast ptr %1 to ptr
    store i16 %6, ptr %7, align 1
    %8 = bitcast ptr %1 to ptr
    %9 = load i16, ptr %8, align 1
    ret i16 %9
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions6layoutENS_8optionalINS_6LayoutEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 {
  BB_196:
    call void asm sideeffect "# LLVM BB: BB_196", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca %"class.c10::optional.57", align 1
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::optional.57", align 1
    %6 = getelementptr inbounds %"class.c10::optional.57", ptr %3, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    store i16 %1, ptr %7, align 1
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = bitcast ptr %2 to ptr
    %10 = bitcast ptr %8 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %9, ptr align 2 %10, i64 8, i1 false)
    %11 = bitcast ptr %5 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %11, ptr align 1 %12, i64 2, i1 false)
    %13 = getelementptr inbounds %"class.c10::optional.57", ptr %5, i32 0, i32 0
    %14 = bitcast ptr %13 to ptr
    %15 = load i16, ptr %14, align 1
    call void @_ZNR3c1013TensorOptions10set_layoutENS_8optionalINS_6LayoutEEE(ptr noundef nonnull align 2 dereferenceable(7) %2, i16 %15) #15
    %16 = bitcast ptr %2 to ptr
    %17 = load i64, ptr %16, align 2
    ret i64 %17
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef signext i8 @_ZNK2at10TensorBase6layoutEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_197:
    call void asm sideeffect "# LLVM BB: BB_197", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.at::TensorBase", ptr %2, i32 0, i32 0
    %4 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    %5 = call noundef signext i8 @_ZNK3c1010TensorImpl6layoutEv(ptr noundef nonnull align 8 dereferenceable(192) %4)
    ret i8 %5
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108optionalINS_6LayoutEEC2IS1_Lb0EEEOT_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_198:
    call void asm sideeffect "# LLVM BB: BB_198", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIN3c106LayoutEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    call void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEEC2EOS1_(ptr noundef nonnull align 1 dereferenceable(2) %5, ptr noundef nonnull align 1 dereferenceable(1) %7)
    ret void
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106DeviceC2ENS_10DeviceTypeEa(ptr noundef nonnull align 1 dereferenceable(2) %0, i8 noundef signext %1, i8 noundef signext %2) unnamed_addr #5 comdat align 2 {
  BB_199:
    call void asm sideeffect "# LLVM BB: BB_199", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i8, align 1
    %5 = alloca i8, align 1
    store ptr %0, ptr %3, align 8
    store i8 %1, ptr %4, align 1
    store i8 %2, ptr %5, align 1
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"struct.c10::Device", ptr %6, i32 0, i32 0
    %8 = load i8, ptr %4, align 1
    store i8 %8, ptr %7, align 1
    %9 = getelementptr inbounds %"struct.c10::Device", ptr %6, i32 0, i32 1
    %10 = load i8, ptr %5, align 1
    store i8 %10, ptr %9, align 1
    call void @_ZN3c106Device8validateEv(ptr noundef nonnull align 1 dereferenceable(2) %6)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i16 @_ZN6caffe28TypeMeta4MakeIfEES0_v() local_unnamed_addr #3 comdat align 2 {
  BB_200:
    call void asm sideeffect "# LLVM BB: BB_200", ""()
    %0 = alloca %"class.caffe2::TypeMeta", align 2
    %1 = call noundef zeroext i16 @_ZN6caffe28TypeMeta13_typeMetaDataIfEEtv() #15
    call void @_ZN6caffe28TypeMetaC2Et(ptr noundef nonnull align 2 dereferenceable(2) %0, i16 noundef zeroext %1) #15
    %2 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %0, i32 0, i32 0
    %3 = load i16, ptr %2, align 2
    ret i16 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106Device8validateEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_201:
    call void asm sideeffect "# LLVM BB: BB_201", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.std::__cxx11::basic_string", align 8
    %3 = alloca i32, align 4
    %4 = alloca ptr, align 8
    %5 = alloca i32, align 4
    %6 = alloca %"class.std::__cxx11::basic_string", align 8
    %7 = alloca i32, align 4
    store ptr %0, ptr %1, align 8
    %8 = load ptr, ptr %1, align 8
    %9 = getelementptr inbounds %"struct.c10::Device", ptr %8, i32 0, i32 1
    %10 = load i8, ptr %9, align 1
    %11 = sext i8 %10 to i32
    %12 = icmp sge i32 %11, -1
    %13 = xor i1 %12, true
    br i1 %13, label %BB_202, label %BB_205
  
  BB_202:                                           ; preds = %BB_201
    call void asm sideeffect "# LLVM BB: BB_202", ""()
    %14 = getelementptr inbounds %"struct.c10::Device", ptr %8, i32 0, i32 1
    %15 = load i8, ptr %14, align 1
    %16 = sext i8 %15 to i32
    store i32 %16, ptr %3, align 4
    call void @_ZN3c103strIJA46_ciEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %2, ptr noundef nonnull align 1 dereferenceable(46) @.str.24, ptr noundef nonnull align 4 dereferenceable(4) %3)
    invoke void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN3c106Device8validateEv, ptr noundef @.str.22, i32 noundef 179, ptr noundef @.str.23, ptr noundef nonnull align 8 dereferenceable(32) %2) #14
            to label %BB_203 unwind label %BB_204
  
  BB_203:                                           ; preds = %BB_202
    call void asm sideeffect "# LLVM BB: BB_203", ""()
    unreachable
  
  BB_204:                                           ; preds = %BB_202
    %17 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_204", ""()
    %18 = extractvalue { ptr, i32 } %17, 0
    store ptr %18, ptr %4, align 8
    %19 = extractvalue { ptr, i32 } %17, 1
    store i32 %19, ptr %5, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %2) #15
    br label %BB_212
  
  BB_205:                                           ; preds = %BB_201
    call void asm sideeffect "# LLVM BB: BB_205", ""()
    %20 = call noundef zeroext i1 @_ZNK3c106Device6is_cpuEv(ptr noundef nonnull align 1 dereferenceable(2) %8) #15
    br i1 %20, label %BB_206, label %BB_207
  
  BB_206:                                           ; preds = %BB_205
    call void asm sideeffect "# LLVM BB: BB_206", ""()
    %21 = getelementptr inbounds %"struct.c10::Device", ptr %8, i32 0, i32 1
    %22 = load i8, ptr %21, align 1
    %23 = sext i8 %22 to i32
    %24 = icmp sle i32 %23, 0
    br label %BB_207
  
  BB_207:                                           ; preds = %BB_206, %BB_205
    %25 = phi i1 [ true, %BB_205 ], [ %24, %BB_206 ]
    call void asm sideeffect "# LLVM BB: BB_207", ""()
    %26 = xor i1 %25, true
    br i1 %26, label %BB_208, label %BB_211
  
  BB_208:                                           ; preds = %BB_207
    call void asm sideeffect "# LLVM BB: BB_208", ""()
    %27 = getelementptr inbounds %"struct.c10::Device", ptr %8, i32 0, i32 1
    %28 = load i8, ptr %27, align 1
    %29 = sext i8 %28 to i32
    store i32 %29, ptr %7, align 4
    call void @_ZN3c103strIJA42_ciEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %6, ptr noundef nonnull align 1 dereferenceable(42) @.str.26, ptr noundef nonnull align 4 dereferenceable(4) %7)
    invoke void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN3c106Device8validateEv, ptr noundef @.str.22, i32 noundef 183, ptr noundef @.str.25, ptr noundef nonnull align 8 dereferenceable(32) %6) #14
            to label %BB_209 unwind label %BB_210
  
  BB_209:                                           ; preds = %BB_208
    call void asm sideeffect "# LLVM BB: BB_209", ""()
    unreachable
  
  BB_210:                                           ; preds = %BB_208
    %30 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_210", ""()
    %31 = extractvalue { ptr, i32 } %30, 0
    store ptr %31, ptr %4, align 8
    %32 = extractvalue { ptr, i32 } %30, 1
    store i32 %32, ptr %5, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %6) #15
    br label %BB_212
  
  BB_211:                                           ; preds = %BB_207
    call void asm sideeffect "# LLVM BB: BB_211", ""()
    ret void
  
  BB_212:                                           ; preds = %BB_210, %BB_204
    call void asm sideeffect "# LLVM BB: BB_212", ""()
    %33 = load ptr, ptr %4, align 8
    call void @_Unwind_Resume(ptr %33) #14
    unreachable
  }
  
  ; Function Attrs: noreturn
  declare void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef, ptr noundef, i32 noundef, ptr noundef, ptr noundef nonnull align 8 dereferenceable(32)) local_unnamed_addr #1
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA46_ciEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(46) %1, ptr noundef nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  BB_213:
    call void asm sideeffect "# LLVM BB: BB_213", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = bitcast ptr %0 to ptr
    store ptr %7, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds [46 x i8], ptr %8, i64 0, i64 0
    store ptr %9, ptr %6, align 8
    %10 = load ptr, ptr %5, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 4 dereferenceable(4) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c106Device6is_cpuEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_214:
    call void asm sideeffect "# LLVM BB: BB_214", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::Device", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 1
    %5 = icmp eq i8 %4, 0
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA42_ciEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(42) %1, ptr noundef nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  BB_215:
    call void asm sideeffect "# LLVM BB: BB_215", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = bitcast ptr %0 to ptr
    store ptr %7, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds [42 x i8], ptr %8, i64 0, i64 0
    store ptr %9, ptr %6, align 8
    %10 = load ptr, ptr %5, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 4 dereferenceable(4) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_216:
    call void asm sideeffect "# LLVM BB: BB_216", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = bitcast ptr %0 to ptr
    store ptr %9, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6)
    %10 = bitcast ptr %6 to ptr
    %11 = load ptr, ptr %4, align 8
    %12 = load ptr, ptr %5, align 8
    %13 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJiEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 4 dereferenceable(4) %12)
            to label %BB_217 unwind label %BB_219
  
  BB_217:                                           ; preds = %BB_216
    call void asm sideeffect "# LLVM BB: BB_217", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %6)
            to label %BB_218 unwind label %BB_219
  
  BB_218:                                           ; preds = %BB_217
    call void asm sideeffect "# LLVM BB: BB_218", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    ret void
  
  BB_219:                                           ; preds = %BB_217, %BB_216
    %14 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_219", ""()
    %15 = extractvalue { ptr, i32 } %14, 0
    store ptr %15, ptr %7, align 8
    %16 = extractvalue { ptr, i32 } %14, 1
    store i32 %16, ptr %8, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    br label %BB_220
  
  BB_220:                                           ; preds = %BB_219
    call void asm sideeffect "# LLVM BB: BB_220", ""()
    %17 = load ptr, ptr %7, align 8
    call void @_Unwind_Resume(ptr %17) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJiEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 4 dereferenceable(4) %2) local_unnamed_addr #0 comdat {
  BB_221:
    call void asm sideeffect "# LLVM BB: BB_221", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIiEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 4 dereferenceable(4) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i16 @_ZN6caffe28TypeMeta13_typeMetaDataIfEEtv() local_unnamed_addr #3 comdat align 2 {
  BB_222:
    call void asm sideeffect "# LLVM BB: BB_222", ""()
    ret i16 6
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN6caffe28TypeMetaC2Et(ptr noundef nonnull align 2 dereferenceable(2) %0, i16 noundef zeroext %1) unnamed_addr #4 comdat align 2 {
  BB_223:
    call void asm sideeffect "# LLVM BB: BB_223", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i16, align 2
    store ptr %0, ptr %2, align 8
    store i16 %1, ptr %3, align 2
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %4, i32 0, i32 0
    %6 = load i16, ptr %3, align 2
    store i16 %6, ptr %5, align 2
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalIN6caffe28TypeMetaEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i32 %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_224:
    call void asm sideeffect "# LLVM BB: BB_224", ""()
    %2 = alloca %"class.c10::optional.54", align 2
    %3 = alloca ptr, align 8
    %4 = getelementptr inbounds %"class.c10::optional.54", ptr %2, i32 0, i32 0
    %5 = bitcast ptr %4 to ptr
    store i32 %1, ptr %5, align 2
    store ptr %0, ptr %3, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef zeroext i1 @_ZNK3c108optionalIN6caffe28TypeMetaEEcvbEv(ptr noundef nonnull align 2 dereferenceable(4) %2) #15
    br i1 %7, label %BB_225, label %BB_227
  
  BB_225:                                           ; preds = %BB_224
    call void asm sideeffect "# LLVM BB: BB_225", ""()
    %8 = invoke noundef nonnull align 2 dereferenceable(2) ptr @_ZNR3c108optionalIN6caffe28TypeMetaEEdeEv(ptr noundef nonnull align 2 dereferenceable(4) %2)
            to label %BB_226 unwind label %BB_229
  
  BB_226:                                           ; preds = %BB_225
    call void asm sideeffect "# LLVM BB: BB_226", ""()
    %9 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 1
    %10 = bitcast ptr %9 to ptr
    %11 = bitcast ptr %8 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %10, ptr align 2 %11, i64 2, i1 false)
    %12 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %13 = load i8, ptr %12, align 2
    %14 = and i8 %13, -9
    %15 = or i8 %14, 8
    store i8 %15, ptr %12, align 2
    br label %BB_228
  
  BB_227:                                           ; preds = %BB_224
    call void asm sideeffect "# LLVM BB: BB_227", ""()
    %16 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %17 = load i8, ptr %16, align 2
    %18 = and i8 %17, -9
    %19 = or i8 %18, 0
    store i8 %19, ptr %16, align 2
    br label %BB_228
  
  BB_228:                                           ; preds = %BB_227, %BB_226
    call void asm sideeffect "# LLVM BB: BB_228", ""()
    ret void
  
  BB_229:                                           ; preds = %BB_225
    %20 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_229", ""()
    %21 = extractvalue { ptr, i32 } %20, 0
    call void @__clang_call_terminate(ptr %21) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalIN6caffe28TypeMetaEEcvbEv(ptr noundef nonnull align 2 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_230:
    call void asm sideeffect "# LLVM BB: BB_230", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv(ptr noundef nonnull align 2 dereferenceable(4) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 2 dereferenceable(2) ptr @_ZNR3c108optionalIN6caffe28TypeMetaEEdeEv(ptr noundef nonnull align 2 dereferenceable(4) %0) local_unnamed_addr #0 comdat align 2 {
  BB_231:
    call void asm sideeffect "# LLVM BB: BB_231", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv(ptr noundef nonnull align 2 dereferenceable(4) %2) #15
    br i1 %3, label %BB_232, label %BB_233
  
  BB_232:                                           ; preds = %BB_231
    call void asm sideeffect "# LLVM BB: BB_232", ""()
    br label %BB_234
  
  BB_233:                                           ; preds = %BB_231
    call void asm sideeffect "# LLVM BB: BB_233", ""()
    call void @__assert_fail(ptr noundef @.str.27, ptr noundef @.str.28, i32 noundef 753, ptr noundef @__PRETTY_FUNCTION__._ZNR3c108optionalIN6caffe28TypeMetaEEdeEv) #16
    unreachable
  
  BB_234:                                           ; preds = %BB_232
    call void asm sideeffect "# LLVM BB: BB_234", ""()
    %4 = call noundef nonnull align 2 dereferenceable(2) ptr @_ZNR3c108optionalIN6caffe28TypeMetaEE13contained_valEv(ptr noundef nonnull align 2 dereferenceable(4) %2)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv(ptr noundef nonnull align 2 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_235:
    call void asm sideeffect "# LLVM BB: BB_235", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEE11initializedEv(ptr noundef nonnull align 2 dereferenceable(4) %3) #15
    ret i1 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEE11initializedEv(ptr noundef nonnull align 2 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_236:
    call void asm sideeffect "# LLVM BB: BB_236", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.55", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 2
    %5 = trunc i8 %4 to i1
    ret i1 %5
  }
  
  ; Function Attrs: noreturn nounwind
  declare void @__assert_fail(ptr noundef, ptr noundef, i32 noundef, ptr noundef) local_unnamed_addr #8
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 2 dereferenceable(2) ptr @_ZNR3c108optionalIN6caffe28TypeMetaEE13contained_valEv(ptr noundef nonnull align 2 dereferenceable(4) %0) local_unnamed_addr #3 comdat align 2 {
  BB_237:
    call void asm sideeffect "# LLVM BB: BB_237", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.55", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 2 dereferenceable(2) ptr @_ZSt7forwardIN6caffe28TypeMetaEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #3 comdat {
  BB_238:
    call void asm sideeffect "# LLVM BB: BB_238", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEEC2EOS2_(ptr noundef nonnull align 2 dereferenceable(4) %0, ptr noundef nonnull align 2 dereferenceable(2) %1) unnamed_addr #5 comdat align 2 {
  BB_239:
    call void asm sideeffect "# LLVM BB: BB_239", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.55", ptr %4, i32 0, i32 0
    store i8 1, ptr %5, align 2
    %6 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.55", ptr %4, i32 0, i32 1
    %7 = load ptr, ptr %3, align 8
    %8 = call noundef nonnull align 2 dereferenceable(2) ptr @_ZN3c1014constexpr_moveIRN6caffe28TypeMetaEEEONSt16remove_referenceIT_E4typeEOS5_(ptr noundef nonnull align 2 dereferenceable(2) %7) #15
    call void @_ZN3c1019constexpr_storage_tIN6caffe28TypeMetaEEC2IJS2_EEEDpOT_(ptr noundef nonnull align 2 dereferenceable(2) %6, ptr noundef nonnull align 2 dereferenceable(2) %8)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 2 dereferenceable(2) ptr @_ZN3c1014constexpr_moveIRN6caffe28TypeMetaEEEONSt16remove_referenceIT_E4typeEOS5_(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #3 comdat {
  BB_240:
    call void asm sideeffect "# LLVM BB: BB_240", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1019constexpr_storage_tIN6caffe28TypeMetaEEC2IJS2_EEEDpOT_(ptr noundef nonnull align 2 dereferenceable(2) %0, ptr noundef nonnull align 2 dereferenceable(2) %1) unnamed_addr #4 comdat align 2 {
  BB_241:
    call void asm sideeffect "# LLVM BB: BB_241", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 2 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardIN6caffe28TypeMetaEEEOT_RNSt16remove_referenceIS3_E4typeE(ptr noundef nonnull align 2 dereferenceable(2) %6) #15
    %8 = bitcast ptr %5 to ptr
    %9 = bitcast ptr %7 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %8, ptr align 2 %9, i64 2, i1 false)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 2 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardIN6caffe28TypeMetaEEEOT_RNSt16remove_referenceIS3_E4typeE(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #3 comdat {
  BB_242:
    call void asm sideeffect "# LLVM BB: BB_242", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013TensorOptions6deviceENS_8optionalINS_6DeviceEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i24 %1) local_unnamed_addr #3 comdat align 2 {
  BB_243:
    call void asm sideeffect "# LLVM BB: BB_243", ""()
    %2 = alloca %"struct.c10::TensorOptions", align 2
    %3 = alloca %"class.c10::optional.43", align 1
    %4 = alloca i24, align 4
    %5 = alloca ptr, align 8
    %6 = alloca %"class.c10::optional.43", align 1
    %7 = alloca i24, align 4
    %8 = getelementptr inbounds %"class.c10::optional.43", ptr %3, i32 0, i32 0
    store i24 %1, ptr %4, align 4
    %9 = bitcast ptr %8 to ptr
    %10 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %9, ptr align 4 %10, i64 3, i1 false)
    store ptr %0, ptr %5, align 8
    %11 = load ptr, ptr %5, align 8
    %12 = bitcast ptr %2 to ptr
    %13 = bitcast ptr %11 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %12, ptr align 2 %13, i64 8, i1 false)
    %14 = bitcast ptr %6 to ptr
    %15 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %14, ptr align 1 %15, i64 3, i1 false)
    %16 = getelementptr inbounds %"class.c10::optional.43", ptr %6, i32 0, i32 0
    %17 = bitcast ptr %7 to ptr
    %18 = bitcast ptr %16 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 4 %17, ptr align 1 %18, i64 3, i1 false)
    %19 = load i24, ptr %7, align 4
    call void @_ZNR3c1013TensorOptions10set_deviceENS_8optionalINS_6DeviceEEE(ptr noundef nonnull align 2 dereferenceable(7) %2, i24 %19) #15
    %20 = bitcast ptr %2 to ptr
    %21 = load i64, ptr %20, align 2
    ret i64 %21
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZSt7forwardIN3c106DeviceEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat {
  BB_244:
    call void asm sideeffect "# LLVM BB: BB_244", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108optionalINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_(ptr noundef nonnull align 1 dereferenceable(3) %0, ptr noundef nonnull align 1 dereferenceable(2) %1) unnamed_addr #5 comdat align 2 {
  BB_245:
    call void asm sideeffect "# LLVM BB: BB_245", ""()
    %2 = alloca %"struct.c10::in_place_t", align 1
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"struct.c10::in_place_t", align 1
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %6 to ptr
    %8 = load ptr, ptr %4, align 8
    %9 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %8) #15
    call void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_(ptr noundef nonnull align 1 dereferenceable(3) %7, ptr noundef nonnull align 1 dereferenceable(2) %9)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNR3c1013TensorOptions10set_deviceENS_8optionalINS_6DeviceEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i24 %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_246:
    call void asm sideeffect "# LLVM BB: BB_246", ""()
    %2 = alloca %"class.c10::optional.43", align 1
    %3 = alloca i24, align 4
    %4 = alloca ptr, align 8
    %5 = getelementptr inbounds %"class.c10::optional.43", ptr %2, i32 0, i32 0
    store i24 %1, ptr %3, align 4
    %6 = bitcast ptr %5 to ptr
    %7 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %6, ptr align 4 %7, i64 3, i1 false)
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEEcvbEv(ptr noundef nonnull align 1 dereferenceable(3) %2) #15
    br i1 %9, label %BB_247, label %BB_249
  
  BB_247:                                           ; preds = %BB_246
    call void asm sideeffect "# LLVM BB: BB_247", ""()
    %10 = invoke noundef nonnull align 1 dereferenceable(2) ptr @_ZNR3c108optionalINS_6DeviceEEdeEv(ptr noundef nonnull align 1 dereferenceable(3) %2)
            to label %BB_248 unwind label %BB_251
  
  BB_248:                                           ; preds = %BB_247
    call void asm sideeffect "# LLVM BB: BB_248", ""()
    %11 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %8, i32 0, i32 0
    %12 = bitcast ptr %11 to ptr
    %13 = bitcast ptr %10 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %12, ptr align 1 %13, i64 2, i1 false)
    %14 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %8, i32 0, i32 4
    %15 = load i8, ptr %14, align 2
    %16 = and i8 %15, -5
    %17 = or i8 %16, 4
    store i8 %17, ptr %14, align 2
    br label %BB_250
  
  BB_249:                                           ; preds = %BB_246
    call void asm sideeffect "# LLVM BB: BB_249", ""()
    %18 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %8, i32 0, i32 4
    %19 = load i8, ptr %18, align 2
    %20 = and i8 %19, -5
    %21 = or i8 %20, 0
    store i8 %21, ptr %18, align 2
    br label %BB_250
  
  BB_250:                                           ; preds = %BB_249, %BB_248
    call void asm sideeffect "# LLVM BB: BB_250", ""()
    ret void
  
  BB_251:                                           ; preds = %BB_247
    %22 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_251", ""()
    %23 = extractvalue { ptr, i32 } %22, 0
    call void @__clang_call_terminate(ptr %23) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEEcvbEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_252:
    call void asm sideeffect "# LLVM BB: BB_252", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZNR3c108optionalINS_6DeviceEEdeEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #0 comdat align 2 {
  BB_253:
    call void asm sideeffect "# LLVM BB: BB_253", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %2) #15
    br i1 %3, label %BB_254, label %BB_255
  
  BB_254:                                           ; preds = %BB_253
    call void asm sideeffect "# LLVM BB: BB_254", ""()
    br label %BB_256
  
  BB_255:                                           ; preds = %BB_253
    call void asm sideeffect "# LLVM BB: BB_255", ""()
    call void @__assert_fail(ptr noundef @.str.27, ptr noundef @.str.28, i32 noundef 753, ptr noundef @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6DeviceEEdeEv) #16
    unreachable
  
  BB_256:                                           ; preds = %BB_254
    call void asm sideeffect "# LLVM BB: BB_256", ""()
    %4 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZNR3c108optionalINS_6DeviceEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(3) %2)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_257:
    call void asm sideeffect "# LLVM BB: BB_257", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %3) #15
    ret i1 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_258:
    call void asm sideeffect "# LLVM BB: BB_258", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 1
    %5 = trunc i8 %4 to i1
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZNR3c108optionalINS_6DeviceEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_259:
    call void asm sideeffect "# LLVM BB: BB_259", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat {
  BB_260:
    call void asm sideeffect "# LLVM BB: BB_260", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_(ptr noundef nonnull align 1 dereferenceable(3) %0, ptr noundef nonnull align 1 dereferenceable(2) %1) unnamed_addr #5 comdat align 2 {
  BB_261:
    call void asm sideeffect "# LLVM BB: BB_261", ""()
    %2 = alloca %"struct.c10::in_place_t", align 1
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base", ptr %5, i32 0, i32 0
    store i8 1, ptr %6, align 1
    %7 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base", ptr %5, i32 0, i32 1
    %8 = load ptr, ptr %4, align 8
    %9 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %8) #15
    call void @_ZN3c1019constexpr_storage_tINS_6DeviceEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(2) %7, ptr noundef nonnull align 1 dereferenceable(2) %9)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1019constexpr_storage_tINS_6DeviceEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(2) %1) unnamed_addr #4 comdat align 2 {
  BB_262:
    call void asm sideeffect "# LLVM BB: BB_262", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(2) %6) #15
    %8 = bitcast ptr %5 to ptr
    %9 = bitcast ptr %7 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %8, ptr align 1 %9, i64 2, i1 false)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK3c1010TensorImpl6deviceEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_263:
    call void asm sideeffect "# LLVM BB: BB_263", ""()
    %1 = alloca %"struct.c10::Device", align 1
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 11
    %5 = bitcast ptr %4 to ptr
    %6 = load i24, ptr %5, align 1
    %7 = lshr i24 %6, 15
    %8 = and i24 %7, 1
    %9 = trunc i24 %8 to i1
    br i1 %9, label %BB_264, label %BB_265
  
  BB_264:                                           ; preds = %BB_263
    call void asm sideeffect "# LLVM BB: BB_264", ""()
    %10 = bitcast ptr %3 to ptr
    %11 = load ptr, ptr %10, align 8
    %12 = getelementptr inbounds ptr, ptr %11, i64 13
    %13 = load ptr, ptr %12, align 8
    %14 = call i16 %13(ptr noundef nonnull align 8 dereferenceable(192) %3)
    %15 = bitcast ptr %1 to ptr
    store i16 %14, ptr %15, align 1
    br label %BB_266
  
  BB_265:                                           ; preds = %BB_263
    call void asm sideeffect "# LLVM BB: BB_265", ""()
    %16 = call i16 @_ZNK3c1010TensorImpl14device_defaultEv(ptr noundef nonnull align 8 dereferenceable(192) %3)
    %17 = bitcast ptr %1 to ptr
    store i16 %16, ptr %17, align 1
    br label %BB_266
  
  BB_266:                                           ; preds = %BB_265, %BB_264
    call void asm sideeffect "# LLVM BB: BB_266", ""()
    %18 = bitcast ptr %1 to ptr
    %19 = load i16, ptr %18, align 1
    ret i16 %19
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK3c1010TensorImpl14device_defaultEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_267:
    call void asm sideeffect "# LLVM BB: BB_267", ""()
    %1 = alloca %"struct.c10::Device", align 1
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 10
    %5 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE9has_valueEv(ptr noundef nonnull align 1 dereferenceable(3) %4) #15
    %6 = xor i1 %5, true
    br i1 %6, label %BB_268, label %BB_269
  
  BB_268:                                           ; preds = %BB_267
    call void asm sideeffect "# LLVM BB: BB_268", ""()
    %7 = call noundef ptr @_ZN3c106detail17torchCheckMsgImplEPKcS2_(ptr noundef @.str.30, ptr noundef @.str.31)
    call void @_ZN3c106detail14torchCheckFailEPKcS2_jS2_(ptr noundef @__func__._ZNK3c1010TensorImpl14device_defaultEv, ptr noundef @.str.29, i32 noundef 1243, ptr noundef %7) #14
    unreachable
  
  BB_269:                                           ; preds = %BB_267
    call void asm sideeffect "# LLVM BB: BB_269", ""()
    %8 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 10
    %9 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZNKR3c108optionalINS_6DeviceEEdeEv(ptr noundef nonnull align 1 dereferenceable(3) %8)
    %10 = bitcast ptr %1 to ptr
    %11 = bitcast ptr %9 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 1 %10, ptr align 1 %11, i64 2, i1 false)
    %12 = bitcast ptr %1 to ptr
    %13 = load i16, ptr %12, align 1
    ret i16 %13
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE9has_valueEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_270:
    call void asm sideeffect "# LLVM BB: BB_270", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZNKR3c108optionalINS_6DeviceEEdeEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #0 comdat align 2 {
  BB_271:
    call void asm sideeffect "# LLVM BB: BB_271", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %class.anon, align 1
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = call noundef zeroext i1 @_ZNK3c108optionalINS_6DeviceEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(3) %3) #15
    br i1 %4, label %BB_272, label %BB_273
  
  BB_272:                                           ; preds = %BB_271
    call void asm sideeffect "# LLVM BB: BB_272", ""()
    %5 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZNKR3c108optionalINS_6DeviceEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(3) %3)
    br label %BB_274
  
  BB_273:                                           ; preds = %BB_271
    call void asm sideeffect "# LLVM BB: BB_273", ""()
    call void @_ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv(ptr noundef nonnull align 1 dereferenceable(1) %2)
    %6 = call noundef nonnull align 1 dereferenceable(2) ptr @_ZNKR3c108optionalINS_6DeviceEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(3) %3)
    br label %BB_274
  
  BB_274:                                           ; preds = %BB_273, %BB_272
    %7 = phi ptr [ %5, %BB_272 ], [ %6, %BB_273 ]
    call void asm sideeffect "# LLVM BB: BB_274", ""()
    ret ptr %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(2) ptr @_ZNKR3c108optionalINS_6DeviceEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(3) %0) local_unnamed_addr #3 comdat align 2 {
  BB_275:
    call void asm sideeffect "# LLVM BB: BB_275", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat align 2 {
  BB_276:
    call void asm sideeffect "# LLVM BB: BB_276", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    call void @__assert_fail(ptr noundef @.str.32, ptr noundef @.str.28, i32 noundef 749, ptr noundef @__PRETTY_FUNCTION__._ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNR3c1013TensorOptions10set_layoutENS_8optionalINS_6LayoutEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_277:
    call void asm sideeffect "# LLVM BB: BB_277", ""()
    %2 = alloca %"class.c10::optional.57", align 1
    %3 = alloca ptr, align 8
    %4 = getelementptr inbounds %"class.c10::optional.57", ptr %2, i32 0, i32 0
    %5 = bitcast ptr %4 to ptr
    store i16 %1, ptr %5, align 1
    store ptr %0, ptr %3, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef zeroext i1 @_ZNK3c108optionalINS_6LayoutEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %7, label %BB_278, label %BB_280
  
  BB_278:                                           ; preds = %BB_277
    call void asm sideeffect "# LLVM BB: BB_278", ""()
    %8 = invoke noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_6LayoutEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
            to label %BB_279 unwind label %BB_282
  
  BB_279:                                           ; preds = %BB_278
    call void asm sideeffect "# LLVM BB: BB_279", ""()
    %9 = load i8, ptr %8, align 1
    %10 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 2
    store i8 %9, ptr %10, align 2
    %11 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %12 = load i8, ptr %11, align 2
    %13 = and i8 %12, -17
    %14 = or i8 %13, 16
    store i8 %14, ptr %11, align 2
    br label %BB_281
  
  BB_280:                                           ; preds = %BB_277
    call void asm sideeffect "# LLVM BB: BB_280", ""()
    %15 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %16 = load i8, ptr %15, align 2
    %17 = and i8 %16, -17
    %18 = or i8 %17, 0
    store i8 %18, ptr %15, align 2
    br label %BB_281
  
  BB_281:                                           ; preds = %BB_280, %BB_279
    call void asm sideeffect "# LLVM BB: BB_281", ""()
    ret void
  
  BB_282:                                           ; preds = %BB_278
    %19 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_282", ""()
    %20 = extractvalue { ptr, i32 } %19, 0
    call void @__clang_call_terminate(ptr %20) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_6LayoutEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_283:
    call void asm sideeffect "# LLVM BB: BB_283", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_6LayoutEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_6LayoutEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 {
  BB_284:
    call void asm sideeffect "# LLVM BB: BB_284", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_6LayoutEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %3, label %BB_285, label %BB_286
  
  BB_285:                                           ; preds = %BB_284
    call void asm sideeffect "# LLVM BB: BB_285", ""()
    br label %BB_287
  
  BB_286:                                           ; preds = %BB_284
    call void asm sideeffect "# LLVM BB: BB_286", ""()
    call void @__assert_fail(ptr noundef @.str.27, ptr noundef @.str.28, i32 noundef 753, ptr noundef @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6LayoutEEdeEv) #16
    unreachable
  
  BB_287:                                           ; preds = %BB_285
    call void asm sideeffect "# LLVM BB: BB_287", ""()
    %4 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_6LayoutEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_6LayoutEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_288:
    call void asm sideeffect "# LLVM BB: BB_288", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %3) #15
    ret i1 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_289:
    call void asm sideeffect "# LLVM BB: BB_289", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.58", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 1
    %5 = trunc i8 %4 to i1
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_6LayoutEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_290:
    call void asm sideeffect "# LLVM BB: BB_290", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.58", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef signext i8 @_ZNK3c1010TensorImpl6layoutEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_291:
    call void asm sideeffect "# LLVM BB: BB_291", ""()
    %1 = alloca i8, align 1
    %2 = alloca ptr, align 8
    %3 = alloca %"class.c10::DispatchKeySet", align 8
    %4 = alloca %"class.c10::DispatchKeySet", align 8
    %5 = alloca %"class.c10::DispatchKeySet", align 8
    store ptr %0, ptr %2, align 8
    %6 = load ptr, ptr %2, align 8
    %7 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %6, i32 0, i32 11
    %8 = bitcast ptr %7 to ptr
    %9 = load i24, ptr %8, align 1
    %10 = lshr i24 %9, 16
    %11 = and i24 %10, 1
    %12 = trunc i24 %11 to i1
    br i1 %12, label %BB_292, label %BB_293
  
  BB_292:                                           ; preds = %BB_291
    call void asm sideeffect "# LLVM BB: BB_292", ""()
    %13 = bitcast ptr %6 to ptr
    %14 = load ptr, ptr %13, align 8
    %15 = getelementptr inbounds ptr, ptr %14, i64 14
    %16 = load ptr, ptr %15, align 8
    %17 = call noundef signext i8 %16(ptr noundef nonnull align 8 dereferenceable(192) %6)
    store i8 %17, ptr %1, align 1
    br label %BB_302
  
  BB_293:                                           ; preds = %BB_291
    call void asm sideeffect "# LLVM BB: BB_293", ""()
    %18 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %18, ptr align 8 @__const._ZNK3c1010TensorImpl6layoutEv.sparse_and_sparsecsr_and_mkldnn_ks, i64 8, i1 false)
    %19 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %6, i32 0, i32 12
    %20 = bitcast ptr %4 to ptr
    %21 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %20, ptr align 8 %21, i64 8, i1 false)
    %22 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %4, i32 0, i32 0
    %23 = load i64, ptr %22, align 8
    %24 = call noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_anyES0_(ptr noundef nonnull align 8 dereferenceable(8) %19, i64 %23)
    br i1 %24, label %BB_295, label %BB_294
  
  BB_294:                                           ; preds = %BB_293
    call void asm sideeffect "# LLVM BB: BB_294", ""()
    store i8 0, ptr %1, align 1
    br label %BB_302
  
  BB_295:                                           ; preds = %BB_293
    call void asm sideeffect "# LLVM BB: BB_295", ""()
    %25 = call noundef zeroext i1 @_ZNK3c1010TensorImpl9is_sparseEv(ptr noundef nonnull align 8 dereferenceable(192) %6)
    br i1 %25, label %BB_296, label %BB_297
  
  BB_296:                                           ; preds = %BB_295
    call void asm sideeffect "# LLVM BB: BB_296", ""()
    store i8 1, ptr %1, align 1
    br label %BB_302
  
  BB_297:                                           ; preds = %BB_295
    call void asm sideeffect "# LLVM BB: BB_297", ""()
    %26 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %6, i32 0, i32 12
    %27 = bitcast ptr %5 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %27, ptr align 8 @_ZN3c10L13sparse_csr_ksE, i64 8, i1 false)
    %28 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %5, i32 0, i32 0
    %29 = load i64, ptr %28, align 8
    %30 = call noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_anyES0_(ptr noundef nonnull align 8 dereferenceable(8) %26, i64 %29)
    br i1 %30, label %BB_298, label %BB_299
  
  BB_298:                                           ; preds = %BB_297
    call void asm sideeffect "# LLVM BB: BB_298", ""()
    %31 = bitcast ptr %6 to ptr
    %32 = load ptr, ptr %31, align 8
    %33 = getelementptr inbounds ptr, ptr %32, i64 21
    %34 = load ptr, ptr %33, align 8
    %35 = call noundef signext i8 %34(ptr noundef nonnull align 8 dereferenceable(192) %6)
    store i8 %35, ptr %1, align 1
    br label %BB_302
  
  BB_299:                                           ; preds = %BB_297
    call void asm sideeffect "# LLVM BB: BB_299", ""()
    %36 = call noundef zeroext i1 @_ZNK3c1010TensorImpl9is_mkldnnEv(ptr noundef nonnull align 8 dereferenceable(192) %6)
    %37 = xor i1 %36, true
    br i1 %37, label %BB_300, label %BB_301
  
  BB_300:                                           ; preds = %BB_299
    call void asm sideeffect "# LLVM BB: BB_300", ""()
    %38 = call noundef ptr @_ZN3c103strIJA51_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(51) @.str.34)
    call void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_(ptr noundef @__func__._ZNK3c1010TensorImpl6layoutEv, ptr noundef @.str.29, i32 noundef 1279, ptr noundef @.str.33, ptr noundef %38) #14
    unreachable
  
  BB_301:                                           ; preds = %BB_299
    call void asm sideeffect "# LLVM BB: BB_301", ""()
    store i8 3, ptr %1, align 1
    br label %BB_302
  
  BB_302:                                           ; preds = %BB_301, %BB_298, %BB_296, %BB_294, %BB_292
    call void asm sideeffect "# LLVM BB: BB_302", ""()
    %39 = load i8, ptr %1, align 1
    ret i8 %39
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_anyES0_(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 %1) local_unnamed_addr #0 comdat align 2 {
  BB_303:
    call void asm sideeffect "# LLVM BB: BB_303", ""()
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::DispatchKeySet", align 8
    %5 = alloca %"class.c10::DispatchKeySet", align 8
    %6 = alloca %"class.c10::DispatchKeySet", align 8
    %7 = alloca %"class.std::initializer_list.60", align 8
    %8 = alloca [4 x i16], align 2
    %9 = alloca %"class.c10::DispatchKeySet", align 8
    %10 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    %11 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    %12 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    store i64 %1, ptr %12, align 8
    store ptr %0, ptr %3, align 8
    %13 = load ptr, ptr %3, align 8
    %14 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %15 = load i64, ptr %14, align 8
    %16 = and i64 %15, 32767
    %17 = icmp eq i64 %16, 0
    br i1 %17, label %BB_305, label %BB_304
  
  BB_304:                                           ; preds = %BB_303
    call void asm sideeffect "# LLVM BB: BB_304", ""()
    %18 = getelementptr inbounds [4 x i16], ptr %8, i64 0, i64 0
    store i16 1, ptr %18, align 2
    %19 = getelementptr inbounds i16, ptr %18, i64 1
    store i16 6, ptr %19, align 2
    %20 = getelementptr inbounds i16, ptr %19, i64 1
    store i16 9, ptr %20, align 2
    %21 = getelementptr inbounds i16, ptr %20, i64 1
    store i16 24, ptr %21, align 2
    %22 = getelementptr inbounds %"class.std::initializer_list.60", ptr %7, i32 0, i32 0
    %23 = getelementptr inbounds [4 x i16], ptr %8, i64 0, i64 0
    store ptr %23, ptr %22, align 8
    %24 = getelementptr inbounds %"class.std::initializer_list.60", ptr %7, i32 0, i32 1
    store i64 4, ptr %24, align 8
    %25 = bitcast ptr %7 to ptr
    %26 = getelementptr inbounds { ptr, i64 }, ptr %25, i32 0, i32 0
    %27 = load ptr, ptr %26, align 8
    %28 = getelementptr inbounds { ptr, i64 }, ptr %25, i32 0, i32 1
    %29 = load i64, ptr %28, align 8
    call void @_ZN3c1014DispatchKeySetC2ESt16initializer_listINS_11DispatchKeyEE(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr %27, i64 %29)
    call void @_ZN3c1014DispatchKeySetC2Em(ptr noundef nonnull align 8 dereferenceable(8) %5, i64 noundef 274887376896)
    %30 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %5, i32 0, i32 0
    %31 = load i64, ptr %30, align 8
    %32 = call i64 @_ZNK3c1014DispatchKeySetanES0_(ptr noundef nonnull align 8 dereferenceable(8) %2, i64 %31)
    %33 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %4, i32 0, i32 0
    store i64 %32, ptr %33, align 8
    call void @_ZN3c1014DispatchKeySetC2Em(ptr noundef nonnull align 8 dereferenceable(8) %9, i64 noundef 0)
    %34 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    %35 = load i64, ptr %34, align 8
    %36 = call noundef zeroext i1 @_ZNK3c1014DispatchKeySeteqES0_(ptr noundef nonnull align 8 dereferenceable(8) %4, i64 %35)
    br label %BB_305
  
  BB_305:                                           ; preds = %BB_304, %BB_303
    %37 = phi i1 [ true, %BB_303 ], [ %36, %BB_304 ]
    call void asm sideeffect "# LLVM BB: BB_305", ""()
    %38 = xor i1 %37, true
    br i1 %38, label %BB_306, label %BB_307
  
  BB_306:                                           ; preds = %BB_305
    call void asm sideeffect "# LLVM BB: BB_306", ""()
    call void @_ZN3c103strIJEEEDcDpRKT_()
    call void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE(ptr noundef @__func__._ZNK3c1014DispatchKeySet7has_anyES0_, ptr noundef @.str.35, i32 noundef 302, ptr noundef @.str.36) #14
    unreachable
  
  BB_307:                                           ; preds = %BB_305
    call void asm sideeffect "# LLVM BB: BB_307", ""()
    %39 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %13, i32 0, i32 0
    %40 = load i64, ptr %39, align 8
    %41 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %42 = load i64, ptr %41, align 8
    %43 = and i64 %40, %42
    %44 = icmp ne i64 %43, 0
    ret i1 %44
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl9is_sparseEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_308:
    call void asm sideeffect "# LLVM BB: BB_308", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 12
    %5 = bitcast ptr %2 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 @_ZN3c10L9sparse_ksE, i64 8, i1 false)
    %6 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %7 = load i64, ptr %6, align 8
    %8 = call noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_allES0_(ptr noundef nonnull align 8 dereferenceable(8) %4, i64 %7)
    ret i1 %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl9is_mkldnnEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #3 comdat align 2 {
  BB_309:
    call void asm sideeffect "# LLVM BB: BB_309", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    store ptr %0, ptr %1, align 8
    %3 = load ptr, ptr %1, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 12
    %5 = bitcast ptr %2 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 @_ZN3c10L9mkldnn_ksE, i64 8, i1 false)
    %6 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %7 = load i64, ptr %6, align 8
    %8 = call noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_allES0_(ptr noundef nonnull align 8 dereferenceable(8) %4, i64 %7)
    ret i1 %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN3c103strIJA51_cEEEDcDpRKT_(ptr noundef nonnull align 1 dereferenceable(51) %0) local_unnamed_addr #3 comdat {
  BB_310:
    call void asm sideeffect "# LLVM BB: BB_310", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds [51 x i8], ptr %2, i64 0, i64 0
    %4 = call noundef ptr @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_(ptr noundef %3)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1014DispatchKeySetanES0_(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 %1) local_unnamed_addr #0 comdat align 2 {
  BB_311:
    call void asm sideeffect "# LLVM BB: BB_311", ""()
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    %3 = alloca %"class.c10::DispatchKeySet", align 8
    %4 = alloca ptr, align 8
    %5 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %3, i32 0, i32 0
    store i64 %1, ptr %5, align 8
    store ptr %0, ptr %4, align 8
    %6 = load ptr, ptr %4, align 8
    %7 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %6, i32 0, i32 0
    %8 = load i64, ptr %7, align 8
    %9 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %3, i32 0, i32 0
    %10 = load i64, ptr %9, align 8
    %11 = and i64 %8, %10
    call void @_ZN3c1014DispatchKeySetC2Em(ptr noundef nonnull align 8 dereferenceable(8) %2, i64 noundef %11)
    %12 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %13 = load i64, ptr %12, align 8
    ret i64 %13
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1014DispatchKeySetC2ESt16initializer_listINS_11DispatchKeyEE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr %1, i64 %2) unnamed_addr #5 comdat align 2 {
  BB_312:
    call void asm sideeffect "# LLVM BB: BB_312", ""()
    %3 = alloca %"class.std::initializer_list.60", align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"class.std::initializer_list.60", align 8
    %6 = bitcast ptr %3 to ptr
    %7 = getelementptr inbounds { ptr, i64 }, ptr %6, i32 0, i32 0
    store ptr %1, ptr %7, align 8
    %8 = getelementptr inbounds { ptr, i64 }, ptr %6, i32 0, i32 1
    store i64 %2, ptr %8, align 8
    store ptr %0, ptr %4, align 8
    %9 = load ptr, ptr %4, align 8
    %10 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    %11 = bitcast ptr %5 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %12, i64 16, i1 false)
    %13 = bitcast ptr %5 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    %15 = load ptr, ptr %14, align 8
    %16 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    %17 = load i64, ptr %16, align 8
    %18 = call noundef i64 @_ZN3c1014DispatchKeySet12keys_to_reprESt16initializer_listINS_11DispatchKeyEE(ptr noundef nonnull align 8 dereferenceable(8) %9, ptr %15, i64 %17)
    store i64 %18, ptr %10, align 8
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1014DispatchKeySetC2Em(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 noundef %1) unnamed_addr #4 comdat align 2 {
  BB_313:
    call void asm sideeffect "# LLVM BB: BB_313", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %4, i32 0, i32 0
    %6 = load i64, ptr %3, align 8
    store i64 %6, ptr %5, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1014DispatchKeySeteqES0_(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 %1) local_unnamed_addr #3 comdat align 2 {
  BB_314:
    call void asm sideeffect "# LLVM BB: BB_314", ""()
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    %3 = alloca ptr, align 8
    %4 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    store i64 %1, ptr %4, align 8
    store ptr %0, ptr %3, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %5, i32 0, i32 0
    %7 = load i64, ptr %6, align 8
    %8 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %9 = load i64, ptr %8, align 8
    %10 = icmp eq i64 %7, %9
    ret i1 %10
  }
  
  ; Function Attrs: mustprogress noinline noreturn optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE(ptr noundef %0, ptr noundef %1, i32 noundef %2, ptr noundef %3) local_unnamed_addr #9 comdat {
  BB_315:
    call void asm sideeffect "# LLVM BB: BB_315", ""()
    %4 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i32, align 4
    %8 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store i32 %2, ptr %7, align 4
    store ptr %3, ptr %8, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = load ptr, ptr %6, align 8
    %11 = load i32, ptr %7, align 4
    %12 = load ptr, ptr %8, align 8
    call void @_ZN3c106detail14torchCheckFailEPKcS2_jS2_(ptr noundef %9, ptr noundef %10, i32 noundef %11, ptr noundef %12) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJEEEDcDpRKT_() local_unnamed_addr #0 comdat {
  BB_316:
    call void asm sideeffect "# LLVM BB: BB_316", ""()
    %0 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    call void @_ZN3c106detail12_str_wrapperIJEE4callEv()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZN3c1014DispatchKeySet12keys_to_reprESt16initializer_listINS_11DispatchKeyEE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat align 2 {
  BB_317:
    call void asm sideeffect "# LLVM BB: BB_317", ""()
    %3 = alloca %"class.std::initializer_list.60", align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca i16, align 2
    %10 = alloca %"class.c10::DispatchKeySet", align 8
    %11 = bitcast ptr %3 to ptr
    %12 = getelementptr inbounds { ptr, i64 }, ptr %11, i32 0, i32 0
    store ptr %1, ptr %12, align 8
    %13 = getelementptr inbounds { ptr, i64 }, ptr %11, i32 0, i32 1
    store i64 %2, ptr %13, align 8
    store ptr %0, ptr %4, align 8
    %14 = load ptr, ptr %4, align 8
    store i64 0, ptr %5, align 8
    store ptr %3, ptr %6, align 8
    %15 = load ptr, ptr %6, align 8
    %16 = call noundef ptr @_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %15) #15
    store ptr %16, ptr %7, align 8
    %17 = load ptr, ptr %6, align 8
    %18 = call noundef ptr @_ZNKSt16initializer_listIN3c1011DispatchKeyEE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %17) #15
    store ptr %18, ptr %8, align 8
    br label %BB_318
  
  BB_318:                                           ; preds = %BB_320, %BB_317
    call void asm sideeffect "# LLVM BB: BB_318", ""()
    %19 = load ptr, ptr %7, align 8
    %20 = load ptr, ptr %8, align 8
    %21 = icmp ne ptr %19, %20
    br i1 %21, label %BB_319, label %BB_321
  
  BB_319:                                           ; preds = %BB_318
    call void asm sideeffect "# LLVM BB: BB_319", ""()
    %22 = load ptr, ptr %7, align 8
    %23 = load i16, ptr %22, align 2
    store i16 %23, ptr %9, align 2
    %24 = load i16, ptr %9, align 2
    call void @_ZN3c1014DispatchKeySetC2ENS_11DispatchKeyE(ptr noundef nonnull align 8 dereferenceable(8) %10, i16 noundef zeroext %24)
    %25 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %10, i32 0, i32 0
    %26 = load i64, ptr %25, align 8
    %27 = load i64, ptr %5, align 8
    %28 = or i64 %27, %26
    store i64 %28, ptr %5, align 8
    br label %BB_320
  
  BB_320:                                           ; preds = %BB_319
    call void asm sideeffect "# LLVM BB: BB_320", ""()
    %29 = load ptr, ptr %7, align 8
    %30 = getelementptr inbounds i16, ptr %29, i32 1
    store ptr %30, ptr %7, align 8
    br label %BB_318
  
  BB_321:                                           ; preds = %BB_318
    call void asm sideeffect "# LLVM BB: BB_321", ""()
    %31 = load i64, ptr %5, align 8
    ret i64 %31
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_322:
    call void asm sideeffect "# LLVM BB: BB_322", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::initializer_list.60", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt16initializer_listIN3c1011DispatchKeyEE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_323:
    call void asm sideeffect "# LLVM BB: BB_323", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    %4 = call noundef i64 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %2) #15
    %5 = getelementptr inbounds i16, ptr %3, i64 %4
    ret ptr %5
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1014DispatchKeySetC2ENS_11DispatchKeyE(ptr noundef nonnull align 8 dereferenceable(8) %0, i16 noundef zeroext %1) unnamed_addr #5 comdat align 2 {
  BB_324:
    call void asm sideeffect "# LLVM BB: BB_324", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i16, align 2
    %4 = alloca i64, align 8
    %5 = alloca i16, align 2
    %6 = alloca i64, align 8
    %7 = alloca i8, align 1
    %8 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i16 %1, ptr %3, align 2
    %9 = load ptr, ptr %2, align 8
    %10 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    store i64 0, ptr %10, align 8
    %11 = load i16, ptr %3, align 2
    %12 = icmp eq i16 %11, 0
    br i1 %12, label %BB_325, label %BB_326
  
  BB_325:                                           ; preds = %BB_324
    call void asm sideeffect "# LLVM BB: BB_325", ""()
    %13 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    store i64 0, ptr %13, align 8
    br label %BB_336
  
  BB_326:                                           ; preds = %BB_324
    call void asm sideeffect "# LLVM BB: BB_326", ""()
    %14 = load i16, ptr %3, align 2
    %15 = icmp ule i16 %14, 47
    br i1 %15, label %BB_327, label %BB_328
  
  BB_327:                                           ; preds = %BB_326
    call void asm sideeffect "# LLVM BB: BB_327", ""()
    %16 = load i16, ptr %3, align 2
    %17 = trunc i16 %16 to i8
    %18 = zext i8 %17 to i32
    %19 = add nsw i32 15, %18
    %20 = sub nsw i32 %19, 1
    %21 = zext i32 %20 to i64
    %22 = shl i64 1, %21
    store i64 %22, ptr %4, align 8
    %23 = load i64, ptr %4, align 8
    %24 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    store i64 %23, ptr %24, align 8
    br label %BB_335
  
  BB_328:                                           ; preds = %BB_326
    call void asm sideeffect "# LLVM BB: BB_328", ""()
    %25 = load i16, ptr %3, align 2
    %26 = icmp ule i16 %25, 127
    br i1 %26, label %BB_329, label %BB_333
  
  BB_329:                                           ; preds = %BB_328
    call void asm sideeffect "# LLVM BB: BB_329", ""()
    %27 = load i16, ptr %3, align 2
    %28 = call noundef zeroext i16 @_ZN3c1018toFunctionalityKeyENS_11DispatchKeyE(i16 noundef zeroext %27)
    store i16 %28, ptr %5, align 2
    %29 = load i16, ptr %5, align 2
    %30 = trunc i16 %29 to i8
    %31 = zext i8 %30 to i32
    %32 = add nsw i32 15, %31
    %33 = sub nsw i32 %32, 1
    %34 = zext i32 %33 to i64
    %35 = shl i64 1, %34
    store i64 %35, ptr %6, align 8
    %36 = load i16, ptr %3, align 2
    %37 = call noundef zeroext i8 @_ZN3c1018toBackendComponentENS_11DispatchKeyE(i16 noundef zeroext %36)
    store i8 %37, ptr %7, align 1
    %38 = load i8, ptr %7, align 1
    %39 = icmp eq i8 %38, 0
    br i1 %39, label %BB_330, label %BB_331
  
  BB_330:                                           ; preds = %BB_329
    call void asm sideeffect "# LLVM BB: BB_330", ""()
    br label %BB_332
  
  BB_331:                                           ; preds = %BB_329
    call void asm sideeffect "# LLVM BB: BB_331", ""()
    %40 = load i8, ptr %7, align 1
    %41 = zext i8 %40 to i32
    %42 = sub nsw i32 %41, 1
    %43 = zext i32 %42 to i64
    %44 = shl i64 1, %43
    br label %BB_332
  
  BB_332:                                           ; preds = %BB_331, %BB_330
    %45 = phi i64 [ 0, %BB_330 ], [ %44, %BB_331 ]
    call void asm sideeffect "# LLVM BB: BB_332", ""()
    store i64 %45, ptr %8, align 8
    %46 = load i64, ptr %6, align 8
    %47 = load i64, ptr %8, align 8
    %48 = add i64 %46, %47
    %49 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    store i64 %48, ptr %49, align 8
    br label %BB_334
  
  BB_333:                                           ; preds = %BB_328
    call void asm sideeffect "# LLVM BB: BB_333", ""()
    %50 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %9, i32 0, i32 0
    store i64 0, ptr %50, align 8
    br label %BB_334
  
  BB_334:                                           ; preds = %BB_333, %BB_332
    call void asm sideeffect "# LLVM BB: BB_334", ""()
    br label %BB_335
  
  BB_335:                                           ; preds = %BB_334, %BB_327
    call void asm sideeffect "# LLVM BB: BB_335", ""()
    br label %BB_336
  
  BB_336:                                           ; preds = %BB_335, %BB_325
    call void asm sideeffect "# LLVM BB: BB_336", ""()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_337:
    call void asm sideeffect "# LLVM BB: BB_337", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::initializer_list.60", ptr %2, i32 0, i32 1
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i16 @_ZN3c1018toFunctionalityKeyENS_11DispatchKeyE(i16 noundef zeroext %0) local_unnamed_addr #3 comdat {
  BB_338:
    call void asm sideeffect "# LLVM BB: BB_338", ""()
    %1 = alloca i16, align 2
    %2 = alloca i16, align 2
    store i16 %0, ptr %2, align 2
    %3 = load i16, ptr %2, align 2
    %4 = icmp ule i16 %3, 47
    br i1 %4, label %BB_339, label %BB_340
  
  BB_339:                                           ; preds = %BB_338
    call void asm sideeffect "# LLVM BB: BB_339", ""()
    %5 = load i16, ptr %2, align 2
    store i16 %5, ptr %1, align 2
    br label %BB_351
  
  BB_340:                                           ; preds = %BB_338
    call void asm sideeffect "# LLVM BB: BB_340", ""()
    %6 = load i16, ptr %2, align 2
    %7 = icmp ule i16 %6, 63
    br i1 %7, label %BB_341, label %BB_342
  
  BB_341:                                           ; preds = %BB_340
    call void asm sideeffect "# LLVM BB: BB_341", ""()
    store i16 1, ptr %1, align 2
    br label %BB_351
  
  BB_342:                                           ; preds = %BB_340
    call void asm sideeffect "# LLVM BB: BB_342", ""()
    %8 = load i16, ptr %2, align 2
    %9 = icmp ule i16 %8, 79
    br i1 %9, label %BB_343, label %BB_344
  
  BB_343:                                           ; preds = %BB_342
    call void asm sideeffect "# LLVM BB: BB_343", ""()
    store i16 6, ptr %1, align 2
    br label %BB_351
  
  BB_344:                                           ; preds = %BB_342
    call void asm sideeffect "# LLVM BB: BB_344", ""()
    %10 = load i16, ptr %2, align 2
    %11 = icmp ule i16 %10, 95
    br i1 %11, label %BB_345, label %BB_346
  
  BB_345:                                           ; preds = %BB_344
    call void asm sideeffect "# LLVM BB: BB_345", ""()
    store i16 9, ptr %1, align 2
    br label %BB_351
  
  BB_346:                                           ; preds = %BB_344
    call void asm sideeffect "# LLVM BB: BB_346", ""()
    %12 = load i16, ptr %2, align 2
    %13 = icmp ule i16 %12, 111
    br i1 %13, label %BB_347, label %BB_348
  
  BB_347:                                           ; preds = %BB_346
    call void asm sideeffect "# LLVM BB: BB_347", ""()
    store i16 12, ptr %1, align 2
    br label %BB_351
  
  BB_348:                                           ; preds = %BB_346
    call void asm sideeffect "# LLVM BB: BB_348", ""()
    %14 = load i16, ptr %2, align 2
    %15 = icmp ule i16 %14, 127
    br i1 %15, label %BB_349, label %BB_350
  
  BB_349:                                           ; preds = %BB_348
    call void asm sideeffect "# LLVM BB: BB_349", ""()
    store i16 24, ptr %1, align 2
    br label %BB_351
  
  BB_350:                                           ; preds = %BB_348
    call void asm sideeffect "# LLVM BB: BB_350", ""()
    store i16 0, ptr %1, align 2
    br label %BB_351
  
  BB_351:                                           ; preds = %BB_350, %BB_349, %BB_347, %BB_345, %BB_343, %BB_341, %BB_339
    call void asm sideeffect "# LLVM BB: BB_351", ""()
    %16 = load i16, ptr %1, align 2
    ret i16 %16
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i8 @_ZN3c1018toBackendComponentENS_11DispatchKeyE(i16 noundef zeroext %0) local_unnamed_addr #3 comdat {
  BB_352:
    call void asm sideeffect "# LLVM BB: BB_352", ""()
    %1 = alloca i8, align 1
    %2 = alloca i16, align 2
    store i16 %0, ptr %2, align 2
    %3 = load i16, ptr %2, align 2
    %4 = icmp uge i16 %3, 48
    br i1 %4, label %BB_353, label %BB_355
  
  BB_353:                                           ; preds = %BB_352
    call void asm sideeffect "# LLVM BB: BB_353", ""()
    %5 = load i16, ptr %2, align 2
    %6 = icmp ule i16 %5, 63
    br i1 %6, label %BB_354, label %BB_355
  
  BB_354:                                           ; preds = %BB_353
    call void asm sideeffect "# LLVM BB: BB_354", ""()
    %7 = load i16, ptr %2, align 2
    %8 = trunc i16 %7 to i8
    %9 = zext i8 %8 to i32
    %10 = sub nsw i32 %9, 48
    %11 = trunc i32 %10 to i8
    store i8 %11, ptr %1, align 1
    br label %BB_368
  
  BB_355:                                           ; preds = %BB_353, %BB_352
    call void asm sideeffect "# LLVM BB: BB_355", ""()
    %12 = load i16, ptr %2, align 2
    %13 = icmp uge i16 %12, 64
    br i1 %13, label %BB_356, label %BB_358
  
  BB_356:                                           ; preds = %BB_355
    call void asm sideeffect "# LLVM BB: BB_356", ""()
    %14 = load i16, ptr %2, align 2
    %15 = icmp ule i16 %14, 79
    br i1 %15, label %BB_357, label %BB_358
  
  BB_357:                                           ; preds = %BB_356
    call void asm sideeffect "# LLVM BB: BB_357", ""()
    %16 = load i16, ptr %2, align 2
    %17 = trunc i16 %16 to i8
    %18 = zext i8 %17 to i32
    %19 = sub nsw i32 %18, 64
    %20 = trunc i32 %19 to i8
    store i8 %20, ptr %1, align 1
    br label %BB_368
  
  BB_358:                                           ; preds = %BB_356, %BB_355
    call void asm sideeffect "# LLVM BB: BB_358", ""()
    %21 = load i16, ptr %2, align 2
    %22 = icmp uge i16 %21, 80
    br i1 %22, label %BB_359, label %BB_361
  
  BB_359:                                           ; preds = %BB_358
    call void asm sideeffect "# LLVM BB: BB_359", ""()
    %23 = load i16, ptr %2, align 2
    %24 = icmp ule i16 %23, 95
    br i1 %24, label %BB_360, label %BB_361
  
  BB_360:                                           ; preds = %BB_359
    call void asm sideeffect "# LLVM BB: BB_360", ""()
    %25 = load i16, ptr %2, align 2
    %26 = trunc i16 %25 to i8
    %27 = zext i8 %26 to i32
    %28 = sub nsw i32 %27, 80
    %29 = trunc i32 %28 to i8
    store i8 %29, ptr %1, align 1
    br label %BB_368
  
  BB_361:                                           ; preds = %BB_359, %BB_358
    call void asm sideeffect "# LLVM BB: BB_361", ""()
    %30 = load i16, ptr %2, align 2
    %31 = icmp uge i16 %30, 96
    br i1 %31, label %BB_362, label %BB_364
  
  BB_362:                                           ; preds = %BB_361
    call void asm sideeffect "# LLVM BB: BB_362", ""()
    %32 = load i16, ptr %2, align 2
    %33 = icmp ule i16 %32, 111
    br i1 %33, label %BB_363, label %BB_364
  
  BB_363:                                           ; preds = %BB_362
    call void asm sideeffect "# LLVM BB: BB_363", ""()
    %34 = load i16, ptr %2, align 2
    %35 = trunc i16 %34 to i8
    %36 = zext i8 %35 to i32
    %37 = sub nsw i32 %36, 96
    %38 = trunc i32 %37 to i8
    store i8 %38, ptr %1, align 1
    br label %BB_368
  
  BB_364:                                           ; preds = %BB_362, %BB_361
    call void asm sideeffect "# LLVM BB: BB_364", ""()
    %39 = load i16, ptr %2, align 2
    %40 = icmp uge i16 %39, 112
    br i1 %40, label %BB_365, label %BB_367
  
  BB_365:                                           ; preds = %BB_364
    call void asm sideeffect "# LLVM BB: BB_365", ""()
    %41 = load i16, ptr %2, align 2
    %42 = icmp ule i16 %41, 127
    br i1 %42, label %BB_366, label %BB_367
  
  BB_366:                                           ; preds = %BB_365
    call void asm sideeffect "# LLVM BB: BB_366", ""()
    %43 = load i16, ptr %2, align 2
    %44 = trunc i16 %43 to i8
    %45 = zext i8 %44 to i32
    %46 = sub nsw i32 %45, 112
    %47 = trunc i32 %46 to i8
    store i8 %47, ptr %1, align 1
    br label %BB_368
  
  BB_367:                                           ; preds = %BB_365, %BB_364
    call void asm sideeffect "# LLVM BB: BB_367", ""()
    store i8 0, ptr %1, align 1
    br label %BB_368
  
  BB_368:                                           ; preds = %BB_367, %BB_366, %BB_363, %BB_360, %BB_357, %BB_354
    call void asm sideeffect "# LLVM BB: BB_368", ""()
    %48 = load i8, ptr %1, align 1
    ret i8 %48
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJEE4callEv() local_unnamed_addr #3 comdat align 2 {
  BB_369:
    call void asm sideeffect "# LLVM BB: BB_369", ""()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1014DispatchKeySet7has_allES0_(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 %1) local_unnamed_addr #3 comdat align 2 {
  BB_370:
    call void asm sideeffect "# LLVM BB: BB_370", ""()
    %2 = alloca %"class.c10::DispatchKeySet", align 8
    %3 = alloca ptr, align 8
    %4 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    store i64 %1, ptr %4, align 8
    store ptr %0, ptr %3, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %5, i32 0, i32 0
    %7 = load i64, ptr %6, align 8
    %8 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %9 = load i64, ptr %8, align 8
    %10 = and i64 %7, %9
    %11 = getelementptr inbounds %"class.c10::DispatchKeySet", ptr %2, i32 0, i32 0
    %12 = load i64, ptr %11, align 8
    %13 = icmp eq i64 %10, %12
    ret i1 %13
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIN3c106LayoutEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_371:
    call void asm sideeffect "# LLVM BB: BB_371", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEEC2EOS1_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_372:
    call void asm sideeffect "# LLVM BB: BB_372", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.58", ptr %4, i32 0, i32 0
    store i8 1, ptr %5, align 1
    %6 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.58", ptr %4, i32 0, i32 1
    %7 = load ptr, ptr %3, align 8
    %8 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1014constexpr_moveIRNS_6LayoutEEEONSt16remove_referenceIT_E4typeEOS4_(ptr noundef nonnull align 1 dereferenceable(1) %7) #15
    call void @_ZN3c1019constexpr_storage_tINS_6LayoutEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %6, ptr noundef nonnull align 1 dereferenceable(1) %8)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1014constexpr_moveIRNS_6LayoutEEEONSt16remove_referenceIT_E4typeEOS4_(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_373:
    call void asm sideeffect "# LLVM BB: BB_373", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1019constexpr_storage_tINS_6LayoutEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_374:
    call void asm sideeffect "# LLVM BB: BB_374", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardINS_6LayoutEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %8 = load i8, ptr %7, align 1
    store i8 %8, ptr %5, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardINS_6LayoutEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_375:
    call void asm sideeffect "# LLVM BB: BB_375", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalINS_10ScalarTypeEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_376:
    call void asm sideeffect "# LLVM BB: BB_376", ""()
    %2 = alloca %"class.c10::optional.45", align 1
    %3 = alloca ptr, align 8
    %4 = alloca %"class.caffe2::TypeMeta", align 2
    %5 = getelementptr inbounds %"class.c10::optional.45", ptr %2, i32 0, i32 0
    %6 = bitcast ptr %5 to ptr
    store i16 %1, ptr %6, align 1
    store ptr %0, ptr %3, align 8
    %7 = load ptr, ptr %3, align 8
    %8 = call noundef zeroext i1 @_ZNK3c108optionalINS_10ScalarTypeEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %8, label %BB_377, label %BB_380
  
  BB_377:                                           ; preds = %BB_376
    call void asm sideeffect "# LLVM BB: BB_377", ""()
    %9 = invoke noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_10ScalarTypeEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
            to label %BB_378 unwind label %BB_382
  
  BB_378:                                           ; preds = %BB_377
    call void asm sideeffect "# LLVM BB: BB_378", ""()
    %10 = load i8, ptr %9, align 1
    %11 = invoke fastcc i16 @_ZN3c10L20scalarTypeToTypeMetaENS_10ScalarTypeE(i8 noundef signext %10)
            to label %BB_379 unwind label %BB_382
  
  BB_379:                                           ; preds = %BB_378
    call void asm sideeffect "# LLVM BB: BB_379", ""()
    %12 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %4, i32 0, i32 0
    store i16 %11, ptr %12, align 2
    %13 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %7, i32 0, i32 1
    %14 = bitcast ptr %13 to ptr
    %15 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %14, ptr align 2 %15, i64 2, i1 false)
    %16 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %7, i32 0, i32 4
    %17 = load i8, ptr %16, align 2
    %18 = and i8 %17, -9
    %19 = or i8 %18, 8
    store i8 %19, ptr %16, align 2
    br label %BB_381
  
  BB_380:                                           ; preds = %BB_376
    call void asm sideeffect "# LLVM BB: BB_380", ""()
    %20 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %7, i32 0, i32 4
    %21 = load i8, ptr %20, align 2
    %22 = and i8 %21, -9
    %23 = or i8 %22, 0
    store i8 %23, ptr %20, align 2
    br label %BB_381
  
  BB_381:                                           ; preds = %BB_380, %BB_379
    call void asm sideeffect "# LLVM BB: BB_381", ""()
    ret void
  
  BB_382:                                           ; preds = %BB_378, %BB_377
    %24 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_382", ""()
    %25 = extractvalue { ptr, i32 } %24, 0
    call void @__clang_call_terminate(ptr %25) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_10ScalarTypeEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_383:
    call void asm sideeffect "# LLVM BB: BB_383", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define internal fastcc i16 @_ZN3c10L20scalarTypeToTypeMetaENS_10ScalarTypeE(i8 noundef signext %0) unnamed_addr #0 {
  BB_384:
    call void asm sideeffect "# LLVM BB: BB_384", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = alloca i8, align 1
    store i8 %0, ptr %2, align 1
    %3 = load i8, ptr %2, align 1
    %4 = call i16 @_ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE(i8 noundef signext %3)
    %5 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    store i16 %4, ptr %5, align 2
    %6 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    %7 = load i16, ptr %6, align 2
    ret i16 %7
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_10ScalarTypeEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 {
  BB_385:
    call void asm sideeffect "# LLVM BB: BB_385", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %3, label %BB_386, label %BB_387
  
  BB_386:                                           ; preds = %BB_385
    call void asm sideeffect "# LLVM BB: BB_386", ""()
    br label %BB_388
  
  BB_387:                                           ; preds = %BB_385
    call void asm sideeffect "# LLVM BB: BB_387", ""()
    call void @__assert_fail(ptr noundef @.str.27, ptr noundef @.str.28, i32 noundef 753, ptr noundef @__PRETTY_FUNCTION__._ZNR3c108optionalINS_10ScalarTypeEEdeEv) #16
    unreachable
  
  BB_388:                                           ; preds = %BB_386
    call void asm sideeffect "# LLVM BB: BB_388", ""()
    %4 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_10ScalarTypeEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_389:
    call void asm sideeffect "# LLVM BB: BB_389", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %3) #15
    ret i1 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_390:
    call void asm sideeffect "# LLVM BB: BB_390", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.46", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 1
    %5 = trunc i8 %4 to i1
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local i16 @_ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE(i8 noundef signext %0) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_391:
    call void asm sideeffect "# LLVM BB: BB_391", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = alloca i8, align 1
    %3 = alloca i16, align 2
    %4 = alloca %"class.std::__cxx11::basic_string", align 8
    %5 = alloca ptr, align 8
    %6 = alloca i32, align 4
    store i8 %0, ptr %2, align 1
    %7 = load i8, ptr %2, align 1
    %8 = sext i8 %7 to i16
    store i16 %8, ptr %3, align 2
    %9 = load i16, ptr %3, align 2
    %10 = zext i16 %9 to i32
    %11 = icmp slt i32 %10, 26
    %12 = xor i1 %11, true
    br i1 %12, label %BB_392, label %BB_395
  
  BB_392:                                           ; preds = %BB_391
    call void asm sideeffect "# LLVM BB: BB_392", ""()
    call void @_ZN3c103strIJA25_cNS_10ScalarTypeEA28_cEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %4, ptr noundef nonnull align 1 dereferenceable(25) @.str.39, ptr noundef nonnull align 1 dereferenceable(1) %2, ptr noundef nonnull align 1 dereferenceable(28) @.str.40)
    invoke void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE, ptr noundef @.str.37, i32 noundef 467, ptr noundef @.str.38, ptr noundef nonnull align 8 dereferenceable(32) %4) #14
            to label %BB_393 unwind label %BB_394
  
  BB_393:                                           ; preds = %BB_392
    call void asm sideeffect "# LLVM BB: BB_393", ""()
    unreachable
  
  BB_394:                                           ; preds = %BB_392
    %13 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_394", ""()
    %14 = extractvalue { ptr, i32 } %13, 0
    store ptr %14, ptr %5, align 8
    %15 = extractvalue { ptr, i32 } %13, 1
    store i32 %15, ptr %6, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %4) #15
    br label %BB_396
  
  BB_395:                                           ; preds = %BB_391
    call void asm sideeffect "# LLVM BB: BB_395", ""()
    %16 = load i16, ptr %3, align 2
    call void @_ZN6caffe28TypeMetaC2Et(ptr noundef nonnull align 2 dereferenceable(2) %1, i16 noundef zeroext %16) #15
    %17 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    %18 = load i16, ptr %17, align 2
    ret i16 %18
  
  BB_396:                                           ; preds = %BB_394
    call void asm sideeffect "# LLVM BB: BB_396", ""()
    %19 = load ptr, ptr %5, align 8
    call void @_Unwind_Resume(ptr %19) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA25_cNS_10ScalarTypeEA28_cEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(25) %1, ptr noundef nonnull align 1 dereferenceable(1) %2, ptr noundef nonnull align 1 dereferenceable(28) %3) local_unnamed_addr #0 comdat {
  BB_397:
    call void asm sideeffect "# LLVM BB: BB_397", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = bitcast ptr %0 to ptr
    store ptr %10, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %11 = load ptr, ptr %5, align 8
    %12 = getelementptr inbounds [25 x i8], ptr %11, i64 0, i64 0
    store ptr %12, ptr %8, align 8
    %13 = load ptr, ptr %6, align 8
    %14 = load ptr, ptr %7, align 8
    %15 = getelementptr inbounds [28 x i8], ptr %14, i64 0, i64 0
    store ptr %15, ptr %9, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 1 dereferenceable(1) %13, ptr noundef nonnull align 8 dereferenceable(8) %9)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 1 dereferenceable(1) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_398:
    call void asm sideeffect "# LLVM BB: BB_398", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %9 = alloca ptr, align 8
    %10 = alloca i32, align 4
    %11 = bitcast ptr %0 to ptr
    store ptr %11, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %8)
    %12 = bitcast ptr %8 to ptr
    %13 = load ptr, ptr %5, align 8
    %14 = load ptr, ptr %6, align 8
    %15 = load ptr, ptr %7, align 8
    %16 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_10ScalarTypeES3_EEERSoS5_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef nonnull align 1 dereferenceable(1) %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
            to label %BB_399 unwind label %BB_401
  
  BB_399:                                           ; preds = %BB_398
    call void asm sideeffect "# LLVM BB: BB_399", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %8)
            to label %BB_400 unwind label %BB_401
  
  BB_400:                                           ; preds = %BB_399
    call void asm sideeffect "# LLVM BB: BB_400", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %8) #15
    ret void
  
  BB_401:                                           ; preds = %BB_399, %BB_398
    %17 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_401", ""()
    %18 = extractvalue { ptr, i32 } %17, 0
    store ptr %18, ptr %9, align 8
    %19 = extractvalue { ptr, i32 } %17, 1
    store i32 %19, ptr %10, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %8) #15
    br label %BB_402
  
  BB_402:                                           ; preds = %BB_401
    call void asm sideeffect "# LLVM BB: BB_402", ""()
    %20 = load ptr, ptr %9, align 8
    call void @_Unwind_Resume(ptr %20) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_10ScalarTypeES3_EEERSoS5_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 1 dereferenceable(1) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #0 comdat {
  BB_403:
    call void asm sideeffect "# LLVM BB: BB_403", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    %11 = load ptr, ptr %6, align 8
    %12 = load ptr, ptr %7, align 8
    %13 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_10ScalarTypeEJPKcEEERSoS5_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 1 dereferenceable(1) %11, ptr noundef nonnull align 8 dereferenceable(8) %12)
    ret ptr %13
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_10ScalarTypeEJPKcEEERSoS5_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 1 dereferenceable(1) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_404:
    call void asm sideeffect "# LLVM BB: BB_404", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_10ScalarTypeEEERSoS3_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 1 dereferenceable(1) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_10ScalarTypeEEERSoS3_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) local_unnamed_addr #0 comdat {
  BB_405:
    call void asm sideeffect "# LLVM BB: BB_405", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i8, ptr %5, align 1
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsERSoNS_10ScalarTypeE(ptr noundef nonnull align 8 dereferenceable(8) %4, i8 noundef signext %6)
    %8 = load ptr, ptr %2, align 8
    ret ptr %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsERSoNS_10ScalarTypeE(ptr noundef nonnull align 8 dereferenceable(8) %0, i8 noundef signext %1) local_unnamed_addr #0 comdat {
  BB_406:
    call void asm sideeffect "# LLVM BB: BB_406", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i8 %1, ptr %3, align 1
    %4 = load ptr, ptr %2, align 8
    %5 = load i8, ptr %3, align 1
    %6 = call fastcc noundef ptr @_ZN3c10L8toStringENS_10ScalarTypeE(i8 noundef signext %5)
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef %6)
    ret ptr %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define internal fastcc noundef ptr @_ZN3c10L8toStringENS_10ScalarTypeE(i8 noundef signext %0) unnamed_addr #3 {
  BB_407:
    call void asm sideeffect "# LLVM BB: BB_407", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i8, align 1
    store i8 %0, ptr %2, align 1
    %3 = load i8, ptr %2, align 1
    switch i8 %3, label %BB_433 [
      i8 0, label %BB_408
      i8 1, label %BB_409
      i8 2, label %BB_410
      i8 3, label %BB_411
      i8 4, label %BB_412
      i8 5, label %BB_413
      i8 6, label %BB_414
      i8 7, label %BB_415
      i8 8, label %BB_416
      i8 9, label %BB_417
      i8 10, label %BB_418
      i8 11, label %BB_419
      i8 12, label %BB_420
      i8 13, label %BB_421
      i8 14, label %BB_422
      i8 15, label %BB_423
      i8 16, label %BB_424
      i8 17, label %BB_425
      i8 18, label %BB_426
      i8 19, label %BB_427
      i8 20, label %BB_428
      i8 21, label %BB_429
      i8 22, label %BB_430
      i8 23, label %BB_431
      i8 24, label %BB_432
    ]
  
  BB_408:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_408", ""()
    store ptr @.str.41, ptr %1, align 8
    br label %BB_434
  
  BB_409:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_409", ""()
    store ptr @.str.42, ptr %1, align 8
    br label %BB_434
  
  BB_410:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_410", ""()
    store ptr @.str.43, ptr %1, align 8
    br label %BB_434
  
  BB_411:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_411", ""()
    store ptr @.str.44, ptr %1, align 8
    br label %BB_434
  
  BB_412:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_412", ""()
    store ptr @.str.45, ptr %1, align 8
    br label %BB_434
  
  BB_413:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_413", ""()
    store ptr @.str.46, ptr %1, align 8
    br label %BB_434
  
  BB_414:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_414", ""()
    store ptr @.str.47, ptr %1, align 8
    br label %BB_434
  
  BB_415:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_415", ""()
    store ptr @.str.48, ptr %1, align 8
    br label %BB_434
  
  BB_416:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_416", ""()
    store ptr @.str.49, ptr %1, align 8
    br label %BB_434
  
  BB_417:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_417", ""()
    store ptr @.str.50, ptr %1, align 8
    br label %BB_434
  
  BB_418:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_418", ""()
    store ptr @.str.51, ptr %1, align 8
    br label %BB_434
  
  BB_419:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_419", ""()
    store ptr @.str.52, ptr %1, align 8
    br label %BB_434
  
  BB_420:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_420", ""()
    store ptr @.str.53, ptr %1, align 8
    br label %BB_434
  
  BB_421:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_421", ""()
    store ptr @.str.54, ptr %1, align 8
    br label %BB_434
  
  BB_422:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_422", ""()
    store ptr @.str.55, ptr %1, align 8
    br label %BB_434
  
  BB_423:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_423", ""()
    store ptr @.str.56, ptr %1, align 8
    br label %BB_434
  
  BB_424:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_424", ""()
    store ptr @.str.57, ptr %1, align 8
    br label %BB_434
  
  BB_425:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_425", ""()
    store ptr @.str.58, ptr %1, align 8
    br label %BB_434
  
  BB_426:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_426", ""()
    store ptr @.str.59, ptr %1, align 8
    br label %BB_434
  
  BB_427:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_427", ""()
    store ptr @.str.60, ptr %1, align 8
    br label %BB_434
  
  BB_428:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_428", ""()
    store ptr @.str.61, ptr %1, align 8
    br label %BB_434
  
  BB_429:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_429", ""()
    store ptr @.str.62, ptr %1, align 8
    br label %BB_434
  
  BB_430:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_430", ""()
    store ptr @.str.63, ptr %1, align 8
    br label %BB_434
  
  BB_431:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_431", ""()
    store ptr @.str.64, ptr %1, align 8
    br label %BB_434
  
  BB_432:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_432", ""()
    store ptr @.str.65, ptr %1, align 8
    br label %BB_434
  
  BB_433:                                           ; preds = %BB_407
    call void asm sideeffect "# LLVM BB: BB_433", ""()
    store ptr @.str.66, ptr %1, align 8
    br label %BB_434
  
  BB_434:                                           ; preds = %BB_433, %BB_432, %BB_431, %BB_430, %BB_429, %BB_428, %BB_427, %BB_426, %BB_425, %BB_424, %BB_423, %BB_422, %BB_421, %BB_420, %BB_419, %BB_418, %BB_417, %BB_416, %BB_415, %BB_414, %BB_413, %BB_412, %BB_411, %BB_410, %BB_409, %BB_408
    call void asm sideeffect "# LLVM BB: BB_434", ""()
    %4 = load ptr, ptr %1, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_10ScalarTypeEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_435:
    call void asm sideeffect "# LLVM BB: BB_435", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.46", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIRKN3c1010ScalarTypeEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_436:
    call void asm sideeffect "# LLVM BB: BB_436", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEEC2ERKS1_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_437:
    call void asm sideeffect "# LLVM BB: BB_437", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.46", ptr %4, i32 0, i32 0
    store i8 1, ptr %5, align 1
    %6 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.46", ptr %4, i32 0, i32 1
    %7 = load ptr, ptr %3, align 8
    call void @_ZN3c1019constexpr_storage_tINS_10ScalarTypeEEC2IJRKS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %6, ptr noundef nonnull align 1 dereferenceable(1) %7)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1019constexpr_storage_tINS_10ScalarTypeEEC2IJRKS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_438:
    call void asm sideeffect "# LLVM BB: BB_438", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardIRKNS_10ScalarTypeEEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %8 = load i8, ptr %7, align 1
    store i8 %8, ptr %5, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardIRKNS_10ScalarTypeEEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_439:
    call void asm sideeffect "# LLVM BB: BB_439", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNR3c1013TensorOptions17set_memory_formatENS_8optionalINS_12MemoryFormatEEE(ptr noundef nonnull align 2 dereferenceable(7) %0, i16 %1) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_440:
    call void asm sideeffect "# LLVM BB: BB_440", ""()
    %2 = alloca %"class.c10::optional.48", align 1
    %3 = alloca ptr, align 8
    %4 = getelementptr inbounds %"class.c10::optional.48", ptr %2, i32 0, i32 0
    %5 = bitcast ptr %4 to ptr
    store i16 %1, ptr %5, align 1
    store ptr %0, ptr %3, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef zeroext i1 @_ZNK3c108optionalINS_12MemoryFormatEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %7, label %BB_441, label %BB_443
  
  BB_441:                                           ; preds = %BB_440
    call void asm sideeffect "# LLVM BB: BB_441", ""()
    %8 = invoke noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_12MemoryFormatEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
            to label %BB_442 unwind label %BB_445
  
  BB_442:                                           ; preds = %BB_441
    call void asm sideeffect "# LLVM BB: BB_442", ""()
    %9 = load i8, ptr %8, align 1
    %10 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 3
    store i8 %9, ptr %10, align 1
    %11 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %12 = load i8, ptr %11, align 2
    %13 = and i8 %12, 127
    %14 = or i8 %13, -128
    store i8 %14, ptr %11, align 2
    br label %BB_444
  
  BB_443:                                           ; preds = %BB_440
    call void asm sideeffect "# LLVM BB: BB_443", ""()
    %15 = getelementptr inbounds %"struct.c10::TensorOptions", ptr %6, i32 0, i32 4
    %16 = load i8, ptr %15, align 2
    %17 = and i8 %16, 127
    %18 = or i8 %17, 0
    store i8 %18, ptr %15, align 2
    br label %BB_444
  
  BB_444:                                           ; preds = %BB_443, %BB_442
    call void asm sideeffect "# LLVM BB: BB_444", ""()
    ret void
  
  BB_445:                                           ; preds = %BB_441
    %19 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_445", ""()
    %20 = extractvalue { ptr, i32 } %19, 0
    call void @__clang_call_terminate(ptr %20) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_12MemoryFormatEEcvbEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_446:
    call void asm sideeffect "# LLVM BB: BB_446", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_12MemoryFormatEEdeEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 {
  BB_447:
    call void asm sideeffect "# LLVM BB: BB_447", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %2) #15
    br i1 %3, label %BB_448, label %BB_449
  
  BB_448:                                           ; preds = %BB_447
    call void asm sideeffect "# LLVM BB: BB_448", ""()
    br label %BB_450
  
  BB_449:                                           ; preds = %BB_447
    call void asm sideeffect "# LLVM BB: BB_449", ""()
    call void @__assert_fail(ptr noundef @.str.27, ptr noundef @.str.28, i32 noundef 753, ptr noundef @__PRETTY_FUNCTION__._ZNR3c108optionalINS_12MemoryFormatEEdeEv) #16
    unreachable
  
  BB_450:                                           ; preds = %BB_448
    call void asm sideeffect "# LLVM BB: BB_450", ""()
    %4 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_12MemoryFormatEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %2)
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_451:
    call void asm sideeffect "# LLVM BB: BB_451", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %3) #15
    ret i1 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEE11initializedEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_452:
    call void asm sideeffect "# LLVM BB: BB_452", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.49", ptr %2, i32 0, i32 0
    %4 = load i8, ptr %3, align 1
    %5 = trunc i8 %4 to i1
    ret i1 %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNR3c108optionalINS_12MemoryFormatEE13contained_valEv(ptr noundef nonnull align 1 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 {
  BB_453:
    call void asm sideeffect "# LLVM BB: BB_453", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.49", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %4 to ptr
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl29is_strides_like_channels_lastEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_454:
    call void asm sideeffect "# LLVM BB: BB_454", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE(ptr noundef nonnull align 8 dereferenceable(192) %2, i8 noundef signext 2)
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat {
  BB_455:
    call void asm sideeffect "# LLVM BB: BB_455", ""()
    %3 = alloca %"class.c10::ArrayRef", align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"class.c10::ArrayRef", align 8
    %6 = alloca %"class.c10::ArrayRef", align 8
    %7 = bitcast ptr %3 to ptr
    %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 0
    store ptr %1, ptr %8, align 8
    %9 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 1
    store i64 %2, ptr %9, align 8
    store ptr %0, ptr %4, align 8
    %10 = load ptr, ptr %4, align 8
    call void @_ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef nonnull align 8 dereferenceable(24) %10)
    %11 = bitcast ptr %6 to ptr
    %12 = bitcast ptr %3 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %11, ptr align 8 %12, i64 16, i1 false)
    %13 = bitcast ptr %6 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    %15 = load ptr, ptr %14, align 8
    %16 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    %17 = load i64, ptr %16, align 8
    %18 = call noundef zeroext i1 @_ZNK3c108ArrayRefIlE6equalsES1_(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr %15, i64 %17)
    ret i1 %18
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1028get_channels_last_strides_2dENS_8ArrayRefIlEE(ptr noalias sret(%"class.std::vector") align 8 %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat {
  BB_456:
    call void asm sideeffect "# LLVM BB: BB_456", ""()
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::ArrayRef", align 8
    %5 = alloca %"class.c10::ArrayRef", align 8
    %6 = bitcast ptr %0 to ptr
    store ptr %6, ptr %3, align 8
    %7 = bitcast ptr %4 to ptr
    %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 0
    store ptr %1, ptr %8, align 8
    %9 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 1
    store i64 %2, ptr %9, align 8
    %10 = bitcast ptr %5 to ptr
    %11 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %11, i64 16, i1 false)
    %12 = bitcast ptr %5 to ptr
    %13 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 0
    %14 = load ptr, ptr %13, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 1
    %16 = load i64, ptr %15, align 8
    call void @_ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr sret(%"class.std::vector") align 8 %0, ptr %14, i64 %16)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK2at10TensorBase7stridesEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #0 comdat align 2 {
  BB_457:
    call void asm sideeffect "# LLVM BB: BB_457", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"class.at::TensorBase", ptr %3, i32 0, i32 0
    %5 = call noundef ptr @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    %6 = call { ptr, i64 } @_ZNK3c1010TensorImpl7stridesEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %7 = bitcast ptr %1 to ptr
    %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 0
    %9 = extractvalue { ptr, i64 } %6, 0
    store ptr %9, ptr %8, align 8
    %10 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 1
    %11 = extractvalue { ptr, i64 } %6, 1
    store i64 %11, ptr %10, align 8
    %12 = bitcast ptr %1 to ptr
    %13 = load { ptr, i64 }, ptr %12, align 8
    ret { ptr, i64 } %13
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_458:
    call void asm sideeffect "# LLVM BB: BB_458", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    %3 = alloca i32, align 4
    store ptr %0, ptr %1, align 8
    %4 = load ptr, ptr %1, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = getelementptr inbounds %"struct.std::_Vector_base", ptr %5, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    %8 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %8, align 8
    %10 = bitcast ptr %4 to ptr
    %11 = getelementptr inbounds %"struct.std::_Vector_base", ptr %10, i32 0, i32 0
    %12 = bitcast ptr %11 to ptr
    %13 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %12, i32 0, i32 1
    %14 = load ptr, ptr %13, align 8
    %15 = bitcast ptr %4 to ptr
    %16 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv(ptr noundef nonnull align 8 dereferenceable(24) %15) #15
    invoke void @_ZSt8_DestroyIPllEvT_S1_RSaIT0_E(ptr noundef %9, ptr noundef %14, ptr noundef nonnull align 1 dereferenceable(1) %16)
            to label %BB_459 unwind label %BB_460
  
  BB_459:                                           ; preds = %BB_458
    call void asm sideeffect "# LLVM BB: BB_459", ""()
    %17 = bitcast ptr %4 to ptr
    call void @_ZNSt12_Vector_baseIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %17) #15
    ret void
  
  BB_460:                                           ; preds = %BB_458
    %18 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_460", ""()
    %19 = extractvalue { ptr, i32 } %18, 0
    store ptr %19, ptr %2, align 8
    %20 = extractvalue { ptr, i32 } %18, 1
    store i32 %20, ptr %3, align 4
    %21 = bitcast ptr %4 to ptr
    call void @_ZNSt12_Vector_baseIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %21) #15
    br label %BB_461
  
  BB_461:                                           ; preds = %BB_460
    call void asm sideeffect "# LLVM BB: BB_461", ""()
    %22 = load ptr, ptr %2, align 8
    call void @__clang_call_terminate(ptr %22) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl32is_strides_like_channels_last_3dEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_462:
    call void asm sideeffect "# LLVM BB: BB_462", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef zeroext i1 @_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE(ptr noundef nonnull align 8 dereferenceable(192) %2, i8 noundef signext 3)
    ret i1 %3
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1028get_channels_last_strides_3dENS_8ArrayRefIlEE(ptr noalias sret(%"class.std::vector") align 8 %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat {
  BB_463:
    call void asm sideeffect "# LLVM BB: BB_463", ""()
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::ArrayRef", align 8
    %5 = alloca %"class.c10::ArrayRef", align 8
    %6 = bitcast ptr %0 to ptr
    store ptr %6, ptr %3, align 8
    %7 = bitcast ptr %4 to ptr
    %8 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 0
    store ptr %1, ptr %8, align 8
    %9 = getelementptr inbounds { ptr, i64 }, ptr %7, i32 0, i32 1
    store i64 %2, ptr %9, align 8
    %10 = bitcast ptr %5 to ptr
    %11 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %10, ptr align 8 %11, i64 16, i1 false)
    %12 = bitcast ptr %5 to ptr
    %13 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 0
    %14 = load ptr, ptr %13, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %12, i32 0, i32 1
    %16 = load i64, ptr %15, align 8
    call void @_ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr sret(%"class.std::vector") align 8 %0, ptr %14, i64 %16)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE(ptr noundef nonnull align 8 dereferenceable(192) %0, i8 noundef signext %1) local_unnamed_addr #0 comdat align 2 {
  BB_464:
    call void asm sideeffect "# LLVM BB: BB_464", ""()
    %2 = alloca i1, align 1
    %3 = alloca ptr, align 8
    %4 = alloca i8, align 1
    store ptr %0, ptr %3, align 8
    store i8 %1, ptr %4, align 1
    %5 = load ptr, ptr %3, align 8
    %6 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %5, i8 noundef zeroext 1)
    br i1 %6, label %BB_465, label %BB_466
  
  BB_465:                                           ; preds = %BB_464
    call void asm sideeffect "# LLVM BB: BB_465", ""()
    %7 = load i8, ptr %4, align 1
    %8 = bitcast ptr %5 to ptr
    %9 = load ptr, ptr %8, align 8
    %10 = getelementptr inbounds ptr, ptr %9, i64 4
    %11 = load ptr, ptr %10, align 8
    %12 = call noundef zeroext i1 %11(ptr noundef nonnull align 8 dereferenceable(192) %5, i8 noundef signext %7)
    store i1 %12, ptr %2, align 1
    br label %BB_467
  
  BB_466:                                           ; preds = %BB_464
    call void asm sideeffect "# LLVM BB: BB_466", ""()
    %13 = load i8, ptr %4, align 1
    %14 = call noundef zeroext i1 @_ZNK3c1010TensorImpl23is_strides_like_defaultENS_12MemoryFormatE(ptr noundef nonnull align 8 dereferenceable(192) %5, i8 noundef signext %13)
    store i1 %14, ptr %2, align 1
    br label %BB_467
  
  BB_467:                                           ; preds = %BB_466, %BB_465
    call void asm sideeffect "# LLVM BB: BB_467", ""()
    %15 = load i1, ptr %2, align 1
    ret i1 %15
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c1010TensorImpl23is_strides_like_defaultENS_12MemoryFormatE(ptr noundef nonnull align 8 dereferenceable(192) %0, i8 noundef signext %1) local_unnamed_addr #0 comdat align 2 {
  BB_468:
    call void asm sideeffect "# LLVM BB: BB_468", ""()
    %2 = alloca i1, align 1
    %3 = alloca ptr, align 8
    %4 = alloca i8, align 1
    store ptr %0, ptr %3, align 8
    store i8 %1, ptr %4, align 1
    %5 = load ptr, ptr %3, align 8
    %6 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %5, i32 0, i32 11
    %7 = bitcast ptr %6 to ptr
    %8 = load i24, ptr %7, align 1
    %9 = lshr i24 %8, 12
    %10 = and i24 %9, 1
    %11 = trunc i24 %10 to i1
    br i1 %11, label %BB_469, label %BB_474
  
  BB_469:                                           ; preds = %BB_468
    call void asm sideeffect "# LLVM BB: BB_469", ""()
    %12 = load i8, ptr %4, align 1
    %13 = icmp eq i8 %12, 2
    br i1 %13, label %BB_470, label %BB_471
  
  BB_470:                                           ; preds = %BB_469
    call void asm sideeffect "# LLVM BB: BB_470", ""()
    %14 = call noundef nonnull align 8 dereferenceable(224) ptr @_ZNK3c1010TensorImpl19symbolic_shape_metaEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %15 = getelementptr inbounds %"struct.c10::SymbolicShapeMeta", ptr %14, i32 0, i32 7
    %16 = call noundef zeroext i1 @_ZNK3c107SymBool10guard_boolEPKcl(ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef @.str.29, i64 noundef 850)
    store i1 %16, ptr %2, align 1
    br label %BB_479
  
  BB_471:                                           ; preds = %BB_469
    call void asm sideeffect "# LLVM BB: BB_471", ""()
    %17 = load i8, ptr %4, align 1
    %18 = icmp eq i8 %17, 3
    br i1 %18, label %BB_472, label %BB_473
  
  BB_472:                                           ; preds = %BB_471
    call void asm sideeffect "# LLVM BB: BB_472", ""()
    %19 = call noundef nonnull align 8 dereferenceable(224) ptr @_ZNK3c1010TensorImpl19symbolic_shape_metaEv(ptr noundef nonnull align 8 dereferenceable(192) %5)
    %20 = getelementptr inbounds %"struct.c10::SymbolicShapeMeta", ptr %19, i32 0, i32 8
    %21 = call noundef zeroext i1 @_ZNK3c107SymBool10guard_boolEPKcl(ptr noundef nonnull align 8 dereferenceable(16) %20, ptr noundef @.str.29, i64 noundef 853)
    store i1 %21, ptr %2, align 1
    br label %BB_479
  
  BB_473:                                           ; preds = %BB_471
    call void asm sideeffect "# LLVM BB: BB_473", ""()
    store i1 false, ptr %2, align 1
    br label %BB_479
  
  BB_474:                                           ; preds = %BB_468
    call void asm sideeffect "# LLVM BB: BB_474", ""()
    %22 = load i8, ptr %4, align 1
    %23 = icmp eq i8 %22, 2
    br i1 %23, label %BB_475, label %BB_476
  
  BB_475:                                           ; preds = %BB_474
    call void asm sideeffect "# LLVM BB: BB_475", ""()
    %24 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %5, i32 0, i32 11
    %25 = bitcast ptr %24 to ptr
    %26 = load i24, ptr %25, align 1
    %27 = lshr i24 %26, 2
    %28 = and i24 %27, 1
    %29 = trunc i24 %28 to i1
    store i1 %29, ptr %2, align 1
    br label %BB_479
  
  BB_476:                                           ; preds = %BB_474
    call void asm sideeffect "# LLVM BB: BB_476", ""()
    %30 = load i8, ptr %4, align 1
    %31 = icmp eq i8 %30, 3
    br i1 %31, label %BB_477, label %BB_478
  
  BB_477:                                           ; preds = %BB_476
    call void asm sideeffect "# LLVM BB: BB_477", ""()
    %32 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %5, i32 0, i32 11
    %33 = bitcast ptr %32 to ptr
    %34 = load i24, ptr %33, align 1
    %35 = lshr i24 %34, 4
    %36 = and i24 %35, 1
    %37 = trunc i24 %36 to i1
    store i1 %37, ptr %2, align 1
    br label %BB_479
  
  BB_478:                                           ; preds = %BB_476
    call void asm sideeffect "# LLVM BB: BB_478", ""()
    store i1 false, ptr %2, align 1
    br label %BB_479
  
  BB_479:                                           ; preds = %BB_478, %BB_477, %BB_475, %BB_473, %BB_472, %BB_470
    call void asm sideeffect "# LLVM BB: BB_479", ""()
    %38 = load i1, ptr %2, align 1
    ret i1 %38
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(224) ptr @_ZNK3c1010TensorImpl19symbolic_shape_metaEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_480:
    call void asm sideeffect "# LLVM BB: BB_480", ""()
    %1 = alloca ptr, align 8
    %2 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    %3 = alloca %"struct.c10::detail::CompileTimeEmptyString", align 1
    store ptr %0, ptr %1, align 8
    %4 = load ptr, ptr %1, align 8
    %5 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %4, i32 0, i32 3
    %6 = call noundef zeroext i1 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEcvbEv(ptr noundef nonnull align 8 dereferenceable(8) %5) #15
    br i1 %6, label %BB_481, label %BB_482
  
  BB_481:                                           ; preds = %BB_480
    call void asm sideeffect "# LLVM BB: BB_481", ""()
    %7 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %4, i32 0, i32 3
    %8 = call noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv(ptr noundef nonnull align 8 dereferenceable(8) %7) #15
    %9 = getelementptr inbounds %"struct.c10::ExtraMeta", ptr %8, i32 0, i32 0
    %10 = call noundef zeroext i1 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEcvbEv(ptr noundef nonnull align 8 dereferenceable(8) %9) #15
    br label %BB_482
  
  BB_482:                                           ; preds = %BB_481, %BB_480
    %11 = phi i1 [ false, %BB_480 ], [ %10, %BB_481 ]
    call void asm sideeffect "# LLVM BB: BB_482", ""()
    %12 = xor i1 %11, true
    br i1 %12, label %BB_483, label %BB_484
  
  BB_483:                                           ; preds = %BB_482
    call void asm sideeffect "# LLVM BB: BB_483", ""()
    call void @_ZN3c103strIJEEEDcDpRKT_()
    call void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE(ptr noundef @__func__._ZNK3c1010TensorImpl19symbolic_shape_metaEv, ptr noundef @.str.29, i32 noundef 1707, ptr noundef @.str.67) #14
    unreachable
  
  BB_484:                                           ; preds = %BB_482
    call void asm sideeffect "# LLVM BB: BB_484", ""()
    %13 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %4, i32 0, i32 3
    %14 = call noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv(ptr noundef nonnull align 8 dereferenceable(8) %13) #15
    %15 = getelementptr inbounds %"struct.c10::ExtraMeta", ptr %14, i32 0, i32 0
    %16 = call noundef nonnull align 8 dereferenceable(224) ptr @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEdeEv(ptr noundef nonnull align 8 dereferenceable(8) %15) #15
    ret ptr %16
  }
  
  declare noundef zeroext i1 @_ZNK3c107SymBool10guard_boolEPKcl(ptr noundef nonnull align 8 dereferenceable(16), ptr noundef, i64 noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEcvbEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_485:
    call void asm sideeffect "# LLVM BB: BB_485", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    %4 = icmp eq ptr %3, null
    %5 = zext i1 %4 to i64
    %6 = select i1 %4, i1 false, i1 true
    ret i1 %6
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_486:
    call void asm sideeffect "# LLVM BB: BB_486", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEcvbEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_487:
    call void asm sideeffect "# LLVM BB: BB_487", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    %4 = icmp eq ptr %3, null
    %5 = zext i1 %4 to i64
    %6 = select i1 %4, i1 false, i1 true
    ret i1 %6
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(224) ptr @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEdeEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_488:
    call void asm sideeffect "# LLVM BB: BB_488", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    br label %BB_489
  
  BB_489:                                           ; preds = %BB_488
    call void asm sideeffect "# LLVM BB: BB_489", ""()
    br label %BB_490
  
  BB_490:                                           ; preds = %BB_489
    call void asm sideeffect "# LLVM BB: BB_490", ""()
    br label %BB_491
  
  BB_491:                                           ; preds = %BB_490
    call void asm sideeffect "# LLVM BB: BB_491", ""()
    %3 = call noundef ptr @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_492:
    call void asm sideeffect "# LLVM BB: BB_492", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::unique_ptr.13", ptr %2, i32 0, i32 0
    %4 = bitcast ptr %3 to ptr
    %5 = call noundef ptr @_ZNKSt15__uniq_ptr_implIN3c109ExtraMetaESt14default_deleteIS1_EE6_M_ptrEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt15__uniq_ptr_implIN3c109ExtraMetaESt14default_deleteIS1_EE6_M_ptrEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_493:
    call void asm sideeffect "# LLVM BB: BB_493", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::__uniq_ptr_impl.15", ptr %2, i32 0, i32 0
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3getILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    %5 = load ptr, ptr %4, align 8
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3getILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_494:
    call void asm sideeffect "# LLVM BB: BB_494", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt12__get_helperILm0EPN3c109ExtraMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt12__get_helperILm0EPN3c109ExtraMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_495:
    call void asm sideeffect "# LLVM BB: BB_495", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt11_Tuple_implILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEE7_M_headERKS5_(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt11_Tuple_implILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEE7_M_headERKS5_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_496:
    call void asm sideeffect "# LLVM BB: BB_496", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt10_Head_baseILm0EPN3c109ExtraMetaELb0EE7_M_headERKS3_(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt10_Head_baseILm0EPN3c109ExtraMetaELb0EE7_M_headERKS3_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_497:
    call void asm sideeffect "# LLVM BB: BB_497", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.std::_Head_base.20", ptr %2, i32 0, i32 0
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_498:
    call void asm sideeffect "# LLVM BB: BB_498", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::unique_ptr.21", ptr %2, i32 0, i32 0
    %4 = bitcast ptr %3 to ptr
    %5 = call noundef ptr @_ZNKSt15__uniq_ptr_implIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE6_M_ptrEv(ptr noundef nonnull align 8 dereferenceable(8) %4) #15
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt15__uniq_ptr_implIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE6_M_ptrEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_499:
    call void asm sideeffect "# LLVM BB: BB_499", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::__uniq_ptr_impl.23", ptr %2, i32 0, i32 0
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3getILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    %5 = load ptr, ptr %4, align 8
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3getILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_500:
    call void asm sideeffect "# LLVM BB: BB_500", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt12__get_helperILm0EPN3c1017SymbolicShapeMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt12__get_helperILm0EPN3c1017SymbolicShapeMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_501:
    call void asm sideeffect "# LLVM BB: BB_501", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt11_Tuple_implILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEE7_M_headERKS5_(ptr noundef nonnull align 8 dereferenceable(8) %2) #15
    ret ptr %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt11_Tuple_implILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEE7_M_headERKS5_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_502:
    call void asm sideeffect "# LLVM BB: BB_502", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt10_Head_baseILm0EPN3c1017SymbolicShapeMetaELb0EE7_M_headERKS3_(ptr noundef nonnull align 8 dereferenceable(8) %3) #15
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt10_Head_baseILm0EPN3c1017SymbolicShapeMetaELb0EE7_M_headERKS3_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_503:
    call void asm sideeffect "# LLVM BB: BB_503", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.std::_Head_base.28", ptr %2, i32 0, i32 0
    ret ptr %3
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef nonnull align 8 dereferenceable(24) %1) unnamed_addr #4 comdat align 2 {
  BB_504:
    call void asm sideeffect "# LLVM BB: BB_504", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"class.c10::ArrayRef", ptr %4, i32 0, i32 0
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef ptr @_ZNKSt6vectorIlSaIlEE4dataEv(ptr noundef nonnull align 8 dereferenceable(24) %6) #15
    store ptr %7, ptr %5, align 8
    %8 = getelementptr inbounds %"class.c10::ArrayRef", ptr %4, i32 0, i32 1
    %9 = load ptr, ptr %3, align 8
    %10 = call noundef i64 @_ZNKSt6vectorIlSaIlEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(24) %9) #15
    store i64 %10, ptr %8, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c108ArrayRefIlE6equalsES1_(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat align 2 {
  BB_505:
    call void asm sideeffect "# LLVM BB: BB_505", ""()
    %3 = alloca %"class.c10::ArrayRef", align 8
    %4 = alloca ptr, align 8
    %5 = bitcast ptr %3 to ptr
    %6 = getelementptr inbounds { ptr, i64 }, ptr %5, i32 0, i32 0
    store ptr %1, ptr %6, align 8
    %7 = getelementptr inbounds { ptr, i64 }, ptr %5, i32 0, i32 1
    store i64 %2, ptr %7, align 8
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds %"class.c10::ArrayRef", ptr %8, i32 0, i32 1
    %10 = load i64, ptr %9, align 8
    %11 = getelementptr inbounds %"class.c10::ArrayRef", ptr %3, i32 0, i32 1
    %12 = load i64, ptr %11, align 8
    %13 = icmp eq i64 %10, %12
    br i1 %13, label %BB_506, label %BB_507
  
  BB_506:                                           ; preds = %BB_505
    call void asm sideeffect "# LLVM BB: BB_506", ""()
    %14 = call noundef ptr @_ZNK3c108ArrayRefIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %8)
    %15 = call noundef ptr @_ZNK3c108ArrayRefIlE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %8)
    %16 = call noundef ptr @_ZNK3c108ArrayRefIlE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %3)
    %17 = call noundef zeroext i1 @_ZSt5equalIPKlS1_EbT_S2_T0_(ptr noundef %14, ptr noundef %15, ptr noundef %16)
    br label %BB_507
  
  BB_507:                                           ; preds = %BB_506, %BB_505
    %18 = phi i1 [ false, %BB_505 ], [ %17, %BB_506 ]
    call void asm sideeffect "# LLVM BB: BB_507", ""()
    ret i1 %18
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt6vectorIlSaIlEE4dataEv(ptr noundef nonnull align 8 dereferenceable(24) %0) local_unnamed_addr #3 comdat align 2 {
  BB_508:
    call void asm sideeffect "# LLVM BB: BB_508", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.std::_Vector_base", ptr %3, i32 0, i32 0
    %5 = bitcast ptr %4 to ptr
    %6 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %5, i32 0, i32 0
    %7 = load ptr, ptr %6, align 8
    %8 = call noundef ptr @_ZNKSt6vectorIlSaIlEE11_M_data_ptrIlEEPT_S4_(ptr noundef nonnull align 8 dereferenceable(24) %2, ptr noundef %7) #15
    ret ptr %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt6vectorIlSaIlEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(24) %0) local_unnamed_addr #3 comdat align 2 {
  BB_509:
    call void asm sideeffect "# LLVM BB: BB_509", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = getelementptr inbounds %"struct.std::_Vector_base", ptr %3, i32 0, i32 0
    %5 = bitcast ptr %4 to ptr
    %6 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %5, i32 0, i32 1
    %7 = load ptr, ptr %6, align 8
    %8 = bitcast ptr %2 to ptr
    %9 = getelementptr inbounds %"struct.std::_Vector_base", ptr %8, i32 0, i32 0
    %10 = bitcast ptr %9 to ptr
    %11 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %10, i32 0, i32 0
    %12 = load ptr, ptr %11, align 8
    %13 = ptrtoint ptr %7 to i64
    %14 = ptrtoint ptr %12 to i64
    %15 = sub i64 %13, %14
    %16 = sdiv exact i64 %15, 8
    ret i64 %16
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt6vectorIlSaIlEE11_M_data_ptrIlEEPT_S4_(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef %1) local_unnamed_addr #3 comdat align 2 {
  BB_510:
    call void asm sideeffect "# LLVM BB: BB_510", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    ret ptr %5
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZSt5equalIPKlS1_EbT_S2_T0_(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #0 comdat {
  BB_511:
    call void asm sideeffect "# LLVM BB: BB_511", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = load ptr, ptr %5, align 8
    %9 = call noundef zeroext i1 @_ZSt11__equal_auxIPKlS1_EbT_S2_T0_(ptr noundef %6, ptr noundef %7, ptr noundef %8)
    ret i1 %9
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZSt11__equal_auxIPKlS1_EbT_S2_T0_(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #0 comdat {
  BB_512:
    call void asm sideeffect "# LLVM BB: BB_512", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef ptr @_ZSt12__niter_baseIPKlET_S2_(ptr noundef %6) #15
    %8 = load ptr, ptr %4, align 8
    %9 = call noundef ptr @_ZSt12__niter_baseIPKlET_S2_(ptr noundef %8) #15
    %10 = load ptr, ptr %5, align 8
    %11 = call noundef ptr @_ZSt12__niter_baseIPKlET_S2_(ptr noundef %10) #15
    %12 = call noundef zeroext i1 @_ZSt12__equal_aux1IPKlS1_EbT_S2_T0_(ptr noundef %7, ptr noundef %9, ptr noundef %11)
    ret i1 %12
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZSt12__equal_aux1IPKlS1_EbT_S2_T0_(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #0 comdat {
  BB_513:
    call void asm sideeffect "# LLVM BB: BB_513", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca i8, align 1
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    store i8 1, ptr %6, align 1
    %7 = load ptr, ptr %3, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef zeroext i1 @_ZNSt7__equalILb1EE5equalIlEEbPKT_S4_S4_(ptr noundef %7, ptr noundef %8, ptr noundef %9)
    ret i1 %10
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt12__niter_baseIPKlET_S2_(ptr noundef %0) local_unnamed_addr #3 comdat {
  BB_514:
    call void asm sideeffect "# LLVM BB: BB_514", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNSt7__equalILb1EE5equalIlEEbPKT_S4_S4_(ptr noundef %0, ptr noundef %1, ptr noundef %2) local_unnamed_addr #0 comdat align 2 {
  BB_515:
    call void asm sideeffect "# LLVM BB: BB_515", ""()
    %3 = alloca i1, align 1
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i64, align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    %8 = load ptr, ptr %5, align 8
    %9 = load ptr, ptr %4, align 8
    %10 = ptrtoint ptr %8 to i64
    %11 = ptrtoint ptr %9 to i64
    %12 = sub i64 %10, %11
    %13 = sdiv exact i64 %12, 8
    store i64 %13, ptr %7, align 8
    %14 = load i64, ptr %7, align 8
    %15 = icmp ne i64 %14, 0
    br i1 %15, label %BB_516, label %BB_517
  
  BB_516:                                           ; preds = %BB_515
    call void asm sideeffect "# LLVM BB: BB_516", ""()
    %16 = load ptr, ptr %4, align 8
    %17 = load ptr, ptr %6, align 8
    %18 = load i64, ptr %7, align 8
    %19 = call noundef i32 @_ZSt8__memcmpIllEiPKT_PKT0_m(ptr noundef %16, ptr noundef %17, i64 noundef %18)
    %20 = icmp ne i32 %19, 0
    %21 = xor i1 %20, true
    store i1 %21, ptr %3, align 1
    br label %BB_518
  
  BB_517:                                           ; preds = %BB_515
    call void asm sideeffect "# LLVM BB: BB_517", ""()
    store i1 true, ptr %3, align 1
    br label %BB_518
  
  BB_518:                                           ; preds = %BB_517, %BB_516
    call void asm sideeffect "# LLVM BB: BB_518", ""()
    %22 = load i1, ptr %3, align 1
    ret i1 %22
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i32 @_ZSt8__memcmpIllEiPKT_PKT0_m(ptr noundef %0, ptr noundef %1, i64 noundef %2) local_unnamed_addr #3 comdat {
  BB_519:
    call void asm sideeffect "# LLVM BB: BB_519", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %6 to ptr
    %8 = load ptr, ptr %4, align 8
    %9 = bitcast ptr %8 to ptr
    %10 = load i64, ptr %5, align 8
    %11 = mul i64 8, %10
    %12 = call i32 @memcmp(ptr noundef %7, ptr noundef %9, i64 noundef %11) #15
    ret i32 %12
  }
  
  ; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
  declare i32 @memcmp(ptr nocapture noundef, ptr nocapture noundef, i64 noundef) local_unnamed_addr #10
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr noalias sret(%"class.std::vector") align 8 %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat personality ptr @__gxx_personality_v0 {
  BB_520:
    call void asm sideeffect "# LLVM BB: BB_520", ""()
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::ArrayRef", align 8
    %5 = alloca i1, align 1
    %6 = alloca %"class.std::allocator.61", align 1
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = alloca i32, align 4
    %10 = alloca %"class.std::__cxx11::basic_string", align 8
    %11 = alloca i64, align 8
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %3, align 8
    %13 = bitcast ptr %4 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    store ptr %1, ptr %14, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    store i64 %2, ptr %15, align 8
    store i1 false, ptr %5, align 1
    %16 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    call void @_ZNSaIlEC2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    invoke void @_ZNSt6vectorIlSaIlEEC2EmRKS0_(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %16, ptr noundef nonnull align 1 dereferenceable(1) %6)
            to label %BB_521 unwind label %BB_522
  
  BB_521:                                           ; preds = %BB_520
    call void asm sideeffect "# LLVM BB: BB_521", ""()
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %17 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    switch i64 %17, label %BB_525 [
      i64 4, label %BB_523
      i64 3, label %BB_524
    ]
  
  BB_522:                                           ; preds = %BB_520
    %18 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_522", ""()
    %19 = extractvalue { ptr, i32 } %18, 0
    store ptr %19, ptr %7, align 8
    %20 = extractvalue { ptr, i32 } %18, 1
    store i32 %20, ptr %8, align 4
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    br label %BB_534
  
  BB_523:                                           ; preds = %BB_521
    call void asm sideeffect "# LLVM BB: BB_523", ""()
    %21 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 1) #15
    store i64 1, ptr %21, align 8
    %22 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 1)
    %23 = load i64, ptr %22, align 8
    %24 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    store i64 %23, ptr %24, align 8
    %25 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    %26 = load i64, ptr %25, align 8
    %27 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 3)
    %28 = load i64, ptr %27, align 8
    %29 = mul nsw i64 %26, %28
    %30 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    store i64 %29, ptr %30, align 8
    %31 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    %32 = load i64, ptr %31, align 8
    %33 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 2)
    %34 = load i64, ptr %33, align 8
    %35 = mul nsw i64 %32, %34
    %36 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 0) #15
    store i64 %35, ptr %36, align 8
    store i1 true, ptr %5, align 1
    store i32 1, ptr %9, align 4
    br label %BB_530
  
  BB_524:                                           ; preds = %BB_521
    call void asm sideeffect "# LLVM BB: BB_524", ""()
    %37 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 0) #15
    store i64 1, ptr %37, align 8
    %38 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 0)
    %39 = load i64, ptr %38, align 8
    %40 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    store i64 %39, ptr %40, align 8
    %41 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    %42 = load i64, ptr %41, align 8
    %43 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 2)
    %44 = load i64, ptr %43, align 8
    %45 = mul nsw i64 %42, %44
    %46 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 1) #15
    store i64 %45, ptr %46, align 8
    store i1 true, ptr %5, align 1
    store i32 1, ptr %9, align 4
    br label %BB_530
  
  BB_525:                                           ; preds = %BB_521
    call void asm sideeffect "# LLVM BB: BB_525", ""()
    %47 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    store i64 %47, ptr %11, align 8
    invoke void @_ZN3c103strIJA37_cmEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %10, ptr noundef nonnull align 1 dereferenceable(37) @.str.70, ptr noundef nonnull align 8 dereferenceable(8) %11)
            to label %BB_526 unwind label %BB_528
  
  BB_526:                                           ; preds = %BB_525
    call void asm sideeffect "# LLVM BB: BB_526", ""()
    invoke void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, ptr noundef @.str.68, i32 noundef 81, ptr noundef @.str.69, ptr noundef nonnull align 8 dereferenceable(32) %10) #14
            to label %BB_527 unwind label %BB_529
  
  BB_527:                                           ; preds = %BB_526
    call void asm sideeffect "# LLVM BB: BB_527", ""()
    unreachable
  
  BB_528:                                           ; preds = %BB_525
    %48 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_528", ""()
    %49 = extractvalue { ptr, i32 } %48, 0
    store ptr %49, ptr %7, align 8
    %50 = extractvalue { ptr, i32 } %48, 1
    store i32 %50, ptr %8, align 4
    br label %BB_533
  
  BB_529:                                           ; preds = %BB_526
    %51 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_529", ""()
    %52 = extractvalue { ptr, i32 } %51, 0
    store ptr %52, ptr %7, align 8
    %53 = extractvalue { ptr, i32 } %51, 1
    store i32 %53, ptr %8, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %10) #15
    br label %BB_533
  
  BB_530:                                           ; preds = %BB_524, %BB_523
    call void asm sideeffect "# LLVM BB: BB_530", ""()
    %54 = load i1, ptr %5, align 1
    br i1 %54, label %BB_532, label %BB_531
  
  BB_531:                                           ; preds = %BB_530
    call void asm sideeffect "# LLVM BB: BB_531", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) #15
    br label %BB_532
  
  BB_532:                                           ; preds = %BB_531, %BB_530
    call void asm sideeffect "# LLVM BB: BB_532", ""()
    ret void
  
  BB_533:                                           ; preds = %BB_529, %BB_528
    call void asm sideeffect "# LLVM BB: BB_533", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) #15
    br label %BB_534
  
  BB_534:                                           ; preds = %BB_533, %BB_522
    call void asm sideeffect "# LLVM BB: BB_534", ""()
    %55 = load ptr, ptr %7, align 8
    call void @_Unwind_Resume(ptr %55) #14
    unreachable
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSaIlEC2Ev(ptr noundef nonnull align 1 dereferenceable(1) %0) unnamed_addr #4 comdat align 2 {
  BB_535:
    call void asm sideeffect "# LLVM BB: BB_535", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    call void @_ZNSt15__new_allocatorIlEC2Ev(ptr noundef nonnull align 1 dereferenceable(1) %3) #15
    ret void
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt6vectorIlSaIlEEC2EmRKS0_(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1, ptr noundef nonnull align 1 dereferenceable(1) %2) unnamed_addr #5 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_536:
    call void asm sideeffect "# LLVM BB: BB_536", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i32, align 4
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %3, align 8
    %9 = bitcast ptr %8 to ptr
    %10 = load i64, ptr %4, align 8
    %11 = load ptr, ptr %5, align 8
    %12 = call noundef i64 @_ZNSt6vectorIlSaIlEE17_S_check_init_lenEmRKS0_(i64 noundef %10, ptr noundef nonnull align 1 dereferenceable(1) %11)
    %13 = load ptr, ptr %5, align 8
    call void @_ZNSt12_Vector_baseIlSaIlEEC2EmRKS0_(ptr noundef nonnull align 8 dereferenceable(24) %9, i64 noundef %12, ptr noundef nonnull align 1 dereferenceable(1) %13)
    %14 = load i64, ptr %4, align 8
    invoke void @_ZNSt6vectorIlSaIlEE21_M_default_initializeEm(ptr noundef nonnull align 8 dereferenceable(24) %8, i64 noundef %14)
            to label %BB_537 unwind label %BB_538
  
  BB_537:                                           ; preds = %BB_536
    call void asm sideeffect "# LLVM BB: BB_537", ""()
    ret void
  
  BB_538:                                           ; preds = %BB_536
    %15 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_538", ""()
    %16 = extractvalue { ptr, i32 } %15, 0
    store ptr %16, ptr %6, align 8
    %17 = extractvalue { ptr, i32 } %15, 1
    store i32 %17, ptr %7, align 4
    %18 = bitcast ptr %8 to ptr
    call void @_ZNSt12_Vector_baseIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %18) #15
    br label %BB_539
  
  BB_539:                                           ; preds = %BB_538
    call void asm sideeffect "# LLVM BB: BB_539", ""()
    %19 = load ptr, ptr %6, align 8
    call void @_Unwind_Resume(ptr %19) #14
    unreachable
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %0) unnamed_addr #4 comdat align 2 {
  BB_540:
    call void asm sideeffect "# LLVM BB: BB_540", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    call void @_ZNSt15__new_allocatorIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %3) #15
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1) local_unnamed_addr #3 comdat align 2 {
  BB_541:
    call void asm sideeffect "# LLVM BB: BB_541", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = getelementptr inbounds %"struct.std::_Vector_base", ptr %5, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    %8 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %8, align 8
    %10 = load i64, ptr %3, align 8
    %11 = getelementptr inbounds i64, ptr %9, i64 %10
    ret ptr %11
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA37_cmEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(37) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_542:
    call void asm sideeffect "# LLVM BB: BB_542", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = bitcast ptr %0 to ptr
    store ptr %7, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds [37 x i8], ptr %8, i64 0, i64 0
    store ptr %9, ptr %6, align 8
    %10 = load ptr, ptr %5, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKmEE4callB5cxx11ERKS3_S5_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %10)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt15__new_allocatorIlEC2Ev(ptr noundef nonnull align 1 dereferenceable(1) %0) unnamed_addr #4 comdat align 2 {
  BB_543:
    call void asm sideeffect "# LLVM BB: BB_543", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNSt6vectorIlSaIlEE17_S_check_init_lenEmRKS0_(i64 noundef %0, ptr noundef nonnull align 1 dereferenceable(1) %1) local_unnamed_addr #0 comdat align 2 {
  BB_544:
    call void asm sideeffect "# LLVM BB: BB_544", ""()
    %2 = alloca i64, align 8
    %3 = alloca ptr, align 8
    %4 = alloca %"class.std::allocator.61", align 1
    store i64 %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %5 = load i64, ptr %2, align 8
    %6 = load ptr, ptr %3, align 8
    call void @_ZNSaIlEC2ERKS_(ptr noundef nonnull align 1 dereferenceable(1) %4, ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %7 = call noundef i64 @_ZNSt6vectorIlSaIlEE11_S_max_sizeERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %4) #15
    %8 = icmp ugt i64 %5, %7
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %4) #15
    br i1 %8, label %BB_545, label %BB_546
  
  BB_545:                                           ; preds = %BB_544
    call void asm sideeffect "# LLVM BB: BB_545", ""()
    call void @_ZSt20__throw_length_errorPKc(ptr noundef @.str.71) #14
    unreachable
  
  BB_546:                                           ; preds = %BB_544
    call void asm sideeffect "# LLVM BB: BB_546", ""()
    %9 = load i64, ptr %2, align 8
    ret i64 %9
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEEC2EmRKS0_(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1, ptr noundef nonnull align 1 dereferenceable(1) %2) unnamed_addr #5 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_547:
    call void asm sideeffect "# LLVM BB: BB_547", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca i32, align 4
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %3, align 8
    %9 = getelementptr inbounds %"struct.std::_Vector_base", ptr %8, i32 0, i32 0
    %10 = load ptr, ptr %5, align 8
    call void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_(ptr noundef nonnull align 8 dereferenceable(24) %9, ptr noundef nonnull align 1 dereferenceable(1) %10) #15
    %11 = load i64, ptr %4, align 8
    invoke void @_ZNSt12_Vector_baseIlSaIlEE17_M_create_storageEm(ptr noundef nonnull align 8 dereferenceable(24) %8, i64 noundef %11)
            to label %BB_548 unwind label %BB_549
  
  BB_548:                                           ; preds = %BB_547
    call void asm sideeffect "# LLVM BB: BB_548", ""()
    ret void
  
  BB_549:                                           ; preds = %BB_547
    %12 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_549", ""()
    %13 = extractvalue { ptr, i32 } %12, 0
    store ptr %13, ptr %6, align 8
    %14 = extractvalue { ptr, i32 } %12, 1
    store i32 %14, ptr %7, align 4
    call void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev(ptr noundef nonnull align 8 dereferenceable(24) %9) #15
    br label %BB_550
  
  BB_550:                                           ; preds = %BB_549
    call void asm sideeffect "# LLVM BB: BB_550", ""()
    %15 = load ptr, ptr %6, align 8
    call void @_Unwind_Resume(ptr %15) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt6vectorIlSaIlEE21_M_default_initializeEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_551:
    call void asm sideeffect "# LLVM BB: BB_551", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = getelementptr inbounds %"struct.std::_Vector_base", ptr %5, i32 0, i32 0
    %7 = bitcast ptr %6 to ptr
    %8 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %7, i32 0, i32 0
    %9 = load ptr, ptr %8, align 8
    %10 = load i64, ptr %3, align 8
    %11 = bitcast ptr %4 to ptr
    %12 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv(ptr noundef nonnull align 8 dereferenceable(24) %11) #15
    %13 = call noundef ptr @_ZSt27__uninitialized_default_n_aIPlmlET_S1_T0_RSaIT1_E(ptr noundef %9, i64 noundef %10, ptr noundef nonnull align 1 dereferenceable(1) %12)
    %14 = bitcast ptr %4 to ptr
    %15 = getelementptr inbounds %"struct.std::_Vector_base", ptr %14, i32 0, i32 0
    %16 = bitcast ptr %15 to ptr
    %17 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %16, i32 0, i32 1
    store ptr %13, ptr %17, align 8
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) unnamed_addr #4 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_552:
    call void asm sideeffect "# LLVM BB: BB_552", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    %3 = alloca i32, align 4
    store ptr %0, ptr %1, align 8
    %4 = load ptr, ptr %1, align 8
    %5 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %6 = bitcast ptr %5 to ptr
    %7 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %6, i32 0, i32 0
    %8 = load ptr, ptr %7, align 8
    %9 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %10 = bitcast ptr %9 to ptr
    %11 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %10, i32 0, i32 2
    %12 = load ptr, ptr %11, align 8
    %13 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %14 = bitcast ptr %13 to ptr
    %15 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %14, i32 0, i32 0
    %16 = load ptr, ptr %15, align 8
    %17 = ptrtoint ptr %12 to i64
    %18 = ptrtoint ptr %16 to i64
    %19 = sub i64 %17, %18
    %20 = sdiv exact i64 %19, 8
    invoke void @_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm(ptr noundef nonnull align 8 dereferenceable(24) %4, ptr noundef %8, i64 noundef %20)
            to label %BB_553 unwind label %BB_554
  
  BB_553:                                           ; preds = %BB_552
    call void asm sideeffect "# LLVM BB: BB_553", ""()
    %21 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    call void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev(ptr noundef nonnull align 8 dereferenceable(24) %21) #15
    ret void
  
  BB_554:                                           ; preds = %BB_552
    %22 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_554", ""()
    %23 = extractvalue { ptr, i32 } %22, 0
    store ptr %23, ptr %2, align 8
    %24 = extractvalue { ptr, i32 } %22, 1
    store i32 %24, ptr %3, align 4
    %25 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    call void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev(ptr noundef nonnull align 8 dereferenceable(24) %25) #15
    br label %BB_555
  
  BB_555:                                           ; preds = %BB_554
    call void asm sideeffect "# LLVM BB: BB_555", ""()
    %26 = load ptr, ptr %2, align 8
    call void @__clang_call_terminate(ptr %26) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNSt6vectorIlSaIlEE11_S_max_sizeERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_556:
    call void asm sideeffect "# LLVM BB: BB_556", ""()
    %1 = alloca ptr, align 8
    %2 = alloca i64, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %1, align 8
    store i64 1152921504606846975, ptr %2, align 8
    %4 = load ptr, ptr %1, align 8
    %5 = call noundef i64 @_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %4) #15
    store i64 %5, ptr %3, align 8
    %6 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3minImERKT_S2_S2_(ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3)
    br label %BB_557
  
  BB_557:                                           ; preds = %BB_556
    call void asm sideeffect "# LLVM BB: BB_557", ""()
    %7 = load i64, ptr %6, align 8
    ret i64 %7
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSaIlEC2ERKS_(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_558:
    call void asm sideeffect "# LLVM BB: BB_558", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %6 to ptr
    call void @_ZNSt15__new_allocatorIlEC2ERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %5, ptr noundef nonnull align 1 dereferenceable(1) %7) #15
    ret void
  }
  
  ; Function Attrs: noreturn
  declare void @_ZSt20__throw_length_errorPKc(ptr noundef) local_unnamed_addr #1
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat align 2 {
  BB_559:
    call void asm sideeffect "# LLVM BB: BB_559", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = call noundef i64 @_ZNKSt15__new_allocatorIlE8max_sizeEv(ptr noundef nonnull align 1 dereferenceable(1) %3) #15
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3minImERKT_S2_S2_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #3 comdat {
  BB_560:
    call void asm sideeffect "# LLVM BB: BB_560", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %4, align 8
    %6 = load i64, ptr %5, align 8
    %7 = load ptr, ptr %3, align 8
    %8 = load i64, ptr %7, align 8
    %9 = icmp ult i64 %6, %8
    br i1 %9, label %BB_561, label %BB_562
  
  BB_561:                                           ; preds = %BB_560
    call void asm sideeffect "# LLVM BB: BB_561", ""()
    %10 = load ptr, ptr %4, align 8
    store ptr %10, ptr %2, align 8
    br label %BB_563
  
  BB_562:                                           ; preds = %BB_560
    call void asm sideeffect "# LLVM BB: BB_562", ""()
    %11 = load ptr, ptr %3, align 8
    store ptr %11, ptr %2, align 8
    br label %BB_563
  
  BB_563:                                           ; preds = %BB_562, %BB_561
    call void asm sideeffect "# LLVM BB: BB_563", ""()
    %12 = load ptr, ptr %2, align 8
    ret ptr %12
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt15__new_allocatorIlE8max_sizeEv(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat align 2 {
  BB_564:
    call void asm sideeffect "# LLVM BB: BB_564", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef i64 @_ZNKSt15__new_allocatorIlE11_M_max_sizeEv(ptr noundef nonnull align 1 dereferenceable(1) %2) #15
    ret i64 %3
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt15__new_allocatorIlE11_M_max_sizeEv(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat align 2 {
  BB_565:
    call void asm sideeffect "# LLVM BB: BB_565", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret i64 1152921504606846975
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt15__new_allocatorIlEC2ERKS0_(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_566:
    call void asm sideeffect "# LLVM BB: BB_566", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_567:
    call void asm sideeffect "# LLVM BB: BB_567", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    call void @_ZNSaIlEC2ERKS_(ptr noundef nonnull align 1 dereferenceable(1) %5, ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %7 = bitcast ptr %4 to ptr
    call void @_ZNSt12_Vector_baseIlSaIlEE17_Vector_impl_dataC2Ev(ptr noundef nonnull align 8 dereferenceable(24) %7) #15
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEE17_M_create_storageEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_568:
    call void asm sideeffect "# LLVM BB: BB_568", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load i64, ptr %3, align 8
    %6 = call noundef ptr @_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm(ptr noundef nonnull align 8 dereferenceable(24) %4, i64 noundef %5)
    %7 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %8 = bitcast ptr %7 to ptr
    %9 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %8, i32 0, i32 0
    store ptr %6, ptr %9, align 8
    %10 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %11 = bitcast ptr %10 to ptr
    %12 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %11, i32 0, i32 0
    %13 = load ptr, ptr %12, align 8
    %14 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %15 = bitcast ptr %14 to ptr
    %16 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %15, i32 0, i32 1
    store ptr %13, ptr %16, align 8
    %17 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %18 = bitcast ptr %17 to ptr
    %19 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %18, i32 0, i32 0
    %20 = load ptr, ptr %19, align 8
    %21 = load i64, ptr %3, align 8
    %22 = getelementptr inbounds i64, ptr %20, i64 %21
    %23 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %24 = bitcast ptr %23 to ptr
    %25 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %24, i32 0, i32 2
    store ptr %22, ptr %25, align 8
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) unnamed_addr #4 comdat align 2 {
  BB_569:
    call void asm sideeffect "# LLVM BB: BB_569", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %3) #15
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEE17_Vector_impl_dataC2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) unnamed_addr #4 comdat align 2 {
  BB_570:
    call void asm sideeffect "# LLVM BB: BB_570", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %2, i32 0, i32 0
    store ptr null, ptr %3, align 8
    %4 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %2, i32 0, i32 1
    store ptr null, ptr %4, align 8
    %5 = getelementptr inbounds %"struct.std::_Vector_base<long, std::allocator<long>>::_Vector_impl_data", ptr %2, i32 0, i32 2
    store ptr null, ptr %5, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_571:
    call void asm sideeffect "# LLVM BB: BB_571", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load i64, ptr %3, align 8
    %6 = icmp ne i64 %5, 0
    br i1 %6, label %BB_572, label %BB_573
  
  BB_572:                                           ; preds = %BB_571
    call void asm sideeffect "# LLVM BB: BB_572", ""()
    %7 = getelementptr inbounds %"struct.std::_Vector_base", ptr %4, i32 0, i32 0
    %8 = bitcast ptr %7 to ptr
    %9 = load i64, ptr %3, align 8
    %10 = call noundef ptr @_ZNSt16allocator_traitsISaIlEE8allocateERS0_m(ptr noundef nonnull align 1 dereferenceable(1) %8, i64 noundef %9)
    br label %BB_574
  
  BB_573:                                           ; preds = %BB_571
    call void asm sideeffect "# LLVM BB: BB_573", ""()
    br label %BB_574
  
  BB_574:                                           ; preds = %BB_573, %BB_572
    %11 = phi ptr [ %10, %BB_572 ], [ null, %BB_573 ]
    call void asm sideeffect "# LLVM BB: BB_574", ""()
    ret ptr %11
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNSt16allocator_traitsISaIlEE8allocateERS0_m(ptr noundef nonnull align 1 dereferenceable(1) %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_575:
    call void asm sideeffect "# LLVM BB: BB_575", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load i64, ptr %3, align 8
    %7 = call noundef ptr @_ZNSt15__new_allocatorIlE8allocateEmPKv(ptr noundef nonnull align 1 dereferenceable(1) %5, i64 noundef %6, ptr noundef null)
    ret ptr %7
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNSt15__new_allocatorIlE8allocateEmPKv(ptr noundef nonnull align 1 dereferenceable(1) %0, i64 noundef %1, ptr noundef %2) local_unnamed_addr #0 comdat align 2 {
  BB_576:
    call void asm sideeffect "# LLVM BB: BB_576", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load i64, ptr %4, align 8
    %8 = call noundef i64 @_ZNKSt15__new_allocatorIlE11_M_max_sizeEv(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %9 = icmp ugt i64 %7, %8
    br i1 %9, label %BB_577, label %BB_580
  
  BB_577:                                           ; preds = %BB_576
    call void asm sideeffect "# LLVM BB: BB_577", ""()
    %10 = load i64, ptr %4, align 8
    %11 = icmp ugt i64 %10, 2305843009213693951
    br i1 %11, label %BB_578, label %BB_579
  
  BB_578:                                           ; preds = %BB_577
    call void asm sideeffect "# LLVM BB: BB_578", ""()
    call void @_ZSt28__throw_bad_array_new_lengthv() #14
    unreachable
  
  BB_579:                                           ; preds = %BB_577
    call void asm sideeffect "# LLVM BB: BB_579", ""()
    call void @_ZSt17__throw_bad_allocv() #14
    unreachable
  
  BB_580:                                           ; preds = %BB_576
    call void asm sideeffect "# LLVM BB: BB_580", ""()
    %12 = load i64, ptr %4, align 8
    %13 = mul i64 %12, 8
    %14 = call noalias noundef nonnull ptr @_Znwm(i64 noundef %13) #17
    %15 = bitcast ptr %14 to ptr
    ret ptr %15
  }
  
  ; Function Attrs: noreturn
  declare void @_ZSt28__throw_bad_array_new_lengthv() local_unnamed_addr #1
  
  ; Function Attrs: noreturn
  declare void @_ZSt17__throw_bad_allocv() local_unnamed_addr #1
  
  ; Function Attrs: nobuiltin allocsize(0)
  declare noundef nonnull ptr @_Znwm(i64 noundef) local_unnamed_addr #11
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt15__new_allocatorIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %0) unnamed_addr #4 comdat align 2 {
  BB_581:
    call void asm sideeffect "# LLVM BB: BB_581", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt27__uninitialized_default_n_aIPlmlET_S1_T0_RSaIT1_E(ptr noundef %0, i64 noundef %1, ptr noundef nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {
  BB_582:
    call void asm sideeffect "# LLVM BB: BB_582", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load i64, ptr %4, align 8
    %8 = call noundef ptr @_ZSt25__uninitialized_default_nIPlmET_S1_T0_(ptr noundef %6, i64 noundef %7)
    ret ptr %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv(ptr noundef nonnull align 8 dereferenceable(24) %0) local_unnamed_addr #3 comdat align 2 {
  BB_583:
    call void asm sideeffect "# LLVM BB: BB_583", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.std::_Vector_base", ptr %2, i32 0, i32 0
    %4 = bitcast ptr %3 to ptr
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt25__uninitialized_default_nIPlmET_S1_T0_(ptr noundef %0, i64 noundef %1) local_unnamed_addr #0 comdat {
  BB_584:
    call void asm sideeffect "# LLVM BB: BB_584", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    %4 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    store i8 1, ptr %4, align 1
    %5 = load ptr, ptr %2, align 8
    %6 = load i64, ptr %3, align 8
    %7 = call noundef ptr @_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPlmEET_S3_T0_(ptr noundef %5, i64 noundef %6)
    ret ptr %7
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPlmEET_S3_T0_(ptr noundef %0, i64 noundef %1) local_unnamed_addr #0 comdat align 2 {
  BB_585:
    call void asm sideeffect "# LLVM BB: BB_585", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %5 = load i64, ptr %3, align 8
    %6 = icmp ugt i64 %5, 0
    br i1 %6, label %BB_586, label %BB_587
  
  BB_586:                                           ; preds = %BB_585
    call void asm sideeffect "# LLVM BB: BB_586", ""()
    %7 = load ptr, ptr %2, align 8
    %8 = call noundef ptr @_ZSt11__addressofIlEPT_RS0_(ptr noundef nonnull align 8 dereferenceable(8) %7) #15
    store ptr %8, ptr %4, align 8
    %9 = load ptr, ptr %4, align 8
    call void @_ZSt10_ConstructIlJEEvPT_DpOT0_(ptr noundef %9)
    %10 = load ptr, ptr %2, align 8
    %11 = getelementptr inbounds i64, ptr %10, i32 1
    store ptr %11, ptr %2, align 8
    %12 = load ptr, ptr %2, align 8
    %13 = load i64, ptr %3, align 8
    %14 = sub i64 %13, 1
    %15 = load ptr, ptr %4, align 8
    %16 = call noundef ptr @_ZSt6fill_nIPlmlET_S1_T0_RKT1_(ptr noundef %12, i64 noundef %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    store ptr %16, ptr %2, align 8
    br label %BB_587
  
  BB_587:                                           ; preds = %BB_586, %BB_585
    call void asm sideeffect "# LLVM BB: BB_587", ""()
    %17 = load ptr, ptr %2, align 8
    ret ptr %17
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt11__addressofIlEPT_RS0_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_588:
    call void asm sideeffect "# LLVM BB: BB_588", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZSt10_ConstructIlJEEvPT_DpOT0_(ptr noundef %0) local_unnamed_addr #3 comdat {
  BB_589:
    call void asm sideeffect "# LLVM BB: BB_589", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = bitcast ptr %2 to ptr
    %4 = bitcast ptr %3 to ptr
    store i64 0, ptr %4, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt6fill_nIPlmlET_S1_T0_RKT1_(ptr noundef %0, i64 noundef %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_590:
    call void asm sideeffect "# LLVM BB: BB_590", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca ptr, align 8
    %6 = alloca %"struct.std::random_access_iterator_tag", align 1
    %7 = alloca %"struct.std::random_access_iterator_tag", align 1
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %3, align 8
    %9 = load i64, ptr %4, align 8
    %10 = call noundef i64 @_ZSt17__size_to_integerm(i64 noundef %9)
    %11 = load ptr, ptr %5, align 8
    call void @_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %3)
    %12 = call noundef ptr @_ZSt10__fill_n_aIPlmlET_S1_T0_RKT1_St26random_access_iterator_tag(ptr noundef %8, i64 noundef %10, ptr noundef nonnull align 8 dereferenceable(8) %11)
    ret ptr %12
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZSt10__fill_n_aIPlmlET_S1_T0_RKT1_St26random_access_iterator_tag(ptr noundef %0, i64 noundef %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_591:
    call void asm sideeffect "# LLVM BB: BB_591", ""()
    %3 = alloca ptr, align 8
    %4 = alloca %"struct.std::random_access_iterator_tag", align 1
    %5 = alloca ptr, align 8
    %6 = alloca i64, align 8
    %7 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store i64 %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    %8 = load i64, ptr %6, align 8
    %9 = icmp ule i64 %8, 0
    br i1 %9, label %BB_592, label %BB_593
  
  BB_592:                                           ; preds = %BB_591
    call void asm sideeffect "# LLVM BB: BB_592", ""()
    %10 = load ptr, ptr %5, align 8
    store ptr %10, ptr %3, align 8
    br label %BB_594
  
  BB_593:                                           ; preds = %BB_591
    call void asm sideeffect "# LLVM BB: BB_593", ""()
    %11 = load ptr, ptr %5, align 8
    %12 = load ptr, ptr %5, align 8
    %13 = load i64, ptr %6, align 8
    %14 = getelementptr inbounds i64, ptr %12, i64 %13
    %15 = load ptr, ptr %7, align 8
    call void @_ZSt8__fill_aIPllEvT_S1_RKT0_(ptr noundef %11, ptr noundef %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    %16 = load ptr, ptr %5, align 8
    %17 = load i64, ptr %6, align 8
    %18 = getelementptr inbounds i64, ptr %16, i64 %17
    store ptr %18, ptr %3, align 8
    br label %BB_594
  
  BB_594:                                           ; preds = %BB_593, %BB_592
    call void asm sideeffect "# LLVM BB: BB_594", ""()
    %19 = load ptr, ptr %3, align 8
    ret ptr %19
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZSt17__size_to_integerm(i64 noundef %0) local_unnamed_addr #3 comdat {
  BB_595:
    call void asm sideeffect "# LLVM BB: BB_595", ""()
    %1 = alloca i64, align 8
    store i64 %0, ptr %1, align 8
    %2 = load i64, ptr %1, align 8
    ret i64 %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_596:
    call void asm sideeffect "# LLVM BB: BB_596", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZSt8__fill_aIPllEvT_S1_RKT0_(ptr noundef %0, ptr noundef %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_597:
    call void asm sideeffect "# LLVM BB: BB_597", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = load ptr, ptr %5, align 8
    call void @_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(ptr noundef %6, ptr noundef %7, ptr noundef nonnull align 8 dereferenceable(8) %8)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_(ptr noundef %0, ptr noundef %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #3 comdat {
  BB_598:
    call void asm sideeffect "# LLVM BB: BB_598", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %7 = load ptr, ptr %5, align 8
    %8 = load i64, ptr %7, align 8
    store i64 %8, ptr %6, align 8
    br label %BB_599
  
  BB_599:                                           ; preds = %BB_601, %BB_598
    call void asm sideeffect "# LLVM BB: BB_599", ""()
    %9 = load ptr, ptr %3, align 8
    %10 = load ptr, ptr %4, align 8
    %11 = icmp ne ptr %9, %10
    br i1 %11, label %BB_600, label %BB_602
  
  BB_600:                                           ; preds = %BB_599
    call void asm sideeffect "# LLVM BB: BB_600", ""()
    %12 = load i64, ptr %6, align 8
    %13 = load ptr, ptr %3, align 8
    store i64 %12, ptr %13, align 8
    br label %BB_601
  
  BB_601:                                           ; preds = %BB_600
    call void asm sideeffect "# LLVM BB: BB_601", ""()
    %14 = load ptr, ptr %3, align 8
    %15 = getelementptr inbounds i64, ptr %14, i32 1
    store ptr %15, ptr %3, align 8
    br label %BB_599, !llvm.loop !6
  
  BB_602:                                           ; preds = %BB_599
    call void asm sideeffect "# LLVM BB: BB_602", ""()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm(ptr noundef nonnull align 8 dereferenceable(24) %0, ptr noundef %1, i64 noundef %2) local_unnamed_addr #0 comdat align 2 {
  BB_603:
    call void asm sideeffect "# LLVM BB: BB_603", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = icmp ne ptr %7, null
    br i1 %8, label %BB_604, label %BB_605
  
  BB_604:                                           ; preds = %BB_603
    call void asm sideeffect "# LLVM BB: BB_604", ""()
    %9 = getelementptr inbounds %"struct.std::_Vector_base", ptr %6, i32 0, i32 0
    %10 = bitcast ptr %9 to ptr
    %11 = load ptr, ptr %4, align 8
    %12 = load i64, ptr %5, align 8
    call void @_ZNSt16allocator_traitsISaIlEE10deallocateERS0_Plm(ptr noundef nonnull align 1 dereferenceable(1) %10, ptr noundef %11, i64 noundef %12)
    br label %BB_605
  
  BB_605:                                           ; preds = %BB_604, %BB_603
    call void asm sideeffect "# LLVM BB: BB_605", ""()
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZNSt16allocator_traitsISaIlEE10deallocateERS0_Plm(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef %1, i64 noundef %2) local_unnamed_addr #0 comdat align 2 {
  BB_606:
    call void asm sideeffect "# LLVM BB: BB_606", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %6 to ptr
    %8 = load ptr, ptr %4, align 8
    %9 = load i64, ptr %5, align 8
    call void @_ZNSt15__new_allocatorIlE10deallocateEPlm(ptr noundef nonnull align 1 dereferenceable(1) %7, ptr noundef %8, i64 noundef %9)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt15__new_allocatorIlE10deallocateEPlm(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef %1, i64 noundef %2) local_unnamed_addr #3 comdat align 2 {
  BB_607:
    call void asm sideeffect "# LLVM BB: BB_607", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = bitcast ptr %7 to ptr
    call void @_ZdlPv(ptr noundef %8) #18
    ret void
  }
  
  ; Function Attrs: nobuiltin nounwind
  declare void @_ZdlPv(ptr noundef) local_unnamed_addr #12
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKmEE4callB5cxx11ERKS3_S5_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_608:
    call void asm sideeffect "# LLVM BB: BB_608", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = bitcast ptr %0 to ptr
    store ptr %9, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6)
    %10 = bitcast ptr %6 to ptr
    %11 = load ptr, ptr %4, align 8
    %12 = load ptr, ptr %5, align 8
    %13 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJmEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 8 dereferenceable(8) %12)
            to label %BB_609 unwind label %BB_611
  
  BB_609:                                           ; preds = %BB_608
    call void asm sideeffect "# LLVM BB: BB_609", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %6)
            to label %BB_610 unwind label %BB_611
  
  BB_610:                                           ; preds = %BB_609
    call void asm sideeffect "# LLVM BB: BB_610", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    ret void
  
  BB_611:                                           ; preds = %BB_609, %BB_608
    %14 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_611", ""()
    %15 = extractvalue { ptr, i32 } %14, 0
    store ptr %15, ptr %7, align 8
    %16 = extractvalue { ptr, i32 } %14, 1
    store i32 %16, ptr %8, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %6) #15
    br label %BB_612
  
  BB_612:                                           ; preds = %BB_611
    call void asm sideeffect "# LLVM BB: BB_612", ""()
    %17 = load ptr, ptr %7, align 8
    call void @_Unwind_Resume(ptr %17) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJmEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_613:
    call void asm sideeffect "# LLVM BB: BB_613", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strImEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strImEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat {
  BB_614:
    call void asm sideeffect "# LLVM BB: BB_614", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i64, ptr %5, align 8
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEm(ptr noundef nonnull align 8 dereferenceable(8) %4, i64 noundef %6)
    %8 = load ptr, ptr %2, align 8
    ret ptr %8
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEm(ptr noundef nonnull align 8 dereferenceable(8), i64 noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK3c1010TensorImpl7stridesEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #0 comdat align 2 {
  BB_615:
    call void asm sideeffect "# LLVM BB: BB_615", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE(ptr noundef nonnull align 8 dereferenceable(192) %3, i8 noundef zeroext 1)
    br i1 %4, label %BB_616, label %BB_617
  
  BB_616:                                           ; preds = %BB_615
    call void asm sideeffect "# LLVM BB: BB_616", ""()
    %5 = bitcast ptr %3 to ptr
    %6 = load ptr, ptr %5, align 8
    %7 = getelementptr inbounds ptr, ptr %6, i64 9
    %8 = load ptr, ptr %7, align 8
    %9 = call { ptr, i64 } %8(ptr noundef nonnull align 8 dereferenceable(192) %3)
    %10 = bitcast ptr %1 to ptr
    %11 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 0
    %12 = extractvalue { ptr, i64 } %9, 0
    store ptr %12, ptr %11, align 8
    %13 = getelementptr inbounds { ptr, i64 }, ptr %10, i32 0, i32 1
    %14 = extractvalue { ptr, i64 } %9, 1
    store i64 %14, ptr %13, align 8
    br label %BB_618
  
  BB_617:                                           ; preds = %BB_615
    call void asm sideeffect "# LLVM BB: BB_617", ""()
    %15 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 6
    %16 = call { ptr, i64 } @_ZNK3c104impl15SizesAndStrides16strides_arrayrefEv(ptr noundef nonnull align 8 dereferenceable(88) %15) #15
    %17 = bitcast ptr %1 to ptr
    %18 = getelementptr inbounds { ptr, i64 }, ptr %17, i32 0, i32 0
    %19 = extractvalue { ptr, i64 } %16, 0
    store ptr %19, ptr %18, align 8
    %20 = getelementptr inbounds { ptr, i64 }, ptr %17, i32 0, i32 1
    %21 = extractvalue { ptr, i64 } %16, 1
    store i64 %21, ptr %20, align 8
    br label %BB_618
  
  BB_618:                                           ; preds = %BB_617, %BB_616
    call void asm sideeffect "# LLVM BB: BB_618", ""()
    %22 = bitcast ptr %1 to ptr
    %23 = load { ptr, i64 }, ptr %22, align 8
    ret { ptr, i64 } %23
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK3c104impl15SizesAndStrides16strides_arrayrefEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_619:
    call void asm sideeffect "# LLVM BB: BB_619", ""()
    %1 = alloca %"class.c10::ArrayRef", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef ptr @_ZNK3c104impl15SizesAndStrides12strides_dataEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    %5 = call noundef i64 @_ZNK3c104impl15SizesAndStrides4sizeEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    invoke void @_ZN3c108ArrayRefIlEC2EPKlm(ptr noundef nonnull align 8 dereferenceable(16) %1, ptr noundef %4, i64 noundef %5)
            to label %BB_620 unwind label %BB_621
  
  BB_620:                                           ; preds = %BB_619
    call void asm sideeffect "# LLVM BB: BB_620", ""()
    %6 = bitcast ptr %1 to ptr
    %7 = load { ptr, i64 }, ptr %6, align 8
    ret { ptr, i64 } %7
  
  BB_621:                                           ; preds = %BB_619
    %8 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_621", ""()
    %9 = extractvalue { ptr, i32 } %8, 0
    call void @__clang_call_terminate(ptr %9) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c104impl15SizesAndStrides12strides_dataEv(ptr noundef nonnull align 8 dereferenceable(88) %0) local_unnamed_addr #3 comdat align 2 {
  BB_622:
    call void asm sideeffect "# LLVM BB: BB_622", ""()
    %1 = alloca ptr, align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = call noundef zeroext i1 @_ZNK3c104impl15SizesAndStrides8isInlineEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    br i1 %4, label %BB_623, label %BB_624
  
  BB_623:                                           ; preds = %BB_622
    call void asm sideeffect "# LLVM BB: BB_623", ""()
    %5 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %3, i32 0, i32 1
    %6 = bitcast ptr %5 to ptr
    %7 = getelementptr inbounds [10 x i64], ptr %6, i64 0, i64 5
    store ptr %7, ptr %1, align 8
    br label %BB_625
  
  BB_624:                                           ; preds = %BB_622
    call void asm sideeffect "# LLVM BB: BB_624", ""()
    %8 = getelementptr inbounds %"class.c10::impl::SizesAndStrides", ptr %3, i32 0, i32 1
    %9 = bitcast ptr %8 to ptr
    %10 = load ptr, ptr %9, align 8
    %11 = call noundef i64 @_ZNK3c104impl15SizesAndStrides4sizeEv(ptr noundef nonnull align 8 dereferenceable(88) %3) #15
    %12 = getelementptr inbounds i64, ptr %10, i64 %11
    store ptr %12, ptr %1, align 8
    br label %BB_625
  
  BB_625:                                           ; preds = %BB_624, %BB_623
    call void asm sideeffect "# LLVM BB: BB_625", ""()
    %13 = load ptr, ptr %1, align 8
    ret ptr %13
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZSt8_DestroyIPllEvT_S1_RSaIT0_E(ptr noundef %0, ptr noundef %1, ptr noundef nonnull align 1 dereferenceable(1) %2) local_unnamed_addr #0 comdat {
  BB_626:
    call void asm sideeffect "# LLVM BB: BB_626", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    call void @_ZSt8_DestroyIPlEvT_S1_(ptr noundef %6, ptr noundef %7)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZSt8_DestroyIPlEvT_S1_(ptr noundef %0, ptr noundef %1) local_unnamed_addr #0 comdat {
  BB_627:
    call void asm sideeffect "# LLVM BB: BB_627", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    call void @_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_(ptr noundef %4, ptr noundef %5)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_(ptr noundef %0, ptr noundef %1) local_unnamed_addr #3 comdat align 2 {
  BB_628:
    call void asm sideeffect "# LLVM BB: BB_628", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE(ptr noalias sret(%"class.std::vector") align 8 %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat personality ptr @__gxx_personality_v0 {
  BB_629:
    call void asm sideeffect "# LLVM BB: BB_629", ""()
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::ArrayRef", align 8
    %5 = alloca i1, align 1
    %6 = alloca %"class.std::allocator.61", align 1
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = alloca i32, align 4
    %10 = alloca %"class.std::__cxx11::basic_string", align 8
    %11 = alloca i64, align 8
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %3, align 8
    %13 = bitcast ptr %4 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    store ptr %1, ptr %14, align 8
    %15 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    store i64 %2, ptr %15, align 8
    store i1 false, ptr %5, align 1
    %16 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    call void @_ZNSaIlEC2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    invoke void @_ZNSt6vectorIlSaIlEEC2EmRKS0_(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef %16, ptr noundef nonnull align 1 dereferenceable(1) %6)
            to label %BB_630 unwind label %BB_631
  
  BB_630:                                           ; preds = %BB_629
    call void asm sideeffect "# LLVM BB: BB_630", ""()
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %17 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    switch i64 %17, label %BB_634 [
      i64 5, label %BB_632
      i64 4, label %BB_633
    ]
  
  BB_631:                                           ; preds = %BB_629
    %18 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_631", ""()
    %19 = extractvalue { ptr, i32 } %18, 0
    store ptr %19, ptr %7, align 8
    %20 = extractvalue { ptr, i32 } %18, 1
    store i32 %20, ptr %8, align 4
    call void @_ZNSaIlED2Ev(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    br label %BB_643
  
  BB_632:                                           ; preds = %BB_630
    call void asm sideeffect "# LLVM BB: BB_632", ""()
    %21 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 1) #15
    store i64 1, ptr %21, align 8
    %22 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 1)
    %23 = load i64, ptr %22, align 8
    %24 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 4) #15
    store i64 %23, ptr %24, align 8
    %25 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 4) #15
    %26 = load i64, ptr %25, align 8
    %27 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 4)
    %28 = load i64, ptr %27, align 8
    %29 = mul nsw i64 %26, %28
    %30 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    store i64 %29, ptr %30, align 8
    %31 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    %32 = load i64, ptr %31, align 8
    %33 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 3)
    %34 = load i64, ptr %33, align 8
    %35 = mul nsw i64 %32, %34
    %36 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    store i64 %35, ptr %36, align 8
    %37 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    %38 = load i64, ptr %37, align 8
    %39 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 2)
    %40 = load i64, ptr %39, align 8
    %41 = mul nsw i64 %38, %40
    %42 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 0) #15
    store i64 %41, ptr %42, align 8
    store i1 true, ptr %5, align 1
    store i32 1, ptr %9, align 4
    br label %BB_639
  
  BB_633:                                           ; preds = %BB_630
    call void asm sideeffect "# LLVM BB: BB_633", ""()
    %43 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 0) #15
    store i64 1, ptr %43, align 8
    %44 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 0)
    %45 = load i64, ptr %44, align 8
    %46 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    store i64 %45, ptr %46, align 8
    %47 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 3) #15
    %48 = load i64, ptr %47, align 8
    %49 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 3)
    %50 = load i64, ptr %49, align 8
    %51 = mul nsw i64 %48, %50
    %52 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    store i64 %51, ptr %52, align 8
    %53 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 2) #15
    %54 = load i64, ptr %53, align 8
    %55 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNK3c108ArrayRefIlEixEm(ptr noundef nonnull align 8 dereferenceable(16) %4, i64 noundef 2)
    %56 = load i64, ptr %55, align 8
    %57 = mul nsw i64 %54, %56
    %58 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSt6vectorIlSaIlEEixEm(ptr noundef nonnull align 8 dereferenceable(24) %0, i64 noundef 1) #15
    store i64 %57, ptr %58, align 8
    store i1 true, ptr %5, align 1
    store i32 1, ptr %9, align 4
    br label %BB_639
  
  BB_634:                                           ; preds = %BB_630
    call void asm sideeffect "# LLVM BB: BB_634", ""()
    %59 = call noundef i64 @_ZNK3c108ArrayRefIlE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %4)
    store i64 %59, ptr %11, align 8
    invoke void @_ZN3c103strIJA37_cmEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %10, ptr noundef nonnull align 1 dereferenceable(37) @.str.73, ptr noundef nonnull align 8 dereferenceable(8) %11)
            to label %BB_635 unwind label %BB_637
  
  BB_635:                                           ; preds = %BB_634
    call void asm sideeffect "# LLVM BB: BB_635", ""()
    invoke void @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(ptr noundef @__func__._ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, ptr noundef @.str.68, i32 noundef 108, ptr noundef @.str.72, ptr noundef nonnull align 8 dereferenceable(32) %10) #14
            to label %BB_636 unwind label %BB_638
  
  BB_636:                                           ; preds = %BB_635
    call void asm sideeffect "# LLVM BB: BB_636", ""()
    unreachable
  
  BB_637:                                           ; preds = %BB_634
    %60 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_637", ""()
    %61 = extractvalue { ptr, i32 } %60, 0
    store ptr %61, ptr %7, align 8
    %62 = extractvalue { ptr, i32 } %60, 1
    store i32 %62, ptr %8, align 4
    br label %BB_642
  
  BB_638:                                           ; preds = %BB_635
    %63 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_638", ""()
    %64 = extractvalue { ptr, i32 } %63, 0
    store ptr %64, ptr %7, align 8
    %65 = extractvalue { ptr, i32 } %63, 1
    store i32 %65, ptr %8, align 4
    call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(32) %10) #15
    br label %BB_642
  
  BB_639:                                           ; preds = %BB_633, %BB_632
    call void asm sideeffect "# LLVM BB: BB_639", ""()
    %66 = load i1, ptr %5, align 1
    br i1 %66, label %BB_641, label %BB_640
  
  BB_640:                                           ; preds = %BB_639
    call void asm sideeffect "# LLVM BB: BB_640", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) #15
    br label %BB_641
  
  BB_641:                                           ; preds = %BB_640, %BB_639
    call void asm sideeffect "# LLVM BB: BB_641", ""()
    ret void
  
  BB_642:                                           ; preds = %BB_638, %BB_637
    call void asm sideeffect "# LLVM BB: BB_642", ""()
    call void @_ZNSt6vectorIlSaIlEED2Ev(ptr noundef nonnull align 8 dereferenceable(24) %0) #15
    br label %BB_643
  
  BB_643:                                           ; preds = %BB_642, %BB_631
    call void asm sideeffect "# LLVM BB: BB_643", ""()
    %67 = load ptr, ptr %7, align 8
    call void @_Unwind_Resume(ptr %67) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZSt7forwardIN3c1012MemoryFormatEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_644:
    call void asm sideeffect "# LLVM BB: BB_644", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEEC2EOS1_(ptr noundef nonnull align 1 dereferenceable(2) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #5 comdat align 2 {
  BB_645:
    call void asm sideeffect "# LLVM BB: BB_645", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.49", ptr %4, i32 0, i32 0
    store i8 1, ptr %5, align 1
    %6 = getelementptr inbounds %"struct.c10::trivially_copyable_optimization_optional_base.49", ptr %4, i32 0, i32 1
    %7 = load ptr, ptr %3, align 8
    %8 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1014constexpr_moveIRNS_12MemoryFormatEEEONSt16remove_referenceIT_E4typeEOS4_(ptr noundef nonnull align 1 dereferenceable(1) %7) #15
    call void @_ZN3c1019constexpr_storage_tINS_12MemoryFormatEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %6, ptr noundef nonnull align 1 dereferenceable(1) %8)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1014constexpr_moveIRNS_12MemoryFormatEEEONSt16remove_referenceIT_E4typeEOS4_(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_646:
    call void asm sideeffect "# LLVM BB: BB_646", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1019constexpr_storage_tINS_12MemoryFormatEEC2IJS1_EEEDpOT_(ptr noundef nonnull align 1 dereferenceable(1) %0, ptr noundef nonnull align 1 dereferenceable(1) %1) unnamed_addr #4 comdat align 2 {
  BB_647:
    call void asm sideeffect "# LLVM BB: BB_647", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = bitcast ptr %4 to ptr
    %6 = load ptr, ptr %3, align 8
    %7 = call noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardINS_12MemoryFormatEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %6) #15
    %8 = load i8, ptr %7, align 1
    store i8 %8, ptr %5, align 1
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 1 dereferenceable(1) ptr @_ZN3c1017constexpr_forwardINS_12MemoryFormatEEEOT_RNSt16remove_referenceIS2_E4typeE(ptr noundef nonnull align 1 dereferenceable(1) %0) local_unnamed_addr #3 comdat {
  BB_648:
    call void asm sideeffect "# LLVM BB: BB_648", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA76_cNS_8ArrayRefIlEEEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(76) %1, ptr noundef nonnull align 8 dereferenceable(16) %2) local_unnamed_addr #0 comdat {
  BB_649:
    call void asm sideeffect "# LLVM BB: BB_649", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = bitcast ptr %0 to ptr
    store ptr %7, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = getelementptr inbounds [76 x i8], ptr %8, i64 0, i64 0
    store ptr %9, ptr %6, align 8
    %10 = load ptr, ptr %5, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(16) %10)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local { i64, i64 } @_ZN3c106irangeIilLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_(i32 noundef %0, i64 noundef %1) local_unnamed_addr #0 comdat {
  BB_650:
    call void asm sideeffect "# LLVM BB: BB_650", ""()
    %2 = alloca %"struct.c10::integer_range.64", align 8
    %3 = alloca i32, align 4
    %4 = alloca i64, align 8
    %5 = alloca i64, align 8
    store i32 %0, ptr %3, align 4
    store i64 %1, ptr %4, align 8
    %6 = load i32, ptr %3, align 4
    %7 = sext i32 %6 to i64
    %8 = load i32, ptr %3, align 4
    %9 = sext i32 %8 to i64
    store i64 %9, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3maxIlERKT_S2_S2_(ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 8 dereferenceable(8) %4)
    %11 = load i64, ptr %10, align 8
    call void @_ZN3c1013integer_rangeIlLb0ELb1EEC2Ell(ptr noundef nonnull align 8 dereferenceable(16) %2, i64 noundef %7, i64 noundef %11)
    %12 = bitcast ptr %2 to ptr
    %13 = load { i64, i64 }, ptr %12, align 8
    ret { i64, i64 } %13
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013integer_rangeIlLb0ELb1EE5beginEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_651:
    call void asm sideeffect "# LLVM BB: BB_651", ""()
    %1 = alloca %"struct.c10::detail::integer_iterator.65", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::integer_range.64", ptr %3, i32 0, i32 0
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 8, i1 false)
    %7 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %1, i32 0, i32 0
    %8 = load i64, ptr %7, align 8
    ret i64 %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i64 @_ZNK3c1013integer_rangeIlLb0ELb1EE3endEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_652:
    call void asm sideeffect "# LLVM BB: BB_652", ""()
    %1 = alloca %"struct.c10::detail::integer_iterator.65", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::integer_range.64", ptr %3, i32 0, i32 1
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %5, ptr align 8 %6, i64 8, i1 false)
    %7 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %1, i32 0, i32 0
    %8 = load i64, ptr %7, align 8
    ret i64 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEneERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat align 2 {
  BB_653:
    call void asm sideeffect "# LLVM BB: BB_653", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = call noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEeqERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(8) %5)
    %7 = xor i1 %6, true
    ret i1 %7
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEdeEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_654:
    call void asm sideeffect "# LLVM BB: BB_654", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %2, i32 0, i32 0
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail17torchCheckMsgImplIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcS3_DpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 1 dereferenceable(100) %3, ptr noundef nonnull align 8 dereferenceable(16) %4, ptr noundef nonnull align 1 dereferenceable(17) %5, ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 1 dereferenceable(13) %7) local_unnamed_addr #0 comdat {
  BB_655:
    call void asm sideeffect "# LLVM BB: BB_655", ""()
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    %14 = alloca ptr, align 8
    %15 = alloca ptr, align 8
    %16 = bitcast ptr %0 to ptr
    store ptr %16, ptr %8, align 8
    store ptr %1, ptr %9, align 8
    store ptr %2, ptr %10, align 8
    store ptr %3, ptr %11, align 8
    store ptr %4, ptr %12, align 8
    store ptr %5, ptr %13, align 8
    store ptr %6, ptr %14, align 8
    store ptr %7, ptr %15, align 8
    %17 = load ptr, ptr %10, align 8
    %18 = load ptr, ptr %11, align 8
    %19 = load ptr, ptr %12, align 8
    %20 = load ptr, ptr %13, align 8
    %21 = load ptr, ptr %14, align 8
    %22 = load ptr, ptr %15, align 8
    call void @_ZN3c103strIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcDpRKT_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 1 dereferenceable(100) %18, ptr noundef nonnull align 8 dereferenceable(16) %19, ptr noundef nonnull align 1 dereferenceable(17) %20, ptr noundef nonnull align 8 dereferenceable(8) %21, ptr noundef nonnull align 1 dereferenceable(13) %22)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail16integer_iteratorIlLb0ELi0EEppEv(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat align 2 {
  BB_656:
    call void asm sideeffect "# LLVM BB: BB_656", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %2, i32 0, i32 0
    %4 = load i64, ptr %3, align 8
    %5 = add nsw i64 %4, 1
    store i64 %5, ptr %3, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt3maxIlERKT_S2_S2_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #3 comdat {
  BB_657:
    call void asm sideeffect "# LLVM BB: BB_657", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i64, ptr %5, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = load i64, ptr %7, align 8
    %9 = icmp slt i64 %6, %8
    br i1 %9, label %BB_658, label %BB_659
  
  BB_658:                                           ; preds = %BB_657
    call void asm sideeffect "# LLVM BB: BB_658", ""()
    %10 = load ptr, ptr %4, align 8
    store ptr %10, ptr %2, align 8
    br label %BB_660
  
  BB_659:                                           ; preds = %BB_657
    call void asm sideeffect "# LLVM BB: BB_659", ""()
    %11 = load ptr, ptr %3, align 8
    store ptr %11, ptr %2, align 8
    br label %BB_660
  
  BB_660:                                           ; preds = %BB_659, %BB_658
    call void asm sideeffect "# LLVM BB: BB_660", ""()
    %12 = load ptr, ptr %2, align 8
    ret ptr %12
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013integer_rangeIlLb0ELb1EEC2Ell(ptr noundef nonnull align 8 dereferenceable(16) %0, i64 noundef %1, i64 noundef %2) unnamed_addr #5 comdat align 2 {
  BB_661:
    call void asm sideeffect "# LLVM BB: BB_661", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i64, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store i64 %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"struct.c10::integer_range.64", ptr %6, i32 0, i32 0
    %8 = load i64, ptr %4, align 8
    call void @_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El(ptr noundef nonnull align 8 dereferenceable(8) %7, i64 noundef %8)
    %9 = getelementptr inbounds %"struct.c10::integer_range.64", ptr %6, i32 0, i32 1
    %10 = load i64, ptr %5, align 8
    call void @_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El(ptr noundef nonnull align 8 dereferenceable(8) %9, i64 noundef %10)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 noundef %1) unnamed_addr #4 comdat align 2 {
  BB_662:
    call void asm sideeffect "# LLVM BB: BB_662", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i64, align 8
    store ptr %0, ptr %2, align 8
    store i64 %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %4, i32 0, i32 0
    %6 = load i64, ptr %3, align 8
    store i64 %6, ptr %5, align 8
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEeqERKS2_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #3 comdat align 2 {
  BB_663:
    call void asm sideeffect "# LLVM BB: BB_663", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %4, i32 0, i32 0
    %6 = load i64, ptr %5, align 8
    %7 = load ptr, ptr %3, align 8
    %8 = getelementptr inbounds %"struct.c10::detail::integer_iterator.65", ptr %7, i32 0, i32 0
    %9 = load i64, ptr %8, align 8
    %10 = icmp eq i64 %6, %9
    ret i1 %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 1 dereferenceable(100) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 1 dereferenceable(17) %4, ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 1 dereferenceable(13) %6) local_unnamed_addr #0 comdat {
  BB_664:
    call void asm sideeffect "# LLVM BB: BB_664", ""()
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    %14 = alloca ptr, align 8
    %15 = alloca ptr, align 8
    %16 = alloca ptr, align 8
    %17 = bitcast ptr %0 to ptr
    store ptr %17, ptr %7, align 8
    store ptr %1, ptr %8, align 8
    store ptr %2, ptr %9, align 8
    store ptr %3, ptr %10, align 8
    store ptr %4, ptr %11, align 8
    store ptr %5, ptr %12, align 8
    store ptr %6, ptr %13, align 8
    %18 = load ptr, ptr %8, align 8
    %19 = load ptr, ptr %9, align 8
    %20 = getelementptr inbounds [100 x i8], ptr %19, i64 0, i64 0
    store ptr %20, ptr %14, align 8
    %21 = load ptr, ptr %10, align 8
    %22 = load ptr, ptr %11, align 8
    %23 = getelementptr inbounds [17 x i8], ptr %22, i64 0, i64 0
    store ptr %23, ptr %15, align 8
    %24 = load ptr, ptr %12, align 8
    %25 = load ptr, ptr %13, align 8
    %26 = getelementptr inbounds [13 x i8], ptr %25, i64 0, i64 0
    store ptr %26, ptr %16, align 8
    call void @_ZN3c106detail12_str_wrapperIJRKPKcS3_RKNS_8ArrayRefIlEES3_RKlS3_EE4callB5cxx11ES5_S5_S9_S5_SB_S5_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %18, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(8) %15, ptr noundef nonnull align 8 dereferenceable(8) %24, ptr noundef nonnull align 8 dereferenceable(8) %16)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJRKPKcS3_RKNS_8ArrayRefIlEES3_RKlS3_EE4callB5cxx11ES5_S5_S9_S5_SB_S5_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 8 dereferenceable(8) %6) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_665:
    call void asm sideeffect "# LLVM BB: BB_665", ""()
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    %14 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %15 = alloca ptr, align 8
    %16 = alloca i32, align 4
    %17 = bitcast ptr %0 to ptr
    store ptr %17, ptr %7, align 8
    store ptr %1, ptr %8, align 8
    store ptr %2, ptr %9, align 8
    store ptr %3, ptr %10, align 8
    store ptr %4, ptr %11, align 8
    store ptr %5, ptr %12, align 8
    store ptr %6, ptr %13, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %14)
    %18 = bitcast ptr %14 to ptr
    %19 = load ptr, ptr %8, align 8
    %20 = load ptr, ptr %9, align 8
    %21 = load ptr, ptr %10, align 8
    %22 = load ptr, ptr %11, align 8
    %23 = load ptr, ptr %12, align 8
    %24 = load ptr, ptr %13, align 8
    %25 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJS3_NS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %18, ptr noundef nonnull align 8 dereferenceable(8) %19, ptr noundef nonnull align 8 dereferenceable(8) %20, ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(8) %22, ptr noundef nonnull align 8 dereferenceable(8) %23, ptr noundef nonnull align 8 dereferenceable(8) %24)
            to label %BB_666 unwind label %BB_668
  
  BB_666:                                           ; preds = %BB_665
    call void asm sideeffect "# LLVM BB: BB_666", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %14)
            to label %BB_667 unwind label %BB_668
  
  BB_667:                                           ; preds = %BB_666
    call void asm sideeffect "# LLVM BB: BB_667", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %14) #15
    ret void
  
  BB_668:                                           ; preds = %BB_666, %BB_665
    %26 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_668", ""()
    %27 = extractvalue { ptr, i32 } %26, 0
    store ptr %27, ptr %15, align 8
    %28 = extractvalue { ptr, i32 } %26, 1
    store i32 %28, ptr %16, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %14) #15
    br label %BB_669
  
  BB_669:                                           ; preds = %BB_668
    call void asm sideeffect "# LLVM BB: BB_669", ""()
    %29 = load ptr, ptr %15, align 8
    call void @_Unwind_Resume(ptr %29) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJS3_NS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(16) %3, ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(8) %5, ptr noundef nonnull align 8 dereferenceable(8) %6) local_unnamed_addr #0 comdat {
  BB_670:
    call void asm sideeffect "# LLVM BB: BB_670", ""()
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = alloca ptr, align 8
    %13 = alloca ptr, align 8
    store ptr %0, ptr %7, align 8
    store ptr %1, ptr %8, align 8
    store ptr %2, ptr %9, align 8
    store ptr %3, ptr %10, align 8
    store ptr %4, ptr %11, align 8
    store ptr %5, ptr %12, align 8
    store ptr %6, ptr %13, align 8
    %14 = load ptr, ptr %7, align 8
    %15 = load ptr, ptr %8, align 8
    %16 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    %17 = load ptr, ptr %9, align 8
    %18 = load ptr, ptr %10, align 8
    %19 = load ptr, ptr %11, align 8
    %20 = load ptr, ptr %12, align 8
    %21 = load ptr, ptr %13, align 8
    %22 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 8 dereferenceable(16) %18, ptr noundef nonnull align 8 dereferenceable(8) %19, ptr noundef nonnull align 8 dereferenceable(8) %20, ptr noundef nonnull align 8 dereferenceable(8) %21)
    ret ptr %22
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(16) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 8 dereferenceable(8) %4, ptr noundef nonnull align 8 dereferenceable(8) %5) local_unnamed_addr #0 comdat {
  BB_671:
    call void asm sideeffect "# LLVM BB: BB_671", ""()
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    store ptr %0, ptr %6, align 8
    store ptr %1, ptr %7, align 8
    store ptr %2, ptr %8, align 8
    store ptr %3, ptr %9, align 8
    store ptr %4, ptr %10, align 8
    store ptr %5, ptr %11, align 8
    %12 = load ptr, ptr %6, align 8
    %13 = load ptr, ptr %7, align 8
    %14 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(8) %13)
    %15 = load ptr, ptr %8, align 8
    %16 = load ptr, ptr %9, align 8
    %17 = load ptr, ptr %10, align 8
    %18 = load ptr, ptr %11, align 8
    %19 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKclS5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(16) %15, ptr noundef nonnull align 8 dereferenceable(8) %16, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 8 dereferenceable(8) %18)
    ret ptr %19
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKclS5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(16) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 8 dereferenceable(8) %4) local_unnamed_addr #0 comdat {
  BB_672:
    call void asm sideeffect "# LLVM BB: BB_672", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %10 = load ptr, ptr %5, align 8
    %11 = load ptr, ptr %6, align 8
    %12 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(16) %11)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %8, align 8
    %15 = load ptr, ptr %9, align 8
    %16 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJlS3_EEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 8 dereferenceable(8) %13, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(8) %15)
    ret ptr %16
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJlS3_EEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 8 dereferenceable(8) %3) local_unnamed_addr #0 comdat {
  BB_673:
    call void asm sideeffect "# LLVM BB: BB_673", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    %11 = load ptr, ptr %6, align 8
    %12 = load ptr, ptr %7, align 8
    %13 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIlJPKcEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 8 dereferenceable(8) %12)
    ret ptr %13
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIlJPKcEEERSoS4_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 8 dereferenceable(8) %2) local_unnamed_addr #0 comdat {
  BB_674:
    call void asm sideeffect "# LLVM BB: BB_674", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIlEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 8 dereferenceable(8) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIlEERSoS2_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1) local_unnamed_addr #0 comdat {
  BB_675:
    call void asm sideeffect "# LLVM BB: BB_675", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i64, ptr %5, align 8
    %7 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZNSolsEl(ptr noundef nonnull align 8 dereferenceable(8) %4, i64 noundef %6)
    %8 = load ptr, ptr %2, align 8
    ret ptr %8
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local i16 @_ZNK3c1010TensorImpl5dtypeEv(ptr noundef nonnull align 8 dereferenceable(192) %0) local_unnamed_addr #3 comdat align 2 {
  BB_676:
    call void asm sideeffect "# LLVM BB: BB_676", ""()
    %1 = alloca %"class.caffe2::TypeMeta", align 2
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = getelementptr inbounds %"struct.c10::TensorImpl", ptr %3, i32 0, i32 9
    %5 = bitcast ptr %1 to ptr
    %6 = bitcast ptr %4 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %5, ptr align 8 %6, i64 2, i1 false)
    %7 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %1, i32 0, i32 0
    %8 = load i16, ptr %7, align 2
    ret i16 %8
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c103strIJA16_cN6caffe28TypeMetaEA34_cS3_EEEDcDpRKT_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 1 dereferenceable(16) %1, ptr noundef nonnull align 2 dereferenceable(2) %2, ptr noundef nonnull align 1 dereferenceable(34) %3, ptr noundef nonnull align 2 dereferenceable(2) %4) local_unnamed_addr #0 comdat {
  BB_677:
    call void asm sideeffect "# LLVM BB: BB_677", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca ptr, align 8
    %11 = alloca ptr, align 8
    %12 = bitcast ptr %0 to ptr
    store ptr %12, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %13 = load ptr, ptr %6, align 8
    %14 = getelementptr inbounds [16 x i8], ptr %13, i64 0, i64 0
    store ptr %14, ptr %10, align 8
    %15 = load ptr, ptr %7, align 8
    %16 = load ptr, ptr %8, align 8
    %17 = getelementptr inbounds [34 x i8], ptr %16, i64 0, i64 0
    store ptr %17, ptr %11, align 8
    %18 = load ptr, ptr %9, align 8
    call void @_ZN3c106detail12_str_wrapperIJPKcRKN6caffe28TypeMetaES3_S7_EE4callB5cxx11ERKS3_S7_SA_S7_(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 2 dereferenceable(2) %15, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 2 dereferenceable(2) %18)
    ret void
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail12_str_wrapperIJPKcRKN6caffe28TypeMetaES3_S7_EE4callB5cxx11ERKS3_S7_SA_S7_(ptr noalias sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 2 dereferenceable(2) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 2 dereferenceable(2) %4) local_unnamed_addr #0 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_678:
    call void asm sideeffect "# LLVM BB: BB_678", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    %10 = alloca %"class.std::__cxx11::basic_ostringstream", align 8
    %11 = alloca ptr, align 8
    %12 = alloca i32, align 4
    %13 = bitcast ptr %0 to ptr
    store ptr %13, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev(ptr noundef nonnull align 8 dereferenceable(112) %10)
    %14 = bitcast ptr %10 to ptr
    %15 = load ptr, ptr %6, align 8
    %16 = load ptr, ptr %7, align 8
    %17 = load ptr, ptr %8, align 8
    %18 = load ptr, ptr %9, align 8
    %19 = invoke noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaES3_S5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 8 dereferenceable(8) %15, ptr noundef nonnull align 2 dereferenceable(2) %16, ptr noundef nonnull align 8 dereferenceable(8) %17, ptr noundef nonnull align 2 dereferenceable(2) %18)
            to label %BB_679 unwind label %BB_681
  
  BB_679:                                           ; preds = %BB_678
    call void asm sideeffect "# LLVM BB: BB_679", ""()
    invoke void @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv(ptr sret(%"class.std::__cxx11::basic_string") align 8 %0, ptr noundef nonnull align 8 dereferenceable(112) %10)
            to label %BB_680 unwind label %BB_681
  
  BB_680:                                           ; preds = %BB_679
    call void asm sideeffect "# LLVM BB: BB_680", ""()
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %10) #15
    ret void
  
  BB_681:                                           ; preds = %BB_679, %BB_678
    %20 = landingpad { ptr, i32 }
            cleanup
    call void asm sideeffect "# LLVM BB: BB_681", ""()
    %21 = extractvalue { ptr, i32 } %20, 0
    store ptr %21, ptr %11, align 8
    %22 = extractvalue { ptr, i32 } %20, 1
    store i32 %22, ptr %12, align 4
    call void @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev(ptr noundef nonnull align 8 dereferenceable(112) %10) #15
    br label %BB_682
  
  BB_682:                                           ; preds = %BB_681
    call void asm sideeffect "# LLVM BB: BB_682", ""()
    %23 = load ptr, ptr %11, align 8
    call void @_Unwind_Resume(ptr %23) #14
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaES3_S5_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 2 dereferenceable(2) %2, ptr noundef nonnull align 8 dereferenceable(8) %3, ptr noundef nonnull align 2 dereferenceable(2) %4) local_unnamed_addr #0 comdat {
  BB_683:
    call void asm sideeffect "# LLVM BB: BB_683", ""()
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca ptr, align 8
    store ptr %0, ptr %5, align 8
    store ptr %1, ptr %6, align 8
    store ptr %2, ptr %7, align 8
    store ptr %3, ptr %8, align 8
    store ptr %4, ptr %9, align 8
    %10 = load ptr, ptr %5, align 8
    %11 = load ptr, ptr %6, align 8
    %12 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11)
    %13 = load ptr, ptr %7, align 8
    %14 = load ptr, ptr %8, align 8
    %15 = load ptr, ptr %9, align 8
    %16 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIN6caffe28TypeMetaEJPKcS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %12, ptr noundef nonnull align 2 dereferenceable(2) %13, ptr noundef nonnull align 8 dereferenceable(8) %14, ptr noundef nonnull align 2 dereferenceable(2) %15)
    ret ptr %16
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIN6caffe28TypeMetaEJPKcS3_EEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 2 dereferenceable(2) %1, ptr noundef nonnull align 8 dereferenceable(8) %2, ptr noundef nonnull align 2 dereferenceable(2) %3) local_unnamed_addr #0 comdat {
  BB_684:
    call void asm sideeffect "# LLVM BB: BB_684", ""()
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    store ptr %0, ptr %4, align 8
    store ptr %1, ptr %5, align 8
    store ptr %2, ptr %6, align 8
    store ptr %3, ptr %7, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 2 dereferenceable(2) %9)
    %11 = load ptr, ptr %6, align 8
    %12 = load ptr, ptr %7, align 8
    %13 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaEEEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %10, ptr noundef nonnull align 8 dereferenceable(8) %11, ptr noundef nonnull align 2 dereferenceable(2) %12)
    ret ptr %13
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaEEEERSoS6_RKT_DpRKT0_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 8 dereferenceable(8) %1, ptr noundef nonnull align 2 dereferenceable(2) %2) local_unnamed_addr #0 comdat {
  BB_685:
    call void asm sideeffect "# LLVM BB: BB_685", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store ptr %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = load ptr, ptr %4, align 8
    %8 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIPKcEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr noundef nonnull align 8 dereferenceable(8) %7)
    %9 = load ptr, ptr %5, align 8
    %10 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef nonnull align 2 dereferenceable(2) %9)
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr noundef nonnull align 2 dereferenceable(2) %1) local_unnamed_addr #0 comdat {
  BB_686:
    call void asm sideeffect "# LLVM BB: BB_686", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca %"class.caffe2::TypeMeta", align 2
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %5 = load ptr, ptr %2, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = bitcast ptr %4 to ptr
    %8 = bitcast ptr %6 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 2 %7, ptr align 2 %8, i64 2, i1 false)
    %9 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %4, i32 0, i32 0
    %10 = load i16, ptr %9, align 2
    %11 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN6caffe2lsERSoNS_8TypeMetaE(ptr noundef nonnull align 8 dereferenceable(8) %5, i16 %10)
    %12 = load ptr, ptr %2, align 8
    ret ptr %12
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN6caffe2lsERSoNS_8TypeMetaE(ptr noundef nonnull align 8 dereferenceable(8) %0, i16 %1) local_unnamed_addr #0 comdat {
  BB_687:
    call void asm sideeffect "# LLVM BB: BB_687", ""()
    %2 = alloca %"class.caffe2::TypeMeta", align 2
    %3 = alloca ptr, align 8
    %4 = alloca %"class.c10::basic_string_view", align 8
    %5 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    store i16 %1, ptr %5, align 2
    store ptr %0, ptr %3, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = call { ptr, i64 } @_ZNK6caffe28TypeMeta4nameEv(ptr noundef nonnull align 2 dereferenceable(2) %2) #15
    %8 = bitcast ptr %4 to ptr
    %9 = getelementptr inbounds { ptr, i64 }, ptr %8, i32 0, i32 0
    %10 = extractvalue { ptr, i64 } %7, 0
    store ptr %10, ptr %9, align 8
    %11 = getelementptr inbounds { ptr, i64 }, ptr %8, i32 0, i32 1
    %12 = extractvalue { ptr, i64 } %7, 1
    store i64 %12, ptr %11, align 8
    %13 = bitcast ptr %4 to ptr
    %14 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 0
    %15 = load ptr, ptr %14, align 8
    %16 = getelementptr inbounds { ptr, i64 }, ptr %13, i32 0, i32 1
    %17 = load i64, ptr %16, align 8
    %18 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsIcEERSt13basic_ostreamIT_St11char_traitsIS2_EES6_NS_17basic_string_viewIS2_EE(ptr noundef nonnull align 8 dereferenceable(8) %6, ptr %15, i64 %17)
    ret ptr %18
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZN3c10lsIcEERSt13basic_ostreamIT_St11char_traitsIS2_EES6_NS_17basic_string_viewIS2_EE(ptr noundef nonnull align 8 dereferenceable(8) %0, ptr %1, i64 %2) local_unnamed_addr #0 comdat {
  BB_688:
    call void asm sideeffect "# LLVM BB: BB_688", ""()
    %3 = alloca %"class.c10::basic_string_view", align 8
    %4 = alloca ptr, align 8
    %5 = alloca %"class.std::basic_string_view", align 8
    %6 = bitcast ptr %3 to ptr
    %7 = getelementptr inbounds { ptr, i64 }, ptr %6, i32 0, i32 0
    store ptr %1, ptr %7, align 8
    %8 = getelementptr inbounds { ptr, i64 }, ptr %6, i32 0, i32 1
    store i64 %2, ptr %8, align 8
    store ptr %0, ptr %4, align 8
    %9 = load ptr, ptr %4, align 8
    %10 = call noundef ptr @_ZNK3c1017basic_string_viewIcE4dataEv(ptr noundef nonnull align 8 dereferenceable(16) %3) #15
    %11 = call noundef i64 @_ZNK3c1017basic_string_viewIcE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %3) #15
    call void @_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm(ptr noundef nonnull align 8 dereferenceable(16) %5, ptr noundef %10, i64 noundef %11) #15
    %12 = bitcast ptr %5 to ptr
    %13 = getelementptr inbounds { i64, ptr }, ptr %12, i32 0, i32 0
    %14 = load i64, ptr %13, align 8
    %15 = getelementptr inbounds { i64, ptr }, ptr %12, i32 0, i32 1
    %16 = load ptr, ptr %15, align 8
    %17 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E(ptr noundef nonnull align 8 dereferenceable(8) %9, i64 %14, ptr %16)
    ret ptr %17
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local { ptr, i64 } @_ZNK6caffe28TypeMeta4nameEv(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #3 comdat align 2 personality ptr @__gxx_personality_v0 {
  BB_689:
    call void asm sideeffect "# LLVM BB: BB_689", ""()
    %1 = alloca %"class.c10::basic_string_view", align 8
    %2 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    %3 = load ptr, ptr %2, align 8
    %4 = invoke noundef nonnull align 8 dereferenceable(72) ptr @_ZNK6caffe28TypeMeta4dataEv(ptr noundef nonnull align 2 dereferenceable(2) %3)
            to label %BB_690 unwind label %BB_691
  
  BB_690:                                           ; preds = %BB_689
    call void asm sideeffect "# LLVM BB: BB_690", ""()
    %5 = getelementptr inbounds %"struct.caffe2::detail::TypeMetaData", ptr %4, i32 0, i32 7
    %6 = bitcast ptr %1 to ptr
    %7 = bitcast ptr %5 to ptr
    call void @llvm.memcpy.p0.p0.i64(ptr align 8 %6, ptr align 8 %7, i64 16, i1 false)
    %8 = bitcast ptr %1 to ptr
    %9 = load { ptr, i64 }, ptr %8, align 8
    ret { ptr, i64 } %9
  
  BB_691:                                           ; preds = %BB_689
    %10 = landingpad { ptr, i32 }
            catch ptr null
    call void asm sideeffect "# LLVM BB: BB_691", ""()
    %11 = extractvalue { ptr, i32 } %10, 0
    call void @__clang_call_terminate(ptr %11) #16
    unreachable
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E(ptr noundef nonnull align 8 dereferenceable(8) %0, i64 %1, ptr %2) local_unnamed_addr #0 comdat {
  BB_692:
    call void asm sideeffect "# LLVM BB: BB_692", ""()
    %3 = alloca %"class.std::basic_string_view", align 8
    %4 = alloca ptr, align 8
    %5 = bitcast ptr %3 to ptr
    %6 = getelementptr inbounds { i64, ptr }, ptr %5, i32 0, i32 0
    store i64 %1, ptr %6, align 8
    %7 = getelementptr inbounds { i64, ptr }, ptr %5, i32 0, i32 1
    store ptr %2, ptr %7, align 8
    store ptr %0, ptr %4, align 8
    %8 = load ptr, ptr %4, align 8
    %9 = call noundef ptr @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv(ptr noundef nonnull align 8 dereferenceable(16) %3) #15
    %10 = call noundef i64 @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %3) #15
    %11 = call noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8) %8, ptr noundef %9, i64 noundef %10)
    ret ptr %11
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNK3c1017basic_string_viewIcE4dataEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_693:
    call void asm sideeffect "# LLVM BB: BB_693", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::basic_string_view", ptr %2, i32 0, i32 0
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNK3c1017basic_string_viewIcE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_694:
    call void asm sideeffect "# LLVM BB: BB_694", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.c10::basic_string_view", ptr %2, i32 0, i32 1
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm(ptr noundef nonnull align 8 dereferenceable(16) %0, ptr noundef %1, i64 noundef %2) unnamed_addr #4 comdat align 2 {
  BB_695:
    call void asm sideeffect "# LLVM BB: BB_695", ""()
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    %5 = alloca i64, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    store i64 %2, ptr %5, align 8
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"class.std::basic_string_view", ptr %6, i32 0, i32 0
    %8 = load i64, ptr %5, align 8
    store i64 %8, ptr %7, align 8
    %9 = getelementptr inbounds %"class.std::basic_string_view", ptr %6, i32 0, i32 1
    %10 = load ptr, ptr %4, align 8
    store ptr %10, ptr %9, align 8
    ret void
  }
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(ptr noundef nonnull align 8 dereferenceable(8), ptr noundef, i64 noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_696:
    call void asm sideeffect "# LLVM BB: BB_696", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::basic_string_view", ptr %2, i32 0, i32 1
    %4 = load ptr, ptr %3, align 8
    ret ptr %4
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef i64 @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat align 2 {
  BB_697:
    call void asm sideeffect "# LLVM BB: BB_697", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = getelementptr inbounds %"class.std::basic_string_view", ptr %2, i32 0, i32 0
    %4 = load i64, ptr %3, align 8
    ret i64 %4
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(72) ptr @_ZNK6caffe28TypeMeta4dataEv(ptr noundef nonnull align 2 dereferenceable(2) %0) local_unnamed_addr #0 comdat align 2 {
  BB_698:
    call void asm sideeffect "# LLVM BB: BB_698", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    %3 = call noundef ptr @_ZN6caffe28TypeMeta13typeMetaDatasEv()
    %4 = getelementptr inbounds %"class.caffe2::TypeMeta", ptr %2, i32 0, i32 0
    %5 = load i16, ptr %4, align 2
    %6 = zext i16 %5 to i64
    %7 = getelementptr inbounds %"struct.caffe2::detail::TypeMetaData", ptr %3, i64 %6
    ret ptr %7
  }
  
  declare noundef ptr @_ZN6caffe28TypeMeta13typeMetaDatasEv() local_unnamed_addr #6
  
  declare noundef nonnull align 8 dereferenceable(8) ptr @_ZN2at4_ops5zero_4callERNS_6TensorE(ptr noundef nonnull align 8 dereferenceable(8)) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 4 dereferenceable(4) ptr @_ZSt3maxIiERKT_S2_S2_(ptr noundef nonnull align 4 dereferenceable(4) %0, ptr noundef nonnull align 4 dereferenceable(4) %1) local_unnamed_addr #3 comdat {
  BB_699:
    call void asm sideeffect "# LLVM BB: BB_699", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    %4 = alloca ptr, align 8
    store ptr %0, ptr %3, align 8
    store ptr %1, ptr %4, align 8
    %5 = load ptr, ptr %3, align 8
    %6 = load i32, ptr %5, align 4
    %7 = load ptr, ptr %4, align 8
    %8 = load i32, ptr %7, align 4
    %9 = icmp slt i32 %6, %8
    br i1 %9, label %BB_700, label %BB_701
  
  BB_700:                                           ; preds = %BB_699
    call void asm sideeffect "# LLVM BB: BB_700", ""()
    %10 = load ptr, ptr %4, align 8
    store ptr %10, ptr %2, align 8
    br label %BB_702
  
  BB_701:                                           ; preds = %BB_699
    call void asm sideeffect "# LLVM BB: BB_701", ""()
    %11 = load ptr, ptr %3, align 8
    store ptr %11, ptr %2, align 8
    br label %BB_702
  
  BB_702:                                           ; preds = %BB_701, %BB_700
    call void asm sideeffect "# LLVM BB: BB_702", ""()
    %12 = load ptr, ptr %2, align 8
    ret ptr %12
  }
  
  ; Function Attrs: noinline optnone uwtable
  define linkonce_odr dso_local void @_ZN3c1013integer_rangeIiLb0ELb1EEC2Eii(ptr noundef nonnull align 4 dereferenceable(8) %0, i32 noundef %1, i32 noundef %2) unnamed_addr #5 comdat align 2 {
  BB_703:
    call void asm sideeffect "# LLVM BB: BB_703", ""()
    %3 = alloca ptr, align 8
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    store ptr %0, ptr %3, align 8
    store i32 %1, ptr %4, align 4
    store i32 %2, ptr %5, align 4
    %6 = load ptr, ptr %3, align 8
    %7 = getelementptr inbounds %"struct.c10::integer_range", ptr %6, i32 0, i32 0
    %8 = load i32, ptr %4, align 4
    call void @_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei(ptr noundef nonnull align 4 dereferenceable(4) %7, i32 noundef %8)
    %9 = getelementptr inbounds %"struct.c10::integer_range", ptr %6, i32 0, i32 1
    %10 = load i32, ptr %5, align 4
    call void @_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei(ptr noundef nonnull align 4 dereferenceable(4) %9, i32 noundef %10)
    ret void
  }
  
  ; Function Attrs: noinline nounwind optnone uwtable
  define linkonce_odr dso_local void @_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei(ptr noundef nonnull align 4 dereferenceable(4) %0, i32 noundef %1) unnamed_addr #4 comdat align 2 {
  BB_704:
    call void asm sideeffect "# LLVM BB: BB_704", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i32, align 4
    store ptr %0, ptr %2, align 8
    store i32 %1, ptr %3, align 4
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %4, i32 0, i32 0
    %6 = load i32, ptr %3, align 4
    store i32 %6, ptr %5, align 4
    ret void
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef zeroext i1 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEeqERKS2_(ptr noundef nonnull align 4 dereferenceable(4) %0, ptr noundef nonnull align 4 dereferenceable(4) %1) local_unnamed_addr #3 comdat align 2 {
  BB_705:
    call void asm sideeffect "# LLVM BB: BB_705", ""()
    %2 = alloca ptr, align 8
    %3 = alloca ptr, align 8
    store ptr %0, ptr %2, align 8
    store ptr %1, ptr %3, align 8
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %4, i32 0, i32 0
    %6 = load i32, ptr %5, align 4
    %7 = load ptr, ptr %3, align 8
    %8 = getelementptr inbounds %"struct.c10::detail::integer_iterator", ptr %7, i32 0, i32 0
    %9 = load i32, ptr %8, align 4
    %10 = icmp eq i32 %6, %9
    ret i1 %10
  }
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE12get_call_ptrENS5_10DeviceTypeE(ptr noundef nonnull align 8 dereferenceable(40) %0, i8 noundef signext %1) local_unnamed_addr #0 comdat align 2 {
  BB_706:
    call void asm sideeffect "# LLVM BB: BB_706", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i8 %1, ptr %3, align 1
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.at::native::DispatchStub", ptr %4, i32 0, i32 0
    %6 = load i8, ptr %3, align 1
    %7 = load ptr, ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE7DEFAULTE, align 8
    %8 = bitcast ptr %7 to ptr
    %9 = call noundef ptr @_ZN2at6native16DispatchStubImpl12get_call_ptrEN3c1010DeviceTypeEPv(ptr noundef nonnull align 8 dereferenceable(40) %5, i8 noundef signext %6, ptr noundef %8)
    %10 = bitcast ptr %9 to ptr
    ret ptr %10
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(8) ptr @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(8) %0) local_unnamed_addr #3 comdat {
  BB_707:
    call void asm sideeffect "# LLVM BB: BB_707", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  ; Function Attrs: mustprogress noinline nounwind optnone uwtable
  define linkonce_odr dso_local noundef nonnull align 8 dereferenceable(16) ptr @_ZSt7forwardIRN3c108ArrayRefIlEEEOT_RNSt16remove_referenceIS4_E4typeE(ptr noundef nonnull align 8 dereferenceable(16) %0) local_unnamed_addr #3 comdat {
  BB_708:
    call void asm sideeffect "# LLVM BB: BB_708", ""()
    %1 = alloca ptr, align 8
    store ptr %0, ptr %1, align 8
    %2 = load ptr, ptr %1, align 8
    ret ptr %2
  }
  
  declare noundef ptr @_ZN2at6native16DispatchStubImpl12get_call_ptrEN3c1010DeviceTypeEPv(ptr noundef nonnull align 8 dereferenceable(40), i8 noundef signext, ptr noundef) local_unnamed_addr #6
  
  ; Function Attrs: mustprogress noinline optnone uwtable
  define linkonce_odr dso_local noundef ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE12get_call_ptrEN3c1010DeviceTypeE(ptr noundef nonnull align 8 dereferenceable(40) %0, i8 noundef signext %1) local_unnamed_addr #0 comdat align 2 {
  BB_709:
    call void asm sideeffect "# LLVM BB: BB_709", ""()
    %2 = alloca ptr, align 8
    %3 = alloca i8, align 1
    store ptr %0, ptr %2, align 8
    store i8 %1, ptr %3, align 1
    %4 = load ptr, ptr %2, align 8
    %5 = getelementptr inbounds %"struct.at::native::DispatchStub.53", ptr %4, i32 0, i32 0
    %6 = load i8, ptr %3, align 1
    %7 = load ptr, ptr @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE7DEFAULTE, align 8
    %8 = bitcast ptr %7 to ptr
    %9 = call noundef ptr @_ZN2at6native16DispatchStubImpl12get_call_ptrEN3c1010DeviceTypeEPv(ptr noundef nonnull align 8 dereferenceable(40) %5, i8 noundef signext %6, ptr noundef %8)
    %10 = bitcast ptr %9 to ptr
    ret ptr %10
  }
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #13
  
  declare void @_Unwind_Resume(ptr)
  
  attributes #0 = { mustprogress noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { noreturn "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #4 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #5 = { noinline optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #6 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #7 = { noinline noreturn nounwind }
  attributes #8 = { noreturn nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #9 = { mustprogress noinline noreturn optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #10 = { mustprogress nofree nounwind willreturn memory(argmem: read) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #11 = { nobuiltin allocsize(0) "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #12 = { nobuiltin nounwind "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #13 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
  attributes #14 = { noreturn }
  attributes #15 = { nounwind }
  attributes #16 = { noreturn nounwind }
  attributes #17 = { builtin allocsize(0) }
  attributes #18 = { builtin nounwind }
  
  !llvm.module.flags = !{!0, !1, !2, !3, !4}
  !llvm.ident = !{!5}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 1}
  !4 = !{i32 7, !"frame-pointer", i32 2}
  !5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
  !6 = distinct !{!6, !7}
  !7 = !{!"llvm.loop.mustprogress"}

...
---
name:            _ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr8, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
  - { id: 45, class: gr8, preferred-register: '' }
  - { id: 46, class: gr8, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr32, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr32, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr64, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr64, preferred-register: '' }
  - { id: 88, class: gr32, preferred-register: '' }
  - { id: 89, class: gr64, preferred-register: '' }
  - { id: 90, class: gr32, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr32, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr64, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr64, preferred-register: '' }
  - { id: 101, class: gr64, preferred-register: '' }
  - { id: 102, class: gr64, preferred-register: '' }
  - { id: 103, class: gr64, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr64, preferred-register: '' }
  - { id: 106, class: gr64, preferred-register: '' }
  - { id: 107, class: gr64, preferred-register: '' }
  - { id: 108, class: gr64, preferred-register: '' }
  - { id: 109, class: gr64, preferred-register: '' }
  - { id: 110, class: gr64, preferred-register: '' }
  - { id: 111, class: gr64, preferred-register: '' }
  - { id: 112, class: gr64, preferred-register: '' }
  - { id: 113, class: gr64, preferred-register: '' }
  - { id: 114, class: gr64, preferred-register: '' }
  - { id: 115, class: gr64, preferred-register: '' }
  - { id: 116, class: gr16, preferred-register: '' }
  - { id: 117, class: gr32, preferred-register: '' }
  - { id: 118, class: gr64, preferred-register: '' }
  - { id: 119, class: gr64, preferred-register: '' }
  - { id: 120, class: gr64, preferred-register: '' }
  - { id: 121, class: gr64, preferred-register: '' }
  - { id: 122, class: gr64, preferred-register: '' }
  - { id: 123, class: gr16, preferred-register: '' }
  - { id: 124, class: gr32, preferred-register: '' }
  - { id: 125, class: gr64, preferred-register: '' }
  - { id: 126, class: gr64, preferred-register: '' }
  - { id: 127, class: gr64, preferred-register: '' }
  - { id: 128, class: gr8, preferred-register: '' }
  - { id: 129, class: gr64, preferred-register: '' }
  - { id: 130, class: gr32, preferred-register: '' }
  - { id: 131, class: gr8, preferred-register: '' }
  - { id: 132, class: gr64, preferred-register: '' }
  - { id: 133, class: gr64, preferred-register: '' }
  - { id: 134, class: gr64, preferred-register: '' }
  - { id: 135, class: gr64, preferred-register: '' }
  - { id: 136, class: gr64, preferred-register: '' }
  - { id: 137, class: gr64, preferred-register: '' }
  - { id: 138, class: gr64, preferred-register: '' }
  - { id: 139, class: gr64, preferred-register: '' }
  - { id: 140, class: gr64, preferred-register: '' }
  - { id: 141, class: gr64, preferred-register: '' }
  - { id: 142, class: gr64, preferred-register: '' }
  - { id: 143, class: gr64, preferred-register: '' }
  - { id: 144, class: gr64, preferred-register: '' }
  - { id: 145, class: gr64, preferred-register: '' }
  - { id: 146, class: gr64, preferred-register: '' }
  - { id: 147, class: gr64, preferred-register: '' }
  - { id: 148, class: gr64, preferred-register: '' }
  - { id: 149, class: gr64, preferred-register: '' }
  - { id: 150, class: gr64, preferred-register: '' }
  - { id: 151, class: gr64, preferred-register: '' }
  - { id: 152, class: gr64, preferred-register: '' }
  - { id: 153, class: gr32, preferred-register: '' }
  - { id: 154, class: gr64, preferred-register: '' }
  - { id: 155, class: gr64, preferred-register: '' }
  - { id: 156, class: gr64, preferred-register: '' }
  - { id: 157, class: gr64, preferred-register: '' }
  - { id: 158, class: gr64, preferred-register: '' }
  - { id: 159, class: gr64, preferred-register: '' }
  - { id: 160, class: gr64, preferred-register: '' }
  - { id: 161, class: gr64, preferred-register: '' }
  - { id: 162, class: gr64, preferred-register: '' }
  - { id: 163, class: gr64, preferred-register: '' }
  - { id: 164, class: gr64, preferred-register: '' }
  - { id: 165, class: gr64, preferred-register: '' }
  - { id: 166, class: gr64, preferred-register: '' }
  - { id: 167, class: gr64, preferred-register: '' }
  - { id: 168, class: gr64, preferred-register: '' }
  - { id: 169, class: gr64, preferred-register: '' }
  - { id: 170, class: gr64, preferred-register: '' }
  - { id: 171, class: gr64, preferred-register: '' }
  - { id: 172, class: gr64, preferred-register: '' }
  - { id: 173, class: gr64, preferred-register: '' }
  - { id: 174, class: gr16, preferred-register: '' }
  - { id: 175, class: gr32, preferred-register: '' }
  - { id: 176, class: gr64, preferred-register: '' }
  - { id: 177, class: gr64, preferred-register: '' }
  - { id: 178, class: gr64, preferred-register: '' }
  - { id: 179, class: gr8, preferred-register: '' }
  - { id: 180, class: gr64, preferred-register: '' }
  - { id: 181, class: gr32, preferred-register: '' }
  - { id: 182, class: gr8, preferred-register: '' }
  - { id: 183, class: gr64, preferred-register: '' }
  - { id: 184, class: gr64, preferred-register: '' }
  - { id: 185, class: gr64, preferred-register: '' }
  - { id: 186, class: gr64, preferred-register: '' }
  - { id: 187, class: gr64, preferred-register: '' }
  - { id: 188, class: gr64, preferred-register: '' }
  - { id: 189, class: gr64, preferred-register: '' }
  - { id: 190, class: gr64, preferred-register: '' }
  - { id: 191, class: gr64, preferred-register: '' }
  - { id: 192, class: gr64, preferred-register: '' }
  - { id: 193, class: gr64, preferred-register: '' }
  - { id: 194, class: gr64, preferred-register: '' }
  - { id: 195, class: gr64, preferred-register: '' }
  - { id: 196, class: gr64, preferred-register: '' }
  - { id: 197, class: gr64, preferred-register: '' }
  - { id: 198, class: gr64, preferred-register: '' }
  - { id: 199, class: gr64, preferred-register: '' }
  - { id: 200, class: gr64, preferred-register: '' }
  - { id: 201, class: gr64, preferred-register: '' }
  - { id: 202, class: gr64, preferred-register: '' }
  - { id: 203, class: gr64, preferred-register: '' }
  - { id: 204, class: gr64, preferred-register: '' }
  - { id: 205, class: gr64, preferred-register: '' }
  - { id: 206, class: gr64, preferred-register: '' }
  - { id: 207, class: gr64, preferred-register: '' }
  - { id: 208, class: gr64, preferred-register: '' }
  - { id: 209, class: gr64, preferred-register: '' }
  - { id: 210, class: gr64, preferred-register: '' }
  - { id: 211, class: gr64, preferred-register: '' }
  - { id: 212, class: gr64, preferred-register: '' }
  - { id: 213, class: gr64, preferred-register: '' }
  - { id: 214, class: gr64, preferred-register: '' }
  - { id: 215, class: gr64, preferred-register: '' }
  - { id: 216, class: gr64, preferred-register: '' }
  - { id: 217, class: gr64, preferred-register: '' }
  - { id: 218, class: gr64, preferred-register: '' }
  - { id: 219, class: gr64, preferred-register: '' }
  - { id: 220, class: gr64, preferred-register: '' }
  - { id: 221, class: gr64, preferred-register: '' }
  - { id: 222, class: gr64, preferred-register: '' }
  - { id: 223, class: gr64, preferred-register: '' }
  - { id: 224, class: gr16, preferred-register: '' }
  - { id: 225, class: gr32, preferred-register: '' }
  - { id: 226, class: gr64, preferred-register: '' }
  - { id: 227, class: gr64, preferred-register: '' }
  - { id: 228, class: gr64, preferred-register: '' }
  - { id: 229, class: gr64, preferred-register: '' }
  - { id: 230, class: gr64, preferred-register: '' }
  - { id: 231, class: gr64, preferred-register: '' }
  - { id: 232, class: gr64, preferred-register: '' }
  - { id: 233, class: gr64, preferred-register: '' }
  - { id: 234, class: gr64, preferred-register: '' }
  - { id: 235, class: gr64, preferred-register: '' }
  - { id: 236, class: gr64, preferred-register: '' }
  - { id: 237, class: gr64, preferred-register: '' }
  - { id: 238, class: gr64, preferred-register: '' }
  - { id: 239, class: gr64, preferred-register: '' }
  - { id: 240, class: gr64, preferred-register: '' }
  - { id: 241, class: gr64, preferred-register: '' }
  - { id: 242, class: gr64, preferred-register: '' }
  - { id: 243, class: gr64, preferred-register: '' }
  - { id: 244, class: gr64, preferred-register: '' }
  - { id: 245, class: gr64, preferred-register: '' }
  - { id: 246, class: gr32, preferred-register: '' }
  - { id: 247, class: gr64, preferred-register: '' }
  - { id: 248, class: gr64, preferred-register: '' }
  - { id: 249, class: gr64, preferred-register: '' }
  - { id: 250, class: gr64, preferred-register: '' }
  - { id: 251, class: gr64, preferred-register: '' }
  - { id: 252, class: gr64, preferred-register: '' }
  - { id: 253, class: gr64, preferred-register: '' }
  - { id: 254, class: gr64, preferred-register: '' }
  - { id: 255, class: gr64, preferred-register: '' }
  - { id: 256, class: gr64, preferred-register: '' }
  - { id: 257, class: gr64, preferred-register: '' }
  - { id: 258, class: gr64, preferred-register: '' }
  - { id: 259, class: gr64, preferred-register: '' }
  - { id: 260, class: gr64, preferred-register: '' }
  - { id: 261, class: gr64, preferred-register: '' }
  - { id: 262, class: gr64, preferred-register: '' }
  - { id: 263, class: gr64, preferred-register: '' }
  - { id: 264, class: gr64, preferred-register: '' }
  - { id: 265, class: gr64, preferred-register: '' }
  - { id: 266, class: gr64, preferred-register: '' }
  - { id: 267, class: gr64, preferred-register: '' }
  - { id: 268, class: gr64, preferred-register: '' }
  - { id: 269, class: gr64, preferred-register: '' }
  - { id: 270, class: gr64, preferred-register: '' }
  - { id: 271, class: gr64, preferred-register: '' }
  - { id: 272, class: gr64, preferred-register: '' }
  - { id: 273, class: gr64, preferred-register: '' }
  - { id: 274, class: gr64, preferred-register: '' }
  - { id: 275, class: gr64, preferred-register: '' }
  - { id: 276, class: gr64, preferred-register: '' }
  - { id: 277, class: gr64, preferred-register: '' }
  - { id: 278, class: gr64, preferred-register: '' }
  - { id: 279, class: gr64, preferred-register: '' }
  - { id: 280, class: gr64, preferred-register: '' }
  - { id: 281, class: gr64, preferred-register: '' }
  - { id: 282, class: gr64, preferred-register: '' }
  - { id: 283, class: gr32, preferred-register: '' }
  - { id: 284, class: gr64, preferred-register: '' }
  - { id: 285, class: gr64, preferred-register: '' }
  - { id: 286, class: gr64, preferred-register: '' }
  - { id: 287, class: gr64, preferred-register: '' }
  - { id: 288, class: gr8, preferred-register: '' }
  - { id: 289, class: gr8, preferred-register: '' }
  - { id: 290, class: gr8, preferred-register: '' }
  - { id: 291, class: gr8, preferred-register: '' }
  - { id: 292, class: gr64, preferred-register: '' }
  - { id: 293, class: gr64, preferred-register: '' }
  - { id: 294, class: gr64, preferred-register: '' }
  - { id: 295, class: gr64, preferred-register: '' }
  - { id: 296, class: gr32, preferred-register: '' }
  - { id: 297, class: gr64, preferred-register: '' }
  - { id: 298, class: gr64, preferred-register: '' }
  - { id: 299, class: gr64, preferred-register: '' }
  - { id: 300, class: gr32, preferred-register: '' }
  - { id: 301, class: gr64, preferred-register: '' }
  - { id: 302, class: gr32, preferred-register: '' }
  - { id: 303, class: gr64, preferred-register: '' }
  - { id: 304, class: gr64, preferred-register: '' }
  - { id: 305, class: gr64, preferred-register: '' }
  - { id: 306, class: gr64, preferred-register: '' }
  - { id: 307, class: gr64, preferred-register: '' }
  - { id: 308, class: gr64, preferred-register: '' }
  - { id: 309, class: gr64, preferred-register: '' }
  - { id: 310, class: gr64, preferred-register: '' }
  - { id: 311, class: gr64, preferred-register: '' }
  - { id: 312, class: gr64, preferred-register: '' }
  - { id: 313, class: gr64, preferred-register: '' }
  - { id: 314, class: gr64, preferred-register: '' }
  - { id: 315, class: gr64, preferred-register: '' }
  - { id: 316, class: gr64, preferred-register: '' }
  - { id: 317, class: gr32, preferred-register: '' }
  - { id: 318, class: gr64, preferred-register: '' }
  - { id: 319, class: gr64, preferred-register: '' }
  - { id: 320, class: gr64, preferred-register: '' }
  - { id: 321, class: gr32, preferred-register: '' }
  - { id: 322, class: gr64, preferred-register: '' }
  - { id: 323, class: gr32, preferred-register: '' }
  - { id: 324, class: gr64, preferred-register: '' }
  - { id: 325, class: gr64, preferred-register: '' }
  - { id: 326, class: gr64, preferred-register: '' }
  - { id: 327, class: gr64, preferred-register: '' }
  - { id: 328, class: gr64, preferred-register: '' }
  - { id: 329, class: gr64, preferred-register: '' }
  - { id: 330, class: gr64, preferred-register: '' }
  - { id: 331, class: gr64, preferred-register: '' }
  - { id: 332, class: gr64, preferred-register: '' }
  - { id: 333, class: gr64, preferred-register: '' }
  - { id: 334, class: gr32, preferred-register: '' }
  - { id: 335, class: gr64, preferred-register: '' }
  - { id: 336, class: gr64, preferred-register: '' }
  - { id: 337, class: gr64, preferred-register: '' }
  - { id: 338, class: gr32, preferred-register: '' }
  - { id: 339, class: gr64, preferred-register: '' }
  - { id: 340, class: gr32, preferred-register: '' }
  - { id: 341, class: gr64, preferred-register: '' }
  - { id: 342, class: gr64, preferred-register: '' }
  - { id: 343, class: gr64, preferred-register: '' }
  - { id: 344, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%5' }
  - { reg: '$rdx', virtual-reg: '%7' }
  - { reg: '$rcx', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 8, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 11, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 12, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 13, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 14, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 15, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 16, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 17, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 18, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 19, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 20, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 21, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 22, name: '', type: default, offset: 0, size: 24, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 23, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 24, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 25, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 26, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 27, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 28, name: '', type: default, offset: 0, size: 24, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 29, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 30, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 31, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 32, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 33, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 34, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 35, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 36, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 37, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 38, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 39, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 40, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 41, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 42, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 43, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 44, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 45, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 46, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 47, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 48, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 49, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 50, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 51, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 52, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 53, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_0:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %9:gr64 = COPY $rcx
    %7:gr64 = COPY $rdx
    %5:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    %8:gr64 = COPY killed %7
    %10:gr64 = COPY killed %9
    INLINEASM &"# LLVM BB: BB_0", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.59)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %10 :: (store (s64) into %ir.60)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.6)
    %20:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %19:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    CALL64pcrel32 @_ZNK2at10TensorBase10ndimensionEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %15:gr32 = COPY %17.sub_32bit
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15 :: (store (s32) into %ir.7)
    %11:gr8 = MOV8ri 1
    CMP32mi %stack.3, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (load (s32) from %ir.7)
    %344:gr8 = COPY %11
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_1:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_1", 1 /* sideeffect attdialect */
    CMP32mi %stack.3, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (load (s32) from %ir.7)
    %21:gr8 = SETCCr 4, implicit $eflags
    %344:gr8 = COPY %21
  
  bb.2.BB_2:
    successors: %bb.3(0x40000000), %bb.6(0x40000000)
  
    %2:gr8 = COPY %344
    INLINEASM &"# LLVM BB: BB_2", 1 /* sideeffect attdialect */
    %24:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %24, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.3.BB_3:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_3", 1 /* sideeffect attdialect */
    %325:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %325
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %326:gr64 = COPY $rax
    %327:gr64 = COPY $rdx
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %326 :: (store (s64) into %ir.76)
    MOV64mr %stack.5, 1, $noreg, 8, $noreg, %327 :: (store (s64) into %ir.78)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %328:gr64 = MOV32ri64 @.str.1
    %329:gr64 = MOV32ri64 @.str.2
    %330:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %331:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %330
    $rsi = COPY %328
    $rdx = COPY %329
    $rcx = COPY %331
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplIJA59_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %332:gr64 = MOV32ri64 @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
    %333:gr64 = MOV32ri64 @.str
    %334:gr32 = MOV32ri 20
    $rdi = COPY %332
    $rsi = COPY %333
    $edx = COPY %334
    $rcx = COPY %330
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.4
  
  bb.4.BB_4:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_4", 1 /* sideeffect attdialect */
  
  bb.5.BB_5 (landing-pad):
    successors: %bb.22(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %336:gr64 = COPY killed $rdx
    %335:gr64 = COPY killed $rax
    %340:gr32 = COPY %336.sub_32bit
    %339:gr64 = COPY %335
    INLINEASM &"# LLVM BB: BB_5", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %339 :: (store (s64) into %ir.10)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %340 :: (store (s32) into %ir.11)
    %337:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %337
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.22
  
  bb.6.BB_6:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_6", 1 /* sideeffect attdialect */
    %38:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    %35:gr32 = MOV32ri 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %35
    $esi = COPY %38
    CALL64pcrel32 @_ZN3c106irangeIiiLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %37:gr64 = COPY $rax
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, %37 :: (store (s64) into %ir.85, align 4)
    %33:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %33 :: (store (s64) into %ir.12)
    %32:gr64 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %32
    CALL64pcrel32 @_ZNK3c1013integer_rangeIiLb0ELb1EE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %31:gr32 = COPY $eax
    MOV32mr %stack.10, 1, $noreg, 0, $noreg, %31 :: (store (s32) into %ir.88)
    %28:gr64 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    CALL64pcrel32 @_ZNK3c1013integer_rangeIiLb0ELb1EE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %27:gr32 = COPY $eax
    MOV32mr %stack.11, 1, $noreg, 0, $noreg, %27 :: (store (s32) into %ir.91)
  
  bb.7.BB_7:
    successors: %bb.8(0x40000000), %bb.14(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_7", 1 /* sideeffect attdialect */
    %40:gr64 = LEA64r %stack.10, 1, $noreg, 0, $noreg
    %41:gr64 = LEA64r %stack.11, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %40
    $rsi = COPY %41
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEneERKS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %42:gr8 = COPY $al
    TEST8ri %42, 1, implicit-def $eflags
    JCC_1 %bb.8, 5, implicit $eflags
    JMP_1 %bb.14
  
  bb.8.BB_8:
    successors: %bb.9(0x40000000), %bb.12(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_8", 1 /* sideeffect attdialect */
    %301:gr64 = LEA64r %stack.10, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %301
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %302:gr32 = COPY $eax
    MOV32mr %stack.12, 1, $noreg, 0, $noreg, %302 :: (store (s32) into %ir.16)
    %299:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %297:gr64 = MOVSX64rm32 %stack.12, 1, $noreg, 0, $noreg :: (load (s32) from %ir.16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %299
    $rsi = COPY %297
    CALL64pcrel32 @_ZNK2at10TensorBase4sizeEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %295:gr64 = COPY $rax
    CMP64ri32 %295, 0, implicit-def $eflags
    %291:gr8 = SETCCr 15, implicit $eflags
    %290:gr8 = XOR8ri %291, -1, implicit-def $eflags
    TEST8ri %290, 1, implicit-def $eflags
    JCC_1 %bb.9, 5, implicit $eflags
    JMP_1 %bb.12
  
  bb.9.BB_9:
    successors: %bb.10(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_9", 1 /* sideeffect attdialect */
    %305:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %305
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %306:gr64 = COPY $rax
    %307:gr64 = COPY $rdx
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, %306 :: (store (s64) into %ir.105)
    MOV64mr %stack.14, 1, $noreg, 8, $noreg, %307 :: (store (s64) into %ir.107)
    ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %308:gr64 = COPY $rsp
    MOV64mi32 %308, 1, $noreg, 0, $noreg, @.str.6 :: (store (s64) into stack)
    %309:gr64 = MOV32ri64 @.str.3
    %310:gr64 = MOV32ri64 @.str.4
    %311:gr64 = MOV32ri64 @.str.5
    %312:gr64 = LEA64r %stack.13, 1, $noreg, 0, $noreg
    %313:gr64 = LEA64r %stack.14, 1, $noreg, 0, $noreg
    %314:gr64 = LEA64r %stack.12, 1, $noreg, 0, $noreg
    $rdi = COPY %312
    $rsi = COPY %309
    $rdx = COPY %310
    $rcx = COPY %313
    $r8 = COPY %311
    $r9 = COPY %314
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcPKcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %315:gr64 = MOV32ri64 @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
    %316:gr64 = MOV32ri64 @.str
    %317:gr32 = MOV32ri 25
    $rdi = COPY %315
    $rsi = COPY %316
    $edx = COPY %317
    $rcx = COPY %312
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.10
  
  bb.10.BB_10:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_10", 1 /* sideeffect attdialect */
  
  bb.11.BB_11 (landing-pad):
    successors: %bb.22(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %319:gr64 = COPY killed $rdx
    %318:gr64 = COPY killed $rax
    %323:gr32 = COPY %319.sub_32bit
    %322:gr64 = COPY %318
    INLINEASM &"# LLVM BB: BB_11", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %322 :: (store (s64) into %ir.10)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %323 :: (store (s32) into %ir.11)
    %320:gr64 = LEA64r %stack.13, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %320
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.22
  
  bb.12.BB_12:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_12", 1 /* sideeffect attdialect */
  
  bb.13.BB_13:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_13", 1 /* sideeffect attdialect */
    %303:gr64 = LEA64r %stack.10, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %303
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIiLb0ELi0EEppEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %304:gr64 = COPY $rax
    JMP_1 %bb.7
  
  bb.14.BB_14:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_14", 1 /* sideeffect attdialect */
    %48:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %48
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %49:gr64 = COPY $rax
    CMP64ri32 %49, 2, implicit-def $eflags
    %46:gr8 = SETCCr 4, implicit $eflags
    %45:gr8 = XOR8ri %46, -1, implicit-def $eflags
    TEST8ri %45, 1, implicit-def $eflags
    JCC_1 %bb.15, 5, implicit $eflags
    JMP_1 %bb.16
  
  bb.15.BB_15:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_15", 1 /* sideeffect attdialect */
    %285:gr64 = MOV64ri @.str.7
    %286:gr64 = MOV64ri @.str.8
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %285
    $rsi = COPY %286
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplEPKcS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %287:gr64 = COPY $rax
    %281:gr64 = MOV64ri @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
    %282:gr64 = MOV64ri @.str
    %283:gr32 = MOV32ri 29
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %281
    $rsi = COPY %282
    $edx = COPY %283
    $rcx = COPY %287
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.16.BB_16:
    successors: %bb.18(0x40000000), %bb.17(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_16", 1 /* sideeffect attdialect */
    MOV32mi %stack.15, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.19)
    MOV64mi32 %stack.16, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.20)
    MOV64mi32 %stack.17, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.21)
    %54:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %54
    CALL64pcrel32 @_ZNK2at10TensorBase10ndimensionEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %52:gr64 = COPY $rax
    CMP64ri32 %52, 4, implicit-def $eflags
    JCC_1 %bb.18, 5, implicit $eflags
  
  bb.17.BB_17:
    successors: %bb.18(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_17", 1 /* sideeffect attdialect */
    %65:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %61:gr32 = MOV32r0 implicit-def $eflags
    %62:gr64 = SUBREG_TO_REG 0, %61, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %65
    $rsi = COPY %62
    CALL64pcrel32 @_ZNK2at10TensorBase4sizeEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %63:gr64 = COPY $rax
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, %63 :: (store (s64) into %ir.20)
    %58:gr32 = MOV32rm %stack.15, 1, $noreg, 0, $noreg :: (load (s32) from %ir.19)
    %57:gr32 = ADD32ri %58, 1, implicit-def $eflags
    MOV32mr %stack.15, 1, $noreg, 0, $noreg, %57 :: (store (s32) into %ir.19)
  
  bb.18.BB_18:
    successors: %bb.20(0x40000000), %bb.19(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_18", 1 /* sideeffect attdialect */
    %94:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %92:gr32 = MOV32rm %stack.15, 1, $noreg, 0, $noreg :: (load (s32) from %ir.19)
    %91:gr32 = SUB32ri %92, 1, implicit-def $eflags
    %89:gr64 = MOVSX64rr32 %91
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %94
    $rsi = COPY %89
    CALL64pcrel32 @_ZNK2at10TensorBase4sizeEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %87:gr64 = COPY $rax
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, %87 :: (store (s64) into %ir.21)
    %80:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %81:gr32 = MOV32r0 implicit-def $eflags
    %82:gr64 = SUBREG_TO_REG 0, %81, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %80
    $rsi = COPY %82
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %83:gr64 = COPY $rax
    %79:gr64 = MOV64rm %83, 1, $noreg, 0, $noreg :: (load (s64) from %ir.132)
    MOV64mr %stack.18, 1, $noreg, 0, $noreg, %79 :: (store (s64) into %ir.22)
    %74:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %75:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %74
    $rsi = COPY %75
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %76:gr64 = COPY $rax
    %73:gr64 = MOV64rm %76, 1, $noreg, 0, $noreg :: (load (s64) from %ir.134)
    MOV64mr %stack.19, 1, $noreg, 0, $noreg, %73 :: (store (s64) into %ir.23)
    %70:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %70
    CALL64pcrel32 @_ZNK2at10TensorBase10ndimensionEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %68:gr64 = COPY $rax
    CMP64ri32 %68, 3, implicit-def $eflags
    JCC_1 %bb.20, 5, implicit $eflags
  
  bb.19.BB_19:
    successors: %bb.21(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_19", 1 /* sideeffect attdialect */
    %280:gr64 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %ir.21)
    MOV64mr %stack.22, 1, $noreg, 0, $noreg, %280 :: (store (s64) into %ir.141)
    %278:gr64 = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    MOV64mr %stack.22, 1, $noreg, 8, $noreg, %278 :: (store (s64) into %ir.143)
    %276:gr64 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %ir.23)
    MOV64mr %stack.22, 1, $noreg, 16, $noreg, %276 :: (store (s64) into %ir.145)
    %274:gr64 = LEA64r %stack.22, 1, $noreg, 0, $noreg
    MOV64mr %stack.21, 1, $noreg, 0, $noreg, %274 :: (store (s64) into %ir.147)
    MOV64mi32 %stack.21, 1, $noreg, 8, $noreg, 3 :: (store (s64) into %ir.149)
    %271:gr64 = LEA64r %stack.20, 1, $noreg, 0, $noreg
    %272:gr64 = LEA64r %stack.21, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %271
    $rsi = COPY %272
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %270:gr64 = LEA64r %stack.23, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %270
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %269:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %269
    CALL64pcrel32 @_ZNK2at10TensorBase7optionsEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %267:gr64 = COPY $rax
    MOV64mr %stack.24, 1, $noreg, 0, $noreg, %267 :: (store (s64) into %ir.153, align 2)
    %264:gr64 = LEA64r %stack.25, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %264
    CALL64pcrel32 @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %263:gr64 = MOV64rm %stack.20, 1, $noreg, 0, $noreg :: (load (s64) from %ir.155)
    %262:gr64 = MOV64rm %stack.20, 1, $noreg, 8, $noreg :: (load (s64) from %ir.157)
    %261:gr64 = MOV64rm %stack.23, 1, $noreg, 0, $noreg :: (load (s64) from %ir.160)
    %260:gr64 = MOV64rm %stack.23, 1, $noreg, 8, $noreg :: (load (s64) from %ir.162)
    %259:gr64 = MOV64rm %stack.24, 1, $noreg, 0, $noreg :: (load (s64) from %ir.164, align 2)
    %258:gr64 = MOV64rm %20, 1, $noreg, 0, $noreg :: (load (s64) from %ir.166)
    %246:gr32 = MOV32r0 implicit-def $eflags
    %247:gr64 = SUBREG_TO_REG 0, %246, %subreg.sub_32bit
    %253:gr64 = LEA64r %stack.25, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 24, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %247
    $rdx = COPY %263
    $rcx = COPY %262
    $r8 = COPY %261
    $r9 = COPY %260
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %259 :: (store (s64) into stack)
    %254:gr64 = MOV64rm %253, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 8, $noreg, %254
    %255:gr64 = MOV64rm %253, 1, $noreg, 8, $noreg
    MOV64mr $rsp, 1, $noreg, 16, $noreg, %255
    CALL64m %258, 1, $noreg, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9 :: (load (s64) from %ir.168)
    ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %244:gr64 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %ir.21)
    MOV64mr %stack.28, 1, $noreg, 0, $noreg, %244 :: (store (s64) into %ir.171)
    %242:gr64 = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    MOV64mr %stack.28, 1, $noreg, 8, $noreg, %242 :: (store (s64) into %ir.173)
    %240:gr64 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %ir.23)
    MOV64mr %stack.28, 1, $noreg, 16, $noreg, %240 :: (store (s64) into %ir.175)
    %238:gr64 = LEA64r %stack.28, 1, $noreg, 0, $noreg
    MOV64mr %stack.27, 1, $noreg, 0, $noreg, %238 :: (store (s64) into %ir.177)
    MOV64mi32 %stack.27, 1, $noreg, 8, $noreg, 3 :: (store (s64) into %ir.179)
    %235:gr64 = LEA64r %stack.26, 1, $noreg, 0, $noreg
    %236:gr64 = LEA64r %stack.27, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %235
    $rsi = COPY %236
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %234:gr64 = LEA64r %stack.29, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %234
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %233:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %233
    CALL64pcrel32 @_ZNK2at10TensorBase7optionsEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %231:gr64 = COPY $rax
    MOV64mr %stack.31, 1, $noreg, 0, $noreg, %231 :: (store (s64) into %ir.183, align 2)
    %227:gr64 = LEA64r %stack.32, 1, $noreg, 0, $noreg
    %228:gr64 = MOV64ri @_ZN3c10L5kLongE
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %227
    $rsi = COPY %228
    CALL64pcrel32 @_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %223:gr64 = LEA64r %stack.31, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %223
    %225:gr32 = MOVZX32rm16 %stack.32, 1, $noreg, 0, $noreg :: (load (s16) from %ir.185, align 1)
    $esi = COPY %225
    CALL64pcrel32 @_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %226:gr64 = COPY $rax
    MOV64mr %stack.30, 1, $noreg, 0, $noreg, %226 :: (store (s64) into %ir.188, align 2)
    %221:gr64 = LEA64r %stack.33, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %221
    CALL64pcrel32 @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %220:gr64 = MOV64rm %stack.26, 1, $noreg, 0, $noreg :: (load (s64) from %ir.190)
    %219:gr64 = MOV64rm %stack.26, 1, $noreg, 8, $noreg :: (load (s64) from %ir.192)
    %218:gr64 = MOV64rm %stack.29, 1, $noreg, 0, $noreg :: (load (s64) from %ir.195)
    %217:gr64 = MOV64rm %stack.29, 1, $noreg, 8, $noreg :: (load (s64) from %ir.197)
    %216:gr64 = MOV64rm %stack.30, 1, $noreg, 0, $noreg :: (load (s64) from %ir.199, align 2)
    %215:gr64 = MOV64rm %20, 1, $noreg, 0, $noreg :: (load (s64) from %ir.201)
    %204:gr64 = MOV32ri64 1
    %210:gr64 = LEA64r %stack.33, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 24, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %204
    $rdx = COPY %220
    $rcx = COPY %219
    $r8 = COPY %218
    $r9 = COPY %217
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %216 :: (store (s64) into stack)
    %211:gr64 = MOV64rm %210, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 8, $noreg, %211
    %212:gr64 = MOV64rm %210, 1, $noreg, 8, $noreg
    MOV64mr $rsp, 1, $noreg, 16, $noreg, %212
    CALL64m %215, 1, $noreg, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9 :: (load (s64) from %ir.203)
    ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.21
  
  bb.20.BB_20:
    successors: %bb.21(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_20", 1 /* sideeffect attdialect */
    %202:gr64 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %ir.20)
    MOV64mr %stack.36, 1, $noreg, 0, $noreg, %202 :: (store (s64) into %ir.206)
    %200:gr64 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %ir.21)
    MOV64mr %stack.36, 1, $noreg, 8, $noreg, %200 :: (store (s64) into %ir.208)
    %198:gr64 = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    MOV64mr %stack.36, 1, $noreg, 16, $noreg, %198 :: (store (s64) into %ir.210)
    %196:gr64 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %ir.23)
    MOV64mr %stack.36, 1, $noreg, 24, $noreg, %196 :: (store (s64) into %ir.212)
    %194:gr64 = LEA64r %stack.36, 1, $noreg, 0, $noreg
    MOV64mr %stack.35, 1, $noreg, 0, $noreg, %194 :: (store (s64) into %ir.214)
    MOV64mi32 %stack.35, 1, $noreg, 8, $noreg, 4 :: (store (s64) into %ir.216)
    %191:gr64 = LEA64r %stack.34, 1, $noreg, 0, $noreg
    %192:gr64 = LEA64r %stack.35, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %191
    $rsi = COPY %192
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %190:gr64 = LEA64r %stack.37, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %190
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %189:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %189
    CALL64pcrel32 @_ZNK2at10TensorBase7optionsEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %187:gr64 = COPY $rax
    MOV64mr %stack.39, 1, $noreg, 0, $noreg, %187 :: (store (s64) into %ir.220, align 2)
    %184:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %181:gr32 = MOV32r0 implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %184
    $esi = COPY %181
    CALL64pcrel32 @_ZNK2at10TensorBase21suggest_memory_formatEb, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %182:gr8 = COPY $al
    MOV8mr %stack.41, 1, $noreg, 0, $noreg, %182 :: (store (s8) into %ir.45)
    %177:gr64 = LEA64r %stack.40, 1, $noreg, 0, $noreg
    %178:gr64 = LEA64r %stack.41, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %177
    $rsi = COPY %178
    CALL64pcrel32 @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %173:gr64 = LEA64r %stack.39, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %173
    %175:gr32 = MOVZX32rm16 %stack.40, 1, $noreg, 0, $noreg :: (load (s16) from %ir.225, align 1)
    $esi = COPY %175
    CALL64pcrel32 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %176:gr64 = COPY $rax
    MOV64mr %stack.38, 1, $noreg, 0, $noreg, %176 :: (store (s64) into %ir.228, align 2)
    %171:gr64 = LEA64r %stack.42, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %171
    CALL64pcrel32 @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %170:gr64 = MOV64rm %stack.34, 1, $noreg, 0, $noreg :: (load (s64) from %ir.230)
    %169:gr64 = MOV64rm %stack.34, 1, $noreg, 8, $noreg :: (load (s64) from %ir.232)
    %168:gr64 = MOV64rm %stack.37, 1, $noreg, 0, $noreg :: (load (s64) from %ir.235)
    %167:gr64 = MOV64rm %stack.37, 1, $noreg, 8, $noreg :: (load (s64) from %ir.237)
    %166:gr64 = MOV64rm %stack.38, 1, $noreg, 0, $noreg :: (load (s64) from %ir.239, align 2)
    %165:gr64 = MOV64rm %20, 1, $noreg, 0, $noreg :: (load (s64) from %ir.241)
    %153:gr32 = MOV32r0 implicit-def $eflags
    %154:gr64 = SUBREG_TO_REG 0, %153, %subreg.sub_32bit
    %160:gr64 = LEA64r %stack.42, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 24, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %154
    $rdx = COPY %170
    $rcx = COPY %169
    $r8 = COPY %168
    $r9 = COPY %167
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %166 :: (store (s64) into stack)
    %161:gr64 = MOV64rm %160, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 8, $noreg, %161
    %162:gr64 = MOV64rm %160, 1, $noreg, 8, $noreg
    MOV64mr $rsp, 1, $noreg, 16, $noreg, %162
    CALL64m %165, 1, $noreg, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9 :: (load (s64) from %ir.243)
    ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %151:gr64 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %ir.20)
    MOV64mr %stack.45, 1, $noreg, 0, $noreg, %151 :: (store (s64) into %ir.246)
    %149:gr64 = MOV64rm %stack.17, 1, $noreg, 0, $noreg :: (load (s64) from %ir.21)
    MOV64mr %stack.45, 1, $noreg, 8, $noreg, %149 :: (store (s64) into %ir.248)
    %147:gr64 = MOV64rm %stack.18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    MOV64mr %stack.45, 1, $noreg, 16, $noreg, %147 :: (store (s64) into %ir.250)
    %145:gr64 = MOV64rm %stack.19, 1, $noreg, 0, $noreg :: (load (s64) from %ir.23)
    MOV64mr %stack.45, 1, $noreg, 24, $noreg, %145 :: (store (s64) into %ir.252)
    %143:gr64 = LEA64r %stack.45, 1, $noreg, 0, $noreg
    MOV64mr %stack.44, 1, $noreg, 0, $noreg, %143 :: (store (s64) into %ir.254)
    MOV64mi32 %stack.44, 1, $noreg, 8, $noreg, 4 :: (store (s64) into %ir.256)
    %140:gr64 = LEA64r %stack.43, 1, $noreg, 0, $noreg
    %141:gr64 = LEA64r %stack.44, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %140
    $rsi = COPY %141
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %139:gr64 = LEA64r %stack.46, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %139
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %138:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %138
    CALL64pcrel32 @_ZNK2at10TensorBase7optionsEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %136:gr64 = COPY $rax
    MOV64mr %stack.49, 1, $noreg, 0, $noreg, %136 :: (store (s64) into %ir.260, align 2)
    %133:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %130:gr32 = MOV32r0 implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %133
    $esi = COPY %130
    CALL64pcrel32 @_ZNK2at10TensorBase21suggest_memory_formatEb, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %131:gr8 = COPY $al
    MOV8mr %stack.51, 1, $noreg, 0, $noreg, %131 :: (store (s8) into %ir.55)
    %126:gr64 = LEA64r %stack.50, 1, $noreg, 0, $noreg
    %127:gr64 = LEA64r %stack.51, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %126
    $rsi = COPY %127
    CALL64pcrel32 @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %122:gr64 = LEA64r %stack.49, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %122
    %124:gr32 = MOVZX32rm16 %stack.50, 1, $noreg, 0, $noreg :: (load (s16) from %ir.265, align 1)
    $esi = COPY %124
    CALL64pcrel32 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %125:gr64 = COPY $rax
    MOV64mr %stack.48, 1, $noreg, 0, $noreg, %125 :: (store (s64) into %ir.268, align 2)
    %119:gr64 = LEA64r %stack.52, 1, $noreg, 0, $noreg
    %120:gr64 = MOV64ri @_ZN3c10L5kLongE
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %119
    $rsi = COPY %120
    CALL64pcrel32 @_ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %115:gr64 = LEA64r %stack.48, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %115
    %117:gr32 = MOVZX32rm16 %stack.52, 1, $noreg, 0, $noreg :: (load (s16) from %ir.270, align 1)
    $esi = COPY %117
    CALL64pcrel32 @_ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %118:gr64 = COPY $rax
    MOV64mr %stack.47, 1, $noreg, 0, $noreg, %118 :: (store (s64) into %ir.273, align 2)
    %113:gr64 = LEA64r %stack.53, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %113
    CALL64pcrel32 @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %112:gr64 = MOV64rm %stack.43, 1, $noreg, 0, $noreg :: (load (s64) from %ir.275)
    %111:gr64 = MOV64rm %stack.43, 1, $noreg, 8, $noreg :: (load (s64) from %ir.277)
    %110:gr64 = MOV64rm %stack.46, 1, $noreg, 0, $noreg :: (load (s64) from %ir.280)
    %109:gr64 = MOV64rm %stack.46, 1, $noreg, 8, $noreg :: (load (s64) from %ir.282)
    %108:gr64 = MOV64rm %stack.47, 1, $noreg, 0, $noreg :: (load (s64) from %ir.284, align 2)
    %107:gr64 = MOV64rm %20, 1, $noreg, 0, $noreg :: (load (s64) from %ir.286)
    %96:gr64 = MOV32ri64 1
    %102:gr64 = LEA64r %stack.53, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 24, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %96
    $rdx = COPY %112
    $rcx = COPY %111
    $r8 = COPY %110
    $r9 = COPY %109
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %108 :: (store (s64) into stack)
    %103:gr64 = MOV64rm %102, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 8, $noreg, %103
    %104:gr64 = MOV64rm %102, 1, $noreg, 8, $noreg
    MOV64mr $rsp, 1, $noreg, 16, $noreg, %104
    CALL64m %107, 1, $noreg, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9 :: (load (s64) from %ir.288)
    ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.21.BB_21:
    INLINEASM &"# LLVM BB: BB_21", 1 /* sideeffect attdialect */
    RET64
  
  bb.22.BB_22:
    INLINEASM &"# LLVM BB: BB_22", 1 /* sideeffect attdialect */
    %343:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %343
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK2at10TensorBase10ndimensionEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_23:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_23", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK2at10TensorBase3dimEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c106detail17torchCheckMsgImplIJA59_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_24:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_24", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %7:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %8
    $rdx = COPY %7
    CALL64pcrel32 @_ZN3c103strIJA59_cNS_8ArrayRefIlEEEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK2at10TensorBase5sizesEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_25:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_25", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZNK3c1010TensorImpl5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    %5:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.8)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.10)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.12)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.12 + 8)
    $rax = COPY %6
    $rdx = COPY %7
    RET 0, $rax, $rdx

...
---
name:            _ZN3c106irangeIiiLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_26:
    liveins: $edi, $esi
  
    %2:gr32 = COPY $esi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr32 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_26", 1 /* sideeffect attdialect */
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.3)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.4)
    %16:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    %15:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15 :: (store (s32) into %ir.5)
    %11:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %12:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %12
    CALL64pcrel32 @_ZSt3maxIiERKT_S2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr32 = MOV32rm %13, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %16
    $edx = COPY %10
    CALL64pcrel32 @_ZN3c1013integer_rangeIiLb0ELb1EEC2Eii, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10, align 4)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c1013integer_rangeIiLb0ELb1EE5beginEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_27:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_27", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr32 = MOV32rm %6, 1, $noreg, 0, $noreg
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    $eax = COPY %3
    RET64 implicit $eax

...
---
name:            _ZNK3c1013integer_rangeIiLb0ELb1EE3endEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_28:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_28", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr32 = MOV32rm %6, 1, $noreg, 4, $noreg
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    $eax = COPY %3
    RET64 implicit $eax

...
---
name:            _ZNK3c106detail16integer_iteratorIiLb0ELi0EEneERKS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_29:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_29", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %12
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIiLb0ELi0EEeqERKS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr8 = COPY $al
    %8:gr8 = XOR8ri %11, -1, implicit-def $eflags
    %5:gr8 = AND8ri %8, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZNK3c106detail16integer_iteratorIiLb0ELi0EEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_30:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_30", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr32 = MOV32rm %5, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK2at10TensorBase4sizeEl
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_31:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_31", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %8
    CALL64pcrel32 @_ZNK3c1010TensorImpl4sizeEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZN3c106detail17torchCheckMsgImplIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcPKcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_32:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    %7:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    INLINEASM &"# LLVM BB: BB_32", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.9)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.11)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.12)
    %17:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %16:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %15:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %14:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %13:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %17
    $rdx = COPY %16
    $rcx = COPY %15
    $r8 = COPY %14
    $r9 = COPY %13
    CALL64pcrel32 @_ZN3c103strIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c106detail16integer_iteratorIiLb0ELi0EEppEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_33:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_33", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %6:gr32 = MOV32rm %7, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    %5:gr32 = ADD32ri %6, 1, implicit-def $eflags
    MOV32mr %7, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.3)
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZNK3c108ArrayRefIlE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_34:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_34", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c106detail17torchCheckMsgImplEPKcS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_35:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_35", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c108ArrayRefIlEixEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_36:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_36", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %12, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr64 = SHL64ri %9, 3, implicit-def $eflags
    %8:gr64 = ADD64rr %11, %7, implicit-def $eflags
    $rax = COPY %8
    RET64 implicit $rax

...
---
name:            _ZN3c108ArrayRefIlEC2ERKSt16initializer_listIlE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%4' }
  - { reg: '$rsi', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_37:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %6:gr64 = COPY $rsi
    %4:gr64 = COPY $rdi
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_37", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.3)
    %28:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %25:gr64 = MOV64rm %27, 1, $noreg, 0, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %25
    %26:gr64 = MOV64rm %27, 1, $noreg, 8, $noreg
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %26
    %23:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    %22:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    $rsi = COPY %22
    CALL64pcrel32 @_ZSt5beginIlEPKT_St16initializer_listIS0_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %16:gr64 = MOV64rm %18, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %16
    %17:gr64 = MOV64rm %18, 1, $noreg, 8, $noreg
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, %17
    %14:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %ir.24)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    $rsi = COPY %13
    CALL64pcrel32 @_ZSt3endIlEPKT_St16initializer_listIS0_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    CMP64rr %21, %12, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1.BB_38:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_38", 1 /* sideeffect attdialect */
    %38:gr32 = MOV32r0 implicit-def $eflags
    %39:gr64 = SUBREG_TO_REG 0, %38, %subreg.sub_32bit
    %44:gr64 = COPY %39
    JMP_1 %bb.3
  
  bb.2.BB_39:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_39", 1 /* sideeffect attdialect */
    %37:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %35:gr64 = MOV64rm %37, 1, $noreg, 0, $noreg
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %35
    %36:gr64 = MOV64rm %37, 1, $noreg, 8, $noreg
    MOV64mr %stack.4, 1, $noreg, 8, $noreg, %36
    %33:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.32)
    %32:gr64 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (load (s64) from %ir.34)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %33
    $rsi = COPY %32
    CALL64pcrel32 @_ZSt5beginIlEPKT_St16initializer_listIS0_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %31:gr64 = COPY $rax
    %44:gr64 = COPY %31
  
  bb.3.BB_40:
    %3:gr64 = COPY %44
    INLINEASM &"# LLVM BB: BB_40", 1 /* sideeffect attdialect */
    MOV64mr %28, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    %43:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %43
    CALL64pcrel32 @_ZNKSt16initializer_listIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %42:gr64 = COPY $rax
    MOV64mr %28, 1, $noreg, 8, $noreg, %42 :: (store (s64) into %ir.38)
    RET64

...
---
name:            _ZN3c108ArrayRefIlEC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_41:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_41", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    MOV64mi32 %3, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.3)
    MOV64mi32 %3, 1, $noreg, 8, $noreg, 0 :: (store (s64) into %ir.4)
    RET64

...
---
name:            _ZNK2at10TensorBase7optionsEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr16, preferred-register: '' }
  - { id: 19, class: gr16, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr16, preferred-register: '' }
  - { id: 28, class: gr16, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_42:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_42", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %30:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %29:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %29
    CALL64pcrel32 @_ZN3c1013TensorOptionsC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %30
    CALL64pcrel32 @_ZNK2at10TensorBase5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %28:gr16 = COPY $ax
    MOV16mr %stack.6, 1, $noreg, 0, $noreg, %28 :: (store (s16) into %ir.13)
    %25:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %26:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    $rsi = COPY %26
    CALL64pcrel32 @_ZN3c108optionalIN6caffe28TypeMetaEEC2IS2_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load (s32) from %ir.15, align 2)
    %21:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $esi = COPY %24
    CALL64pcrel32 @_ZNK3c1013TensorOptions5dtypeENS_8optionalIN6caffe28TypeMetaEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.18, align 2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %30
    CALL64pcrel32 @_ZNK2at10TensorBase6deviceEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr16 = COPY $ax
    MOV16mr %stack.7, 1, $noreg, 0, $noreg, %19 :: (store (s16) into %ir.20, align 1)
    %15:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %16:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %16
    CALL64pcrel32 @_ZNK3c1013TensorOptions6deviceIJNS_6DeviceEEEES0_DpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %17 :: (store (s64) into %ir.22, align 2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %30
    CALL64pcrel32 @_ZNK2at10TensorBase6layoutEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr8 = COPY $al
    MOV8mr %stack.9, 1, $noreg, 0, $noreg, %13 :: (store (s8) into %ir.10)
    %9:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    %10:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c108optionalINS_6LayoutEEC2IS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    %7:gr32 = MOVZX32rm16 %stack.8, 1, $noreg, 0, $noreg :: (load (s16) from %ir.25, align 1)
    $esi = COPY %7
    CALL64pcrel32 @_ZNK3c1013TensorOptions6layoutENS_8optionalINS_6LayoutEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.28, align 2)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.29, align 2)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c108ArrayRefIN2at7DimnameEEC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_43:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_43", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    MOV64mi32 %3, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.3)
    MOV64mi32 %3, 1, $noreg, 8, $noreg, 0 :: (store (s64) into %ir.4)
    RET64

...
---
name:            _ZNK3c1013TensorOptions5dtypeENS_8optionalINS_10ScalarTypeEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_44:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr16 = COPY %1.sub_16bit
    INLINEASM &"# LLVM BB: BB_44", 1 /* sideeffect attdialect */
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.7, align 1)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %10
    %8:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg
    MOV16mr %stack.3, 1, $noreg, 0, $noreg, %8
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    %7:gr32 = MOVZX32rm16 %stack.3, 1, $noreg, 0, $noreg :: (load (s16) from %ir.14, align 1)
    $esi = COPY %7
    CALL64pcrel32 @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalINS_10ScalarTypeEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16, align 2)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c108optionalINS_10ScalarTypeEEC2IRKS1_Lb0EEEOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_45:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_45", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt7forwardIRKN3c1010ScalarTypeEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEEC2ERKS1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_46:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr16 = COPY %1.sub_16bit
    INLINEASM &"# LLVM BB: BB_46", 1 /* sideeffect attdialect */
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.7, align 1)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %10
    %8:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg
    MOV16mr %stack.3, 1, $noreg, 0, $noreg, %8
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    %7:gr32 = MOVZX32rm16 %stack.3, 1, $noreg, 0, $noreg :: (load (s16) from %ir.14, align 1)
    $esi = COPY %7
    CALL64pcrel32 @_ZNR3c1013TensorOptions17set_memory_formatENS_8optionalINS_12MemoryFormatEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16, align 2)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK2at10TensorBase21suggest_memory_formatEb
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr8, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr8, preferred-register: '' }
  - { id: 52, class: gr8, preferred-register: '' }
  - { id: 53, class: gr8, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr8, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr8, preferred-register: '' }
  - { id: 68, class: gr32, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr32, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr8, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr8, preferred-register: '' }
  - { id: 78, class: gr32, preferred-register: '' }
  - { id: 79, class: gr8, preferred-register: '' }
  - { id: 80, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%9' }
  - { reg: '$esi', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 24, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 24, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 11, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 12, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_47:
    successors: %bb.29(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $esi
  
    %10:gr32 = COPY $esi
    %9:gr64 = COPY $rdi
    %11:gr8 = COPY %10.sub_8bit
    INLINEASM &"# LLVM BB: BB_47", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.3)
    %16:gr8 = AND8ri %11, 1, implicit-def $eflags
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %16 :: (store (s8) into %ir.4)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK2at10TensorBase6layoutEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr8 = COPY $al
    CMP8ri %13, 0, implicit-def $eflags
    JCC_1 %bb.29, 5, implicit $eflags
  
  bb.1.BB_48:
    successors: %bb.2(0x40000000), %bb.14(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_48", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    CALL64pcrel32 @_ZNK3c1010TensorImpl29is_strides_like_channels_lastEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr8 = COPY $al
    TEST8ri %19, 1, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit $eflags
    JMP_1 %bb.14
  
  bb.2.BB_49:
    successors: %bb.6(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_49", 1 /* sideeffect attdialect */
    %53:gr8 = MOV8rm %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    MOV8mi %stack.5, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.7)
    %51:gr8 = MOV8ri 1
    TEST8ri %53, 1, implicit-def $eflags
    %79:gr8 = COPY %51
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.3.BB_50:
    successors: %bb.4(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_50", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %54:gr64 = COPY $rax
    %55:gr64 = COPY $rdx
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %54 :: (store (s64) into %ir.26)
    MOV64mr %stack.4, 1, $noreg, 8, $noreg, %55 :: (store (s64) into %ir.28)
    %56:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.31)
    %57:gr64 = MOV64rm %stack.4, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.33)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %58:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %58
    $rsi = COPY %56
    $rdx = COPY %57
    CALL64pcrel32 @_ZN3c1028get_channels_last_strides_2dENS_8ArrayRefIlEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV8mi %stack.5, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.7)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK2at10TensorBase7stridesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %59:gr64 = COPY $rax
    %60:gr64 = COPY $rdx
    EH_LABEL <mcsymbol >
    %2:gr64 = COPY %60
    %1:gr64 = COPY %59
    JMP_1 %bb.4
  
  bb.4.BB_51:
    successors: %bb.5(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_51", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.37)
    MOV64mr %stack.6, 1, $noreg, 8, $noreg, %2 :: (store (s64) into %ir.39)
    %61:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.42)
    %62:gr64 = MOV64rm %stack.6, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.44)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %63:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %63
    $rsi = COPY %61
    $rdx = COPY %62
    CALL64pcrel32 @_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %64:gr8 = COPY $al
    EH_LABEL <mcsymbol >
    %3:gr8 = COPY %64
    JMP_1 %bb.5
  
  bb.5.BB_52:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_52", 1 /* sideeffect attdialect */
    %79:gr8 = COPY %3
  
  bb.6.BB_53:
    successors: %bb.7(0x40000000), %bb.8(0x40000000)
  
    %4:gr8 = COPY %79
    INLINEASM &"# LLVM BB: BB_53", 1 /* sideeffect attdialect */
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.7)
    JCC_1 %bb.7, 5, implicit $eflags
    JMP_1 %bb.8
  
  bb.7.BB_54:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_54", 1 /* sideeffect attdialect */
    %76:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %76
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.8.BB_55:
    successors: %bb.9(0x40000000), %bb.13(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_55", 1 /* sideeffect attdialect */
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.9, 5, implicit $eflags
    JMP_1 %bb.13
  
  bb.9.BB_56:
    successors: %bb.30(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_56", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 2 :: (store (s8) into %ir.2)
    JMP_1 %bb.30
  
  bb.10.BB_57 (landing-pad):
    successors: %bb.11(0x40000000), %bb.12(0x40000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %66:gr64 = COPY killed $rdx
    %65:gr64 = COPY killed $rax
    %70:gr32 = COPY %66.sub_32bit
    %69:gr64 = COPY %65
    INLINEASM &"# LLVM BB: BB_57", 1 /* sideeffect attdialect */
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %69 :: (store (s64) into %ir.9)
    MOV32mr %stack.8, 1, $noreg, 0, $noreg, %70 :: (store (s32) into %ir.10)
    TEST8mi %stack.5, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.7)
    JCC_1 %bb.11, 5, implicit $eflags
    JMP_1 %bb.12
  
  bb.11.BB_58:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_58", 1 /* sideeffect attdialect */
    %72:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %72
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.12.BB_59:
    successors: %bb.31(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_59", 1 /* sideeffect attdialect */
    JMP_1 %bb.31
  
  bb.13.BB_60:
    successors: %bb.28(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_60", 1 /* sideeffect attdialect */
    JMP_1 %bb.28
  
  bb.14.BB_61:
    successors: %bb.15(0x40000000), %bb.27(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_61", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %26:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    CALL64pcrel32 @_ZNK3c1010TensorImpl32is_strides_like_channels_last_3dEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr8 = COPY $al
    TEST8ri %24, 1, implicit-def $eflags
    JCC_1 %bb.15, 5, implicit $eflags
    JMP_1 %bb.27
  
  bb.15.BB_62:
    successors: %bb.19(0x40000000), %bb.16(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_62", 1 /* sideeffect attdialect */
    %29:gr8 = MOV8rm %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    MOV8mi %stack.11, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.13)
    %27:gr8 = MOV8ri 1
    TEST8ri %29, 1, implicit-def $eflags
    %80:gr8 = COPY %27
    JCC_1 %bb.19, 4, implicit $eflags
  
  bb.16.BB_63:
    successors: %bb.17(0x40000000), %bb.23(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_63", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %30:gr64 = COPY $rax
    %31:gr64 = COPY $rdx
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, %30 :: (store (s64) into %ir.60)
    MOV64mr %stack.10, 1, $noreg, 8, $noreg, %31 :: (store (s64) into %ir.62)
    %32:gr64 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.65)
    %33:gr64 = MOV64rm %stack.10, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.67)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %34:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %34
    $rsi = COPY %32
    $rdx = COPY %33
    CALL64pcrel32 @_ZN3c1028get_channels_last_strides_3dENS_8ArrayRefIlEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    MOV8mi %stack.11, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.13)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK2at10TensorBase7stridesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %35:gr64 = COPY $rax
    %36:gr64 = COPY $rdx
    EH_LABEL <mcsymbol >
    %6:gr64 = COPY %36
    %5:gr64 = COPY %35
    JMP_1 %bb.17
  
  bb.17.BB_64:
    successors: %bb.18(0x40000000), %bb.23(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_64", 1 /* sideeffect attdialect */
    MOV64mr %stack.12, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.71)
    MOV64mr %stack.12, 1, $noreg, 8, $noreg, %6 :: (store (s64) into %ir.73)
    %37:gr64 = MOV64rm %stack.12, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.76)
    %38:gr64 = MOV64rm %stack.12, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.78)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %39:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %39
    $rsi = COPY %37
    $rdx = COPY %38
    CALL64pcrel32 @_ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %40:gr8 = COPY $al
    EH_LABEL <mcsymbol >
    %7:gr8 = COPY %40
    JMP_1 %bb.18
  
  bb.18.BB_65:
    successors: %bb.19(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_65", 1 /* sideeffect attdialect */
    %80:gr8 = COPY %7
  
  bb.19.BB_66:
    successors: %bb.20(0x40000000), %bb.21(0x40000000)
  
    %8:gr8 = COPY %80
    INLINEASM &"# LLVM BB: BB_66", 1 /* sideeffect attdialect */
    TEST8mi %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.13)
    JCC_1 %bb.20, 5, implicit $eflags
    JMP_1 %bb.21
  
  bb.20.BB_67:
    successors: %bb.21(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_67", 1 /* sideeffect attdialect */
    %50:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %50
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.21.BB_68:
    successors: %bb.22(0x40000000), %bb.26(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_68", 1 /* sideeffect attdialect */
    TEST8ri %8, 1, implicit-def $eflags
    JCC_1 %bb.22, 5, implicit $eflags
    JMP_1 %bb.26
  
  bb.22.BB_69:
    successors: %bb.30(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_69", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 3 :: (store (s8) into %ir.2)
    JMP_1 %bb.30
  
  bb.23.BB_70 (landing-pad):
    successors: %bb.24(0x40000000), %bb.25(0x40000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %42:gr64 = COPY killed $rdx
    %41:gr64 = COPY killed $rax
    %46:gr32 = COPY %42.sub_32bit
    %45:gr64 = COPY %41
    INLINEASM &"# LLVM BB: BB_70", 1 /* sideeffect attdialect */
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %45 :: (store (s64) into %ir.9)
    MOV32mr %stack.8, 1, $noreg, 0, $noreg, %46 :: (store (s32) into %ir.10)
    TEST8mi %stack.11, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.13)
    JCC_1 %bb.24, 5, implicit $eflags
    JMP_1 %bb.25
  
  bb.24.BB_71:
    successors: %bb.25(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_71", 1 /* sideeffect attdialect */
    %48:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %48
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.25.BB_72:
    successors: %bb.31(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_72", 1 /* sideeffect attdialect */
    JMP_1 %bb.31
  
  bb.26.BB_73:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_73", 1 /* sideeffect attdialect */
  
  bb.27.BB_74:
    successors: %bb.28(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_74", 1 /* sideeffect attdialect */
  
  bb.28.BB_75:
    successors: %bb.29(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_75", 1 /* sideeffect attdialect */
  
  bb.29.BB_76:
    successors: %bb.30(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_76", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.2)
  
  bb.30.BB_77:
    INLINEASM &"# LLVM BB: BB_77", 1 /* sideeffect attdialect */
    %78:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    $eax = COPY %78
    RET64 implicit $eax
  
  bb.31.BB_78:
    INLINEASM &"# LLVM BB: BB_78", 1 /* sideeffect attdialect */
    %74:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %74
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_79:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_79", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt7forwardIN3c1012MemoryFormatEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEEC2EOS1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at4meta39structured_adaptive_max_pool2d_backward4metaERKNS_6TensorES4_S4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr16, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr16, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr16, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr16, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr16, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr8, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr32, preferred-register: '' }
  - { id: 71, class: gr8, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr64, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr64, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr64, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr64, preferred-register: '' }
  - { id: 90, class: gr16, preferred-register: '' }
  - { id: 91, class: gr64, preferred-register: '' }
  - { id: 92, class: gr16, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr64, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr64, preferred-register: '' }
  - { id: 101, class: gr32, preferred-register: '' }
  - { id: 102, class: gr64, preferred-register: '' }
  - { id: 103, class: gr64, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr32, preferred-register: '' }
  - { id: 106, class: gr64, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: gr64, preferred-register: '' }
  - { id: 109, class: gr64, preferred-register: '' }
  - { id: 110, class: gr64, preferred-register: '' }
  - { id: 111, class: gr64, preferred-register: '' }
  - { id: 112, class: gr64, preferred-register: '' }
  - { id: 113, class: gr64, preferred-register: '' }
  - { id: 114, class: gr64, preferred-register: '' }
  - { id: 115, class: gr64, preferred-register: '' }
  - { id: 116, class: gr64, preferred-register: '' }
  - { id: 117, class: gr64, preferred-register: '' }
  - { id: 118, class: gr32, preferred-register: '' }
  - { id: 119, class: gr64, preferred-register: '' }
  - { id: 120, class: gr64, preferred-register: '' }
  - { id: 121, class: gr64, preferred-register: '' }
  - { id: 122, class: gr32, preferred-register: '' }
  - { id: 123, class: gr64, preferred-register: '' }
  - { id: 124, class: gr32, preferred-register: '' }
  - { id: 125, class: gr64, preferred-register: '' }
  - { id: 126, class: gr64, preferred-register: '' }
  - { id: 127, class: gr64, preferred-register: '' }
  - { id: 128, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%5' }
  - { reg: '$rdx', virtual-reg: '%7' }
  - { reg: '$rcx', virtual-reg: '%9' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 11, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 12, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 13, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 14, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 15, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 16, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 17, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 18, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 19, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 20, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_80:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %9:gr64 = COPY $rcx
    %7:gr64 = COPY $rdx
    %5:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    %8:gr64 = COPY killed %7
    %10:gr64 = COPY killed %9
    INLINEASM &"# LLVM BB: BB_80", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.7)
    %18:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %17:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 @_ZNK2at10TensorBase10ndimensionEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.8)
    %11:gr8 = MOV8ri 1
    CMP64mi32 %stack.4, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (load (s64) from %ir.8)
    %128:gr8 = COPY %11
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_81:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_81", 1 /* sideeffect attdialect */
    CMP64mi32 %stack.4, 1, $noreg, 0, $noreg, 4, implicit-def $eflags :: (load (s64) from %ir.8)
    %19:gr8 = SETCCr 4, implicit $eflags
    %128:gr8 = COPY %19
  
  bb.2.BB_82:
    successors: %bb.3(0x40000000), %bb.6(0x40000000)
  
    %2:gr8 = COPY %128
    INLINEASM &"# LLVM BB: BB_82", 1 /* sideeffect attdialect */
    %22:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %22, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.3.BB_83:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_83", 1 /* sideeffect attdialect */
    %109:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %109
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %110:gr64 = COPY $rax
    %111:gr64 = COPY $rdx
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %110 :: (store (s64) into %ir.39)
    MOV64mr %stack.6, 1, $noreg, 8, $noreg, %111 :: (store (s64) into %ir.41)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %112:gr64 = MOV32ri64 @.str.1
    %113:gr64 = MOV32ri64 @.str.9
    %114:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %115:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rdi = COPY %114
    $rsi = COPY %112
    $rdx = COPY %113
    $rcx = COPY %115
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplIJA76_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %116:gr64 = MOV32ri64 @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
    %117:gr64 = MOV32ri64 @.str
    %118:gr32 = MOV32ri 61
    $rdi = COPY %116
    $rsi = COPY %117
    $edx = COPY %118
    $rcx = COPY %114
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.4
  
  bb.4.BB_84:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_84", 1 /* sideeffect attdialect */
  
  bb.5.BB_85 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %120:gr64 = COPY killed $rdx
    %119:gr64 = COPY killed $rax
    %124:gr32 = COPY %120.sub_32bit
    %123:gr64 = COPY %119
    INLINEASM &"# LLVM BB: BB_85", 1 /* sideeffect attdialect */
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %123 :: (store (s64) into %ir.11)
    MOV32mr %stack.8, 1, $noreg, 0, $noreg, %124 :: (store (s32) into %ir.12)
    %121:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %121
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.11
  
  bb.6.BB_86:
    successors: %bb.7(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_86", 1 /* sideeffect attdialect */
    %40:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %40
    CALL64pcrel32 @_ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %38:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %38
    CALL64pcrel32 @_ZNK2at10TensorBase5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %36:gr16 = COPY $ax
    MOV16mr %stack.9, 1, $noreg, 0, $noreg, %36 :: (store (s16) into %ir.50)
    %33:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %33
    CALL64pcrel32 @_ZNK2at10TensorBase5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %31:gr16 = COPY $ax
    MOV16mr %stack.10, 1, $noreg, 0, $noreg, %31 :: (store (s16) into %ir.54)
    %26:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    %27:gr64 = LEA64r %stack.10, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    $rsi = COPY %27
    CALL64pcrel32 @_ZN6caffe2eqERKNS_8TypeMetaES2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %28:gr8 = COPY $al
    %25:gr8 = XOR8ri %28, -1, implicit-def $eflags
    TEST8ri %25, 1, implicit-def $eflags
    JCC_1 %bb.7, 5, implicit $eflags
    JMP_1 %bb.10
  
  bb.7.BB_87:
    successors: %bb.8(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_87", 1 /* sideeffect attdialect */
    %89:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %89
    CALL64pcrel32 @_ZNK2at10TensorBase5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %90:gr16 = COPY $ax
    MOV16mr %stack.12, 1, $noreg, 0, $noreg, %90 :: (store (s16) into %ir.60)
    %91:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %91
    CALL64pcrel32 @_ZNK2at10TensorBase5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %92:gr16 = COPY $ax
    MOV16mr %stack.13, 1, $noreg, 0, $noreg, %92 :: (store (s16) into %ir.64)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %93:gr64 = MOV32ri64 @.str.11
    %94:gr64 = MOV32ri64 @.str.12
    %95:gr64 = MOV32ri64 @.str.13
    %96:gr64 = LEA64r %stack.11, 1, $noreg, 0, $noreg
    %97:gr64 = LEA64r %stack.12, 1, $noreg, 0, $noreg
    %98:gr64 = LEA64r %stack.13, 1, $noreg, 0, $noreg
    $rdi = COPY %96
    $rsi = COPY %93
    $rdx = COPY %94
    $rcx = COPY %97
    $r8 = COPY %95
    $r9 = COPY %98
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplIJA16_cN6caffe28TypeMetaEA34_cS4_EEEDcPKcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %99:gr64 = MOV32ri64 @__func__._ZN2at4meta30structured_adaptive_max_pool2d4metaERKNS_6TensorEN3c108ArrayRefIlEE
    %100:gr64 = MOV32ri64 @.str
    %101:gr32 = MOV32ri 66
    $rdi = COPY %99
    $rsi = COPY %100
    $edx = COPY %101
    $rcx = COPY %96
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.8
  
  bb.8.BB_88:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_88", 1 /* sideeffect attdialect */
  
  bb.9.BB_89 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %103:gr64 = COPY killed $rdx
    %102:gr64 = COPY killed $rax
    %107:gr32 = COPY %103.sub_32bit
    %106:gr64 = COPY %102
    INLINEASM &"# LLVM BB: BB_89", 1 /* sideeffect attdialect */
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %106 :: (store (s64) into %ir.11)
    MOV32mr %stack.8, 1, $noreg, 0, $noreg, %107 :: (store (s32) into %ir.12)
    %104:gr64 = LEA64r %stack.11, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %104
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.11
  
  bb.10.BB_90:
    INLINEASM &"# LLVM BB: BB_90", 1 /* sideeffect attdialect */
    %88:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %88
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %85:gr64 = COPY $rax
    %86:gr64 = COPY $rdx
    MOV64mr %stack.14, 1, $noreg, 0, $noreg, %85 :: (store (s64) into %ir.73)
    MOV64mr %stack.14, 1, $noreg, 8, $noreg, %86 :: (store (s64) into %ir.75)
    %79:gr64 = LEA64r %stack.15, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %79
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %78:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %78
    CALL64pcrel32 @_ZNK2at10TensorBase7optionsEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %76:gr64 = COPY $rax
    MOV64mr %stack.17, 1, $noreg, 0, $noreg, %76 :: (store (s64) into %ir.80, align 2)
    %73:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %70:gr32 = MOV32r0 implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %73
    $esi = COPY %70
    CALL64pcrel32 @_ZNK2at10TensorBase21suggest_memory_formatEb, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %71:gr8 = COPY $al
    MOV8mr %stack.19, 1, $noreg, 0, $noreg, %71 :: (store (s8) into %ir.23)
    %66:gr64 = LEA64r %stack.18, 1, $noreg, 0, $noreg
    %67:gr64 = LEA64r %stack.19, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %66
    $rsi = COPY %67
    CALL64pcrel32 @_ZN3c108optionalINS_12MemoryFormatEEC2IS1_Lb0EEEOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %62:gr64 = LEA64r %stack.17, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %62
    %64:gr32 = MOVZX32rm16 %stack.18, 1, $noreg, 0, $noreg :: (load (s16) from %ir.85, align 1)
    $esi = COPY %64
    CALL64pcrel32 @_ZNK3c1013TensorOptions13memory_formatENS_8optionalINS_12MemoryFormatEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %65:gr64 = COPY $rax
    MOV64mr %stack.16, 1, $noreg, 0, $noreg, %65 :: (store (s64) into %ir.88, align 2)
    %60:gr64 = LEA64r %stack.20, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %60
    CALL64pcrel32 @_ZN3c108ArrayRefIN2at7DimnameEEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %59:gr64 = MOV64rm %stack.14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.90)
    %58:gr64 = MOV64rm %stack.14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.92)
    %57:gr64 = MOV64rm %stack.15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.95)
    %56:gr64 = MOV64rm %stack.15, 1, $noreg, 8, $noreg :: (load (s64) from %ir.97)
    %55:gr64 = MOV64rm %stack.16, 1, $noreg, 0, $noreg :: (load (s64) from %ir.99, align 2)
    %54:gr64 = MOV64rm %18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.101)
    %42:gr32 = MOV32r0 implicit-def $eflags
    %43:gr64 = SUBREG_TO_REG 0, %42, %subreg.sub_32bit
    %49:gr64 = LEA64r %stack.20, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 24, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    $rsi = COPY %43
    $rdx = COPY %59
    $rcx = COPY %58
    $r8 = COPY %57
    $r9 = COPY %56
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %55 :: (store (s64) into stack)
    %50:gr64 = MOV64rm %49, 1, $noreg, 0, $noreg
    MOV64mr $rsp, 1, $noreg, 8, $noreg, %50
    %51:gr64 = MOV64rm %49, 1, $noreg, 8, $noreg
    MOV64mr $rsp, 1, $noreg, 16, $noreg, %51
    CALL64m %54, 1, $noreg, 16, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9 :: (load (s64) from %ir.103)
    ADJCALLSTACKUP64 24, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64
  
  bb.11.BB_91:
    INLINEASM &"# LLVM BB: BB_91", 1 /* sideeffect attdialect */
    %127:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %127
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail17torchCheckMsgImplIJA76_cNS_8ArrayRefIlEEEEEDcPKcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_92:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_92", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %7:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %8
    $rdx = COPY %7
    CALL64pcrel32 @_ZN3c103strIJA76_cNS_8ArrayRefIlEEEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 10, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 11, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_93:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    INLINEASM &"# LLVM BB: BB_93", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.1)
    %24:gr64 = MOV64ri @.str.10
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %24 :: (store (s64) into %ir.2)
    %23:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    CALL64pcrel32 @_ZNK2at10TensorBase10ndimensionEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %21 :: (store (s64) into %ir.3)
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr32 = MOV32ri 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %14
    $rsi = COPY %18
    CALL64pcrel32 @_ZN3c106irangeIilLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    %17:gr64 = COPY $rdx
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.19)
    MOV64mr %stack.4, 1, $noreg, 8, $noreg, %17 :: (store (s64) into %ir.21)
    %9:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.4)
    %8:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1013integer_rangeIlLb0ELb1EE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.25)
    %4:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZNK3c1013integer_rangeIlLb0ELb1EE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %3:gr64 = COPY $rax
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.28)
  
  bb.1.BB_94:
    successors: %bb.2(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_94", 1 /* sideeffect attdialect */
    %26:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %27:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    $rsi = COPY %27
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEneERKS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %28:gr8 = COPY $al
    TEST8ri %28, 1, implicit-def $eflags
    JCC_1 %bb.2, 5, implicit $eflags
    JMP_1 %bb.8
  
  bb.2.BB_95:
    successors: %bb.3(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_95", 1 /* sideeffect attdialect */
    %41:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %41
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %42:gr64 = COPY $rax
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %42 :: (store (s64) into %ir.8)
    %39:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %37:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %39
    $rsi = COPY %37
    CALL64pcrel32 @_ZNK2at10TensorBase4sizeEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %36:gr64 = COPY $rax
    CMP64ri32 %36, 0, implicit-def $eflags
    %32:gr8 = SETCCr 15, implicit $eflags
    %31:gr8 = XOR8ri %32, -1, implicit-def $eflags
    TEST8ri %31, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.3.BB_96:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_96", 1 /* sideeffect attdialect */
    %45:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %45
    CALL64pcrel32 @_ZNK2at10TensorBase5sizesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %46:gr64 = COPY $rax
    %47:gr64 = COPY $rdx
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, %46 :: (store (s64) into %ir.41)
    MOV64mr %stack.9, 1, $noreg, 8, $noreg, %47 :: (store (s64) into %ir.43)
    ADJCALLSTACKDOWN64 16, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %48:gr64 = COPY $rsp
    %49:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    MOV64mr %48, 1, $noreg, 0, $noreg, killed %49 :: (store (s64) into stack)
    MOV64mi32 %48, 1, $noreg, 8, $noreg, @.str.6 :: (store (s64) into stack + 8)
    %50:gr64 = MOV32ri64 @.str.75
    %51:gr64 = MOV32ri64 @.str.76
    %52:gr64 = MOV32ri64 @.str.5
    %53:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    %54:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %55:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    $rdi = COPY %53
    $rsi = COPY %50
    $rdx = COPY %54
    $rcx = COPY %51
    $r8 = COPY %55
    $r9 = COPY %52
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcS3_DpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 16, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %56:gr64 = MOV32ri64 @__func__._ZN2at6nativeL32adaptive_pool_empty_output_checkERKNS_6TensorEPKc
    %57:gr64 = MOV32ri64 @.str.74
    %58:gr32 = MOV32ri 35
    $rdi = COPY %56
    $rsi = COPY %57
    $edx = COPY %58
    $rcx = COPY %53
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.4
  
  bb.4.BB_97:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_97", 1 /* sideeffect attdialect */
  
  bb.5.BB_98 (landing-pad):
    successors: %bb.9(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %60:gr64 = COPY killed $rdx
    %59:gr64 = COPY killed $rax
    %64:gr32 = COPY %60.sub_32bit
    %63:gr64 = COPY %59
    INLINEASM &"# LLVM BB: BB_98", 1 /* sideeffect attdialect */
    MOV64mr %stack.10, 1, $noreg, 0, $noreg, %63 :: (store (s64) into %ir.11)
    MOV32mr %stack.11, 1, $noreg, 0, $noreg, %64 :: (store (s32) into %ir.12)
    %61:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %61
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.9
  
  bb.6.BB_99:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_99", 1 /* sideeffect attdialect */
  
  bb.7.BB_100:
    successors: %bb.1(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_100", 1 /* sideeffect attdialect */
    %43:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %43
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIlLb0ELi0EEppEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %44:gr64 = COPY $rax
    JMP_1 %bb.1
  
  bb.8.BB_101:
    INLINEASM &"# LLVM BB: BB_101", 1 /* sideeffect attdialect */
    RET64
  
  bb.9.BB_102:
    INLINEASM &"# LLVM BB: BB_102", 1 /* sideeffect attdialect */
    %67:gr64 = MOV64rm %stack.10, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %67
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN6caffe2eqERKNS_8TypeMetaES2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr16, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_103:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_103", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %17:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %15:gr32 = MOVZX32rm16 %17, 1, $noreg, 0, $noreg :: (load (s16) from %ir.5)
    %13:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %11:gr32 = MOVZX32rm16 %13, 1, $noreg, 0, $noreg :: (load (s16) from %ir.9)
    CMP32rr %15, %11, implicit-def $eflags
    %7:gr8 = SETCCr 4, implicit $eflags
    %5:gr8 = AND8ri %7, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZNK2at10TensorBase5dtypeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_104:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_104", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1010TensorImpl5dtypeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr16 = COPY $ax
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %6 :: (store (s16) into %ir.7)
    %3:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.8)
    $ax = COPY %3
    RET64 implicit $ax

...
---
name:            _ZN3c106detail17torchCheckMsgImplIJA16_cN6caffe28TypeMetaEA34_cS4_EEEDcPKcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_105:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_105", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.6)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.11)
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %12:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %11:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %14
    $rdx = COPY %13
    $rcx = COPY %12
    $r8 = COPY %11
    CALL64pcrel32 @_ZN3c103strIJA16_cN6caffe28TypeMetaEA34_cS3_EEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN2at6native38structured_adaptive_max_pool2d_out_cpu4implERKNS_6TensorEN3c108ArrayRefIlEES4_S4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
  - { reg: '$r9', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_106:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %10:gr64 = COPY $r9
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    %11:gr64 = COPY killed %10
    INLINEASM &"# LLVM BB: BB_106", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.12)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %7 :: (store (s64) into %ir.13)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.10)
    %20:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %19:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %12:gr64 = MOV64ri @_ZN2at6native26adaptive_max_pool2d_kernelE
    %13:gr32 = MOV32r0 implicit-def $eflags
    %17:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $esi = COPY %13
    $rdx = COPY %20
    $rcx = COPY %19
    $r8 = COPY %18
    $r9 = COPY %17
    CALL64pcrel32 @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEEclIJS4_S4_S4_RS7_EEEvNS5_10DeviceTypeEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEEclIJS4_S4_S4_RS7_EEEvNS5_10DeviceTypeEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_107:
    liveins: $rdi, $esi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %6:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_107", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.6)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %6 :: (store (s8) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.11)
    %36:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %36
    %34:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.7)
    $esi = COPY %34
    CALL64pcrel32 @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE12get_call_ptrENS5_10DeviceTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %35:gr64 = COPY $rax
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %35 :: (store (s64) into %ir.12)
    %30:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %29:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %29
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %28:gr64 = COPY $rax
    %26:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = COPY $rax
    %23:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %22:gr64 = COPY $rax
    %20:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 @_ZSt7forwardIRN3c108ArrayRefIlEEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr64 = COPY $rax
    %16:gr64 = MOV64rm %19, 1, $noreg, 0, $noreg
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %16
    %17:gr64 = MOV64rm %19, 1, $noreg, 8, $noreg
    MOV64mr %stack.7, 1, $noreg, 8, $noreg, %17
    %14:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.29)
    %13:gr64 = MOV64rm %stack.7, 1, $noreg, 8, $noreg :: (load (s64) from %ir.31)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    $rsi = COPY %25
    $rdx = COPY %22
    $rcx = COPY %14
    $r8 = COPY %13
    CALL64r %30, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN2at6native47structured_adaptive_max_pool2d_backward_out_cpu4implERKNS_6TensorES4_S4_S4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_108:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    INLINEASM &"# LLVM BB: BB_108", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.9)
    %20:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 @_ZNK2at6Tensor5zero_Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr64 = COPY $rax
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %16:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %10:gr64 = MOV64ri @_ZN2at6native35adaptive_max_pool2d_backward_kernelE
    %11:gr32 = MOV32r0 implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $esi = COPY %11
    $rdx = COPY %17
    $rcx = COPY %16
    $r8 = COPY %15
    CALL64pcrel32 @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEEclIJS4_S4_S4_EEEvN3c1010DeviceTypeEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNK2at6Tensor5zero_Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_109:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_109", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at4_ops5zero_4callERNS_6TensorE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEEclIJS4_S4_S4_EEEvN3c1010DeviceTypeEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_110:
    liveins: $rdi, $esi, $rdx, $rcx, $r8
  
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %5:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_110", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.5)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %5 :: (store (s8) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.9)
    %25:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    %23:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.6)
    $esi = COPY %23
    CALL64pcrel32 @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE12get_call_ptrEN3c1010DeviceTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr64 = COPY $rax
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %24 :: (store (s64) into %ir.10)
    %19:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %15:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    %12:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    CALL64pcrel32 @_ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %14
    $rdx = COPY %11
    CALL64r %19, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNK2at10TensorBase3dimEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_111:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_111", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNK3c1010TensorImpl3dimEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_112:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_112", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl3dimEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_113:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_113", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %4:gr32 = MOV32ri 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %4
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    TEST8ri %5, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_114:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_114", 1 /* sideeffect attdialect */
    %15:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64m %15, 1, $noreg, 96, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.1)
    JMP_1 %bb.3
  
  bb.2.BB_115:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_115", 1 /* sideeffect attdialect */
    %10:gr64 = ADD64ri32 %6, 72, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.1)
  
  bb.3.BB_116:
    INLINEASM &"# LLVM BB: BB_116", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %17
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_117:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_117", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s8) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    %14:gr32 = MOVZX32rm16 killed %13, 1, $noreg, 181, $noreg :: (load (s16) from %ir.6, align 1)
    %15:gr32 = SHR32ri %14, 10, implicit-def dead $eflags
    %16:gr8 = COPY %15.sub_8bit
    %11:gr8 = AND8ri %16, 3, implicit-def dead $eflags
    %12:gr32 = MOVZX32rr8 %11
    %10:gr32 = MOVZX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    CMP32rr %12, %10, implicit-def $eflags
    %6:gr8 = SETCCr 13, implicit $eflags
    %4:gr8 = AND8ri %6, 1, implicit-def $eflags
    %5:gr32 = MOVZX32rr8 %4
    $eax = COPY %5
    RET64 implicit $eax

...
---
name:            _ZNK3c104impl15SizesAndStrides4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_118:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_118", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c103strIJA59_cNS_8ArrayRefIlEEEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_119:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_119", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.6)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_120:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_120", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    $rsi = COPY %5
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEEEEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_121:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_121", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_122:
    INLINEASM &"# LLVM BB: BB_122", 1 /* sideeffect attdialect */
    %18:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.3.BB_123 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %10:gr64 = COPY killed $rdx
    %9:gr64 = COPY killed $rax
    %14:gr32 = COPY %10.sub_32bit
    %13:gr64 = COPY %9
    INLINEASM &"# LLVM BB: BB_123", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.8)
    %11:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_124:
    INLINEASM &"# LLVM BB: BB_124", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJNS_8ArrayRefIlEEEEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_125:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_125", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_126:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_126", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %13:gr64 = MOV64rm %15, 1, $noreg, 0, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %13
    %14:gr64 = MOV64rm %15, 1, $noreg, 8, $noreg
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %14
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    $rsi = COPY %11
    $rdx = COPY %10
    CALL64pcrel32 @_ZN3c10lsIlEERSoS1_NS_8ArrayRefIT_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIPKcEERSoS4_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_127:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_127", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %10
    CALL64pcrel32 target-flags(x86-plt) @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c10lsIlEERSoS1_NS_8ArrayRefIT_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_128:
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_128", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.11)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.12)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.5)
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %16:gr64 = MOV64ri @.str.16
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    $rsi = COPY %16
    CALL64pcrel32 target-flags(x86-plt) @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.7)
    %9:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.8)
  
  bb.1.BB_129:
    successors: %bb.6(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_129", 1 /* sideeffect attdialect */
    %21:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    CMP64rm %21, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.2.BB_130:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_130", 1 /* sideeffect attdialect */
    %33:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %33 :: (store (s64) into %ir.9)
    %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    %30:gr32 = ADD32ri %31, 1, implicit-def $eflags
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %30 :: (store (s32) into %ir.5)
    CMP32ri %31, 0, implicit-def $eflags
    JCC_1 %bb.4, 14, implicit $eflags
  
  bb.3.BB_131:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_131", 1 /* sideeffect attdialect */
    %37:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %35:gr64 = MOV64ri @.str.17
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %37
    $rsi = COPY %35
    CALL64pcrel32 target-flags(x86-plt) @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %36:gr64 = COPY $rax
  
  bb.4.BB_132:
    successors: %bb.5(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_132", 1 /* sideeffect attdialect */
    %44:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %43:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %42:gr64 = MOV64rm %43, 1, $noreg, 0, $noreg :: (load (s64) from %ir.29)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %44
    $rsi = COPY %42
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %40:gr64 = COPY $rax
  
  bb.5.BB_133:
    successors: %bb.1(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_133", 1 /* sideeffect attdialect */
    %48:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %47:gr64 = ADD64ri32 %48, 8, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %47 :: (store (s64) into %ir.7)
    JMP_1 %bb.1
  
  bb.6.BB_134:
    INLINEASM &"# LLVM BB: BB_134", 1 /* sideeffect attdialect */
    %27:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %25:gr64 = MOV64ri @.str.18
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %25
    CALL64pcrel32 target-flags(x86-plt) @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %26:gr64 = COPY $rax
    %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    $rax = COPY %23
    RET64 implicit $rax

...
---
name:            _ZNK3c108ArrayRefIlE5beginEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_135:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_135", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c108ArrayRefIlE3endEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_136:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_136", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %9:gr64 = MOV64rm %10, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %8:gr64 = MOV64rm %10, 1, $noreg, 8, $noreg :: (load (s64) from %ir.5)
    %5:gr64 = SHL64ri %8, 3, implicit-def $eflags
    %6:gr64 = ADD64rr %9, %5, implicit-def $eflags
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl5sizesEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_137:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_137", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %4:gr32 = MOV32ri 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %4
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    TEST8ri %5, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_138:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_138", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64m %23, 1, $noreg, 64, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = COPY $rax
    %21:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %20 :: (store (s64) into %ir.11)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %21 :: (store (s64) into %ir.13)
    JMP_1 %bb.3
  
  bb.2.BB_139:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_139", 1 /* sideeffect attdialect */
    %14:gr64 = ADD64ri32 %6, 72, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides14sizes_arrayrefEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    %13:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.18)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %13 :: (store (s64) into %ir.20)
  
  bb.3.BB_140:
    INLINEASM &"# LLVM BB: BB_140", 1 /* sideeffect attdialect */
    %24:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.22)
    %25:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.22 + 8)
    $rax = COPY %24
    $rdx = COPY %25
    RET 0, $rax, $rdx

...
---
name:            _ZNK3c104impl15SizesAndStrides14sizes_arrayrefEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_141:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_141", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides10sizes_dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %5
    $rsi = COPY %3
    $rdx = COPY %4
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2EPKlm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_142:
    INLINEASM &"# LLVM BB: BB_142", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.6 + 8)
    $rax = COPY %11
    $rdx = COPY %12
    RET 0, $rax, $rdx
  
  bb.2.BB_143 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %7:gr64 = COPY killed $rdx
    %6:gr64 = COPY killed $rax
    %10:gr32 = COPY %7.sub_32bit
    %9:gr64 = COPY %6
    INLINEASM &"# LLVM BB: BB_143", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c104impl15SizesAndStrides10sizes_dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_144:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_144", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides8isInlineEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_145:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_145", 1 /* sideeffect attdialect */
    %12:gr64 = ADD64ri32 %5, 8, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.1)
    JMP_1 %bb.3
  
  bb.2.BB_146:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_146", 1 /* sideeffect attdialect */
    %8:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.1)
  
  bb.3.BB_147:
    INLINEASM &"# LLVM BB: BB_147", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %14
    RET64 implicit $rax

...
---
name:            _ZN3c108ArrayRefIlEC2EPKlm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_148:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_148", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %11, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.7)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    MOV64mr %11, 1, $noreg, 8, $noreg, %8 :: (store (s64) into %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            __clang_call_terminate
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_149:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_149", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %1
    CALL64pcrel32 target-flags(x86-plt) @__cxa_begin_catch, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %2:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @_ZSt9terminatev, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c104impl15SizesAndStrides8isInlineEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_150:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_150", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    CMP64mi32 %8, 1, $noreg, 0, $noreg, 5, implicit-def $eflags :: (load (s64) from %ir.3)
    %5:gr8 = SETCCr 6, implicit $eflags
    %3:gr8 = AND8ri %5, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_151:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi
  
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    INLINEASM &"# LLVM BB: BB_151", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr8 = MOV8ri 1
    CMP64mi32 %7, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.3)
    %19:gr8 = COPY %5
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1.BB_152:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_152", 1 /* sideeffect attdialect */
    CMP64mi32 %7, 1, $noreg, 8, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.6)
    %8:gr8 = SETCCr 4, implicit $eflags
    %19:gr8 = COPY %8
  
  bb.2.BB_153:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
  
    %2:gr8 = COPY %19
    INLINEASM &"# LLVM BB: BB_153", 1 /* sideeffect attdialect */
    %11:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %11, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.3.BB_154:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_154", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64ri @.str.21
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 @_ZN3c103strIJA94_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr64 = COPY $rax
    %12:gr64 = MOV64ri @__func__._ZN3c108ArrayRefIlE26debugCheckNullptrInvariantEv
    %13:gr64 = MOV64ri @.str.19
    %14:gr32 = MOV32ri 58
    %15:gr64 = MOV64ri @.str.20
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %13
    $edx = COPY %14
    $rcx = COPY %15
    $r8 = COPY %18
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_155:
    INLINEASM &"# LLVM BB: BB_155", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZN3c103strIJA94_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_156:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_156", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcEE4callES3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_157:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_157", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl4sizeEl
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_158:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi
  
    %3:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    %4:gr64 = COPY killed %3
    INLINEASM &"# LLVM BB: BB_158", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr32 = MOV32ri 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $esi = COPY %6
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_159:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_159", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %27:gr64 = MOV64rm %8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %28
    CALL64m %27, 1, $noreg, 48, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %25 :: (store (s64) into %ir.2)
    JMP_1 %bb.3
  
  bb.2.BB_160:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_160", 1 /* sideeffect attdialect */
    %21:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1010TensorImpl3dimEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = COPY $rax
    %18:gr32 = MOV32r0 implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %20
    $edx = COPY %18
    CALL64pcrel32 @_ZN3c1014maybe_wrap_dimEllb, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.4)
    %14:gr64 = ADD64ri32 %8, 72, implicit-def $eflags
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    $rsi = COPY %13
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides17size_at_uncheckedEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.2)
  
  bb.3.BB_161:
    INLINEASM &"# LLVM BB: BB_161", 1 /* sideeffect attdialect */
    %30:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %30
    RET64 implicit $rax

...
---
name:            _ZN3c1014maybe_wrap_dimEllb
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$edx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_162:
    liveins: $rdi, $rsi, $edx
  
    %2:gr32 = COPY $edx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr8 = COPY %2.sub_8bit
    INLINEASM &"# LLVM BB: BB_162", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %15:gr8 = AND8ri %3, 1, implicit-def $eflags
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %15 :: (store (s8) into %ir.5)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %11:gr8 = MOV8rm %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.5)
    %8:gr8 = AND8ri %11, 1, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %12
    %9:gr32 = MOVZX32rr8 %8
    $edx = COPY %9
    CALL64pcrel32 @_ZN3c1015_maybe_wrap_dimIlEET_S1_S1_b, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    $rax = COPY %10
    RET64 implicit $rax

...
---
name:            _ZNK3c104impl15SizesAndStrides17size_at_uncheckedEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64_nosp, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64_nosp, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_163:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_163", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides10sizes_dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    %8:gr64_nosp = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr64 = MOV64rm %10, 8, %8, 0, $noreg :: (load (s64) from %ir.7)
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZN3c1015_maybe_wrap_dimIlEET_S1_S1_b
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr8, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
  - { reg: '$rsi', virtual-reg: '%3' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_164:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $edx
  
    %4:gr32 = COPY $edx
    %3:gr64 = COPY $rsi
    %2:gr64 = COPY $rdi
    %5:gr8 = COPY %4.sub_8bit
    INLINEASM &"# LLVM BB: BB_164", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    %13:gr8 = AND8ri %5, 1, implicit-def $eflags
    MOV8mr %stack.3, 1, $noreg, 0, $noreg, %13 :: (store (s8) into %ir.6)
    %11:gr64 = IMUL64rmi32 %stack.2, 1, $noreg, 0, $noreg, -1, implicit-def $eflags :: (load (s64) from %ir.5)
    %6:gr32 = MOV32r0 implicit-def $eflags
    %7:gr8 = COPY %6.sub_8bit
    CMP64rm %11, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.4)
    %44:gr8 = COPY %7
    JCC_1 %bb.2, 15, implicit $eflags
  
  bb.1.BB_165:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_165", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    CMP64rm %17, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.5)
    %14:gr8 = SETCCr 12, implicit $eflags
    %44:gr8 = COPY %14
  
  bb.2.BB_166:
    successors: %bb.3(0x40000000), %bb.6(0x40000000)
  
    %1:gr8 = COPY %44
    INLINEASM &"# LLVM BB: BB_166", 1 /* sideeffect attdialect */
    TEST8ri %1, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.3.BB_167:
    successors: %bb.5(0x40000000), %bb.4(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_167", 1 /* sideeffect attdialect */
    CMP64mi32 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.4)
    JCC_1 %bb.5, 13, implicit $eflags
  
  bb.4.BB_168:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_168", 1 /* sideeffect attdialect */
    %41:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %40:gr64 = ADD64rm %41, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.5)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %40 :: (store (s64) into %ir.3)
    JMP_1 %bb.7
  
  bb.5.BB_169:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_169", 1 /* sideeffect attdialect */
    %36:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %36 :: (store (s64) into %ir.3)
    JMP_1 %bb.7
  
  bb.6.BB_170:
    successors: %bb.7(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_170", 1 /* sideeffect attdialect */
    %32:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %32
    CALL64pcrel32 @_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %33:gr64 = COPY $rax
    %31:gr64 = MOV64rm %33, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    %28:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    CALL64pcrel32 @_ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %29:gr64 = COPY $rax
    %27:gr64 = MOV64rm %29, 1, $noreg, 0, $noreg :: (load (s64) from %ir.24)
    %25:gr8 = MOV8rm %stack.3, 1, $noreg, 0, $noreg :: (load (s8) from %ir.6)
    %22:gr8 = AND8ri %25, 1, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %31
    $rsi = COPY %27
    %23:gr32 = MOVZX32rr8 %22
    $edx = COPY %23
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail19maybe_wrap_dim_slowIlEET_S2_S2_b, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %24 :: (store (s64) into %ir.3)
  
  bb.7.BB_171:
    INLINEASM &"# LLVM BB: BB_171", 1 /* sideeffect attdialect */
    %43:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %43
    RET64 implicit $rax

...
---
name:            _ZSt4moveIRlEONSt16remove_referenceIT_E4typeEOS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_172:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_172", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c103strIJA107_cNS_8ArrayRefIlEEA17_ciA13_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_173:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_173", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.6)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.11)
    %22:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %22 :: (store (s64) into %ir.12)
    %19:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %18:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %18 :: (store (s64) into %ir.13)
    %15:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %14:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.14)
    %7:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    %9:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    %11:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %7
    $rdx = COPY %19
    $rcx = COPY %9
    $r8 = COPY %15
    $r9 = COPY %11
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEES3_RKiS3_EE4callB5cxx11ERKS3_S7_SC_S9_SC_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEES3_RKiS3_EE4callB5cxx11ERKS3_S7_SC_S9_SC_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_174:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_174", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.6)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rdi = COPY %7
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.7)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.8)
    %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.9)
    %11:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.10)
    %12:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.11)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $rsi = COPY %8
    $rdx = COPY %9
    $rcx = COPY %10
    $r8 = COPY %11
    $r9 = COPY %12
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_iS3_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_175:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_175", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %14
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_176:
    INLINEASM &"# LLVM BB: BB_176", 1 /* sideeffect attdialect */
    %24:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %24
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax
  
  bb.3.BB_177 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %16:gr64 = COPY killed $rdx
    %15:gr64 = COPY killed $rax
    %20:gr32 = COPY %16.sub_32bit
    %19:gr64 = COPY %15
    INLINEASM &"# LLVM BB: BB_177", 1 /* sideeffect attdialect */
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.13)
    MOV32mr %stack.8, 1, $noreg, 0, $noreg, %20 :: (store (s32) into %ir.14)
    %17:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_178:
    INLINEASM &"# LLVM BB: BB_178", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_iS3_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
  - { reg: '$r9', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_179:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %10:gr64 = COPY $r9
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    %11:gr64 = COPY killed %10
    INLINEASM &"# LLVM BB: BB_179", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.11)
    %27:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %26:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %26
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = COPY $rax
    %22:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %21:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %20:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %19:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    $rsi = COPY %22
    $rdx = COPY %21
    $rcx = COPY %20
    $r8 = COPY %19
    CALL64pcrel32 @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKciS5_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr64 = COPY $rax
    $rax = COPY %18
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strINS_8ArrayRefIlEEJPKciS5_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_180:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    INLINEASM &"# LLVM BB: BB_180", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.9)
    %23:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %22:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    $rsi = COPY %22
    CALL64pcrel32 @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %17:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %16:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %18
    $rdx = COPY %17
    $rcx = COPY %16
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJiS3_EEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    $rax = COPY %15
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIPKcJiS3_EEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_181:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_181", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.7)
    %19:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    $rsi = COPY %18
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZN3c106detail4_strIiJPKcEEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIiJPKcEEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_182:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_182", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIiEERSoS2_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIiEERSoS2_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_183:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_183", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr32 = MOV32rm %11, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $esi = COPY %10
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEi, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZSt5beginIlEPKT_St16initializer_listIS0_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_184:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_184", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %3 :: (store (s64) into %ir.5)
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt16initializer_listIlE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZSt3endIlEPKT_St16initializer_listIS0_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_185:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_185", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %3 :: (store (s64) into %ir.5)
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt16initializer_listIlE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZNKSt16initializer_listIlE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_186:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_186", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt16initializer_listIlE5beginEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_187:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_187", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt16initializer_listIlE3endEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_188:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_188", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNKSt16initializer_listIlE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNKSt16initializer_listIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = SHL64ri %8, 3, implicit-def $eflags
    %6:gr64 = ADD64rr %9, %5, implicit-def $eflags
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c1013TensorOptionsC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr8, preferred-register: '' }
  - { id: 36, class: gr8, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr8, preferred-register: '' }
  - { id: 42, class: gr8, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
  - { id: 45, class: gr8, preferred-register: '' }
  - { id: 46, class: gr8, preferred-register: '' }
  - { id: 47, class: gr8, preferred-register: '' }
  - { id: 48, class: gr8, preferred-register: '' }
  - { id: 49, class: gr8, preferred-register: '' }
  - { id: 50, class: gr8, preferred-register: '' }
  - { id: 51, class: gr16, preferred-register: '' }
  - { id: 52, class: gr16, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr32, preferred-register: '' }
  - { id: 55, class: gr32, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_189:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_189", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %56:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %54:gr32 = MOV32r0 implicit-def $eflags
    %55:gr32 = MOV32ri 4294967295
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %56
    $esi = COPY %54
    $edx = COPY %55
    CALL64pcrel32 @_ZN3c106DeviceC2ENS_10DeviceTypeEa, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $edx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN6caffe28TypeMeta4MakeIfEES0_v, csr_64, implicit $rsp, implicit $ssp, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %52:gr16 = COPY $ax
    MOV16mr %56, 1, $noreg, 2, $noreg, %52 :: (store (s16) into %ir.6)
    MOV8mi %56, 1, $noreg, 4, $noreg, 0 :: (store (s8) into %ir.7, align 2)
    MOV8mi %56, 1, $noreg, 5, $noreg, 0 :: (store (s8) into %ir.8)
    %50:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.9, align 2)
    %49:gr8 = AND8ri %50, -2, implicit-def $eflags
    %47:gr8 = OR8ri %49, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %47 :: (store (s8) into %ir.9, align 2)
    %44:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.13, align 2)
    %43:gr8 = AND8ri %44, -3, implicit-def $eflags
    %41:gr8 = OR8ri %43, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %41 :: (store (s8) into %ir.13, align 2)
    %38:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.17, align 2)
    %37:gr8 = AND8ri %38, -5, implicit-def $eflags
    %35:gr8 = OR8ri %37, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %35 :: (store (s8) into %ir.17, align 2)
    %32:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.21, align 2)
    %31:gr8 = AND8ri %32, -9, implicit-def $eflags
    %29:gr8 = OR8ri %31, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %29 :: (store (s8) into %ir.21, align 2)
    %26:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.25, align 2)
    %25:gr8 = AND8ri %26, -17, implicit-def $eflags
    %23:gr8 = OR8ri %25, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %23 :: (store (s8) into %ir.25, align 2)
    %20:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.29, align 2)
    %19:gr8 = AND8ri %20, -33, implicit-def $eflags
    %17:gr8 = OR8ri %19, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %17 :: (store (s8) into %ir.29, align 2)
    %14:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.33, align 2)
    %13:gr8 = AND8ri %14, -65, implicit-def $eflags
    %11:gr8 = OR8ri %13, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %11 :: (store (s8) into %ir.33, align 2)
    %8:gr8 = MOV8rm %56, 1, $noreg, 6, $noreg :: (load (s8) from %ir.37, align 2)
    %7:gr8 = AND8ri %8, 127, implicit-def $eflags
    %5:gr8 = OR8ri %7, 0, implicit-def $eflags
    MOV8mr %56, 1, $noreg, 6, $noreg, %5 :: (store (s8) into %ir.37, align 2)
    RET64

...
---
name:            _ZNK3c1013TensorOptions5dtypeENS_8optionalIN6caffe28TypeMetaEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_190:
    liveins: $rdi, $esi
  
    %2:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr32 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_190", 1 /* sideeffect attdialect */
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.7, align 2)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %11:gr64 = MOV64rm %12, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %11
    %9:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %9
    %8:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.14, align 2)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %8
    CALL64pcrel32 @_ZNR3c1013TensorOptions9set_dtypeENS_8optionalIN6caffe28TypeMetaEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16, align 2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c108optionalIN6caffe28TypeMetaEEC2IS2_Lb0EEEOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_191:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_191", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt7forwardIN6caffe28TypeMetaEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEEC2EOS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNK3c1013TensorOptions6deviceIJNS_6DeviceEEEES0_DpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr16, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 3, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_192:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi
  
    %3:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    %4:gr64 = COPY killed %3
    INLINEASM &"# LLVM BB: BB_192", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    %0:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    %5:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZSt7forwardIN3c106DeviceEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %7
    $rsi = COPY %6
    CALL64pcrel32 @_ZN3c108optionalINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_193:
    INLINEASM &"# LLVM BB: BB_193", 1 /* sideeffect attdialect */
    %18:gr8 = MOV8rm %stack.3, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.13 + 2)
    MOV8mr %stack.5, 1, $noreg, 2, $noreg, killed %18 :: (store (s8) into %ir.12 + 2, align 2)
    %19:gr16 = MOV16rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.13, align 1)
    MOV16mr %stack.5, 1, $noreg, 0, $noreg, killed %19 :: (store (s16) into %ir.12)
    %20:gr32 = MOVZX32rm8 %stack.5, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.7 + 2, align 2, basealign 4)
    %21:gr32 = SHL32ri %20, 16, implicit-def dead $eflags
    %22:gr32 = MOVZX32rm16 %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.7, align 4)
    %16:gr32 = ADD32rr_DB %22, killed %21, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $esi = COPY %16
    CALL64pcrel32 @_ZNK3c1013TensorOptions6deviceENS_8optionalINS_6DeviceEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %15:gr64 = COPY %17
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.16, align 2)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.17, align 2)
    $rax = COPY %14
    RET64 implicit $rax
  
  bb.2.BB_194 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %9:gr64 = COPY killed $rdx
    %8:gr64 = COPY killed $rax
    %12:gr32 = COPY %9.sub_32bit
    %11:gr64 = COPY %8
    INLINEASM &"# LLVM BB: BB_194", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK2at10TensorBase6deviceEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_195:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_195", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1010TensorImpl6deviceEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr16 = COPY $ax
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %6 :: (store (s16) into %ir.7, align 1)
    %3:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.8, align 1)
    $ax = COPY %3
    RET64 implicit $ax

...
---
name:            _ZNK3c1013TensorOptions6layoutENS_8optionalINS_6LayoutEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_196:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr16 = COPY %1.sub_16bit
    INLINEASM &"# LLVM BB: BB_196", 1 /* sideeffect attdialect */
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.7, align 1)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %10
    %8:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg
    MOV16mr %stack.3, 1, $noreg, 0, $noreg, %8
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    %7:gr32 = MOVZX32rm16 %stack.3, 1, $noreg, 0, $noreg :: (load (s16) from %ir.14, align 1)
    $esi = COPY %7
    CALL64pcrel32 @_ZNR3c1013TensorOptions10set_layoutENS_8optionalINS_6LayoutEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16, align 2)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK2at10TensorBase6layoutEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_197:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_197", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c1010TensorImpl6layoutEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    %3:gr32 = MOVSX32rr8 %5
    $eax = COPY %3
    RET64 implicit $eax

...
---
name:            _ZN3c108optionalINS_6LayoutEEC2IS1_Lb0EEEOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_198:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_198", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt7forwardIN3c106LayoutEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEEC2EOS1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106DeviceC2ENS_10DeviceTypeEa
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
  - { reg: '$edx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_199:
    liveins: $rdi, $esi, $edx
  
    %2:gr32 = COPY $edx
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %4:gr8 = COPY %2.sub_8bit
    %3:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_199", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s8) into %ir.4)
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %4 :: (store (s8) into %ir.5)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %9:gr8 = MOV8rm %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    MOV8mr %10, 1, $noreg, 0, $noreg, %9 :: (store (s8) into %ir.7)
    %7:gr8 = MOV8rm %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.5)
    MOV8mr %10, 1, $noreg, 1, $noreg, %7 :: (store (s8) into %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZN3c106Device8validateEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN6caffe28TypeMeta4MakeIfEES0_v
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr16, preferred-register: '' }
  - { id: 1, class: gr16, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_200:
    INLINEASM &"# LLVM BB: BB_200", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN6caffe28TypeMeta13_typeMetaDataIfEEtv, csr_64, implicit $rsp, implicit $ssp, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr16 = COPY $ax
    %2:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    %4:gr32 = MOVZX32rr16 %5
    $esi = COPY %4
    CALL64pcrel32 @_ZN6caffe28TypeMetaC2Et, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %1:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    $ax = COPY %1
    RET64 implicit $ax

...
---
name:            _ZN3c106Device8validateEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr32, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_201:
    successors: %bb.1(0x40000000), %bb.4(0x40000000)
    liveins: $rdi
  
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    INLINEASM &"# LLVM BB: BB_201", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.1)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %11:gr32 = MOVSX32rm8 %12, 1, $noreg, 1, $noreg :: (load (s8) from %ir.9)
    CMP32ri %11, -1, implicit-def $eflags
    %8:gr8 = SETCCr 13, implicit $eflags
    %7:gr8 = XOR8ri %8, -1, implicit-def $eflags
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.1.BB_202:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_202", 1 /* sideeffect attdialect */
    %37:gr32 = MOVSX32rm8 %12, 1, $noreg, 1, $noreg :: (load (s8) from %ir.14)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %37 :: (store (s32) into %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %38:gr64 = MOV32ri64 @.str.24
    %39:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %40:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY %39
    $rsi = COPY %38
    $rdx = COPY %40
    CALL64pcrel32 @_ZN3c103strIJA46_ciEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %41:gr64 = MOV32ri64 @__func__._ZN3c106Device8validateEv
    %42:gr64 = MOV32ri64 @.str.22
    %43:gr64 = MOV32ri64 @.str.23
    %44:gr32 = MOV32ri 179
    $rdi = COPY %41
    $rsi = COPY %42
    $edx = COPY %44
    $rcx = COPY %43
    $r8 = COPY %39
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_203:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_203", 1 /* sideeffect attdialect */
  
  bb.3.BB_204 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %46:gr64 = COPY killed $rdx
    %45:gr64 = COPY killed $rax
    %50:gr32 = COPY %46.sub_32bit
    %49:gr64 = COPY %45
    INLINEASM &"# LLVM BB: BB_204", 1 /* sideeffect attdialect */
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %49 :: (store (s64) into %ir.4)
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %50 :: (store (s32) into %ir.5)
    %47:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %47
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.11
  
  bb.4.BB_205:
    successors: %bb.5(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_205", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    CALL64pcrel32 @_ZNK3c106Device6is_cpuEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr8 = COPY $al
    %13:gr8 = MOV8ri 1
    TEST8ri %15, 1, implicit-def $eflags
    %54:gr8 = COPY %13
    JCC_1 %bb.5, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.5.BB_206:
    successors: %bb.6(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_206", 1 /* sideeffect attdialect */
    %19:gr32 = MOVSX32rm8 %12, 1, $noreg, 1, $noreg :: (load (s8) from %ir.21)
    CMP32ri %19, 0, implicit-def $eflags
    %16:gr8 = SETCCr 14, implicit $eflags
    %54:gr8 = COPY %16
  
  bb.6.BB_207:
    successors: %bb.7(0x40000000), %bb.10(0x40000000)
  
    %2:gr8 = COPY %54
    INLINEASM &"# LLVM BB: BB_207", 1 /* sideeffect attdialect */
    %21:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %21, 1, implicit-def $eflags
    JCC_1 %bb.7, 5, implicit $eflags
    JMP_1 %bb.10
  
  bb.7.BB_208:
    successors: %bb.8(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_208", 1 /* sideeffect attdialect */
    %22:gr32 = MOVSX32rm8 %12, 1, $noreg, 1, $noreg :: (load (s8) from %ir.27)
    MOV32mr %stack.6, 1, $noreg, 0, $noreg, killed %22 :: (store (s32) into %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = MOV32ri64 @.str.26
    %24:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %25:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    $rdi = COPY %24
    $rsi = COPY %23
    $rdx = COPY %25
    CALL64pcrel32 @_ZN3c103strIJA42_ciEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %26:gr64 = MOV32ri64 @__func__._ZN3c106Device8validateEv
    %27:gr64 = MOV32ri64 @.str.22
    %28:gr64 = MOV32ri64 @.str.25
    %29:gr32 = MOV32ri 183
    $rdi = COPY %26
    $rsi = COPY %27
    $edx = COPY %29
    $rcx = COPY %28
    $r8 = COPY %24
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.8
  
  bb.8.BB_209:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_209", 1 /* sideeffect attdialect */
  
  bb.9.BB_210 (landing-pad):
    successors: %bb.11(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %31:gr64 = COPY killed $rdx
    %30:gr64 = COPY killed $rax
    %35:gr32 = COPY %31.sub_32bit
    %34:gr64 = COPY %30
    INLINEASM &"# LLVM BB: BB_210", 1 /* sideeffect attdialect */
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %34 :: (store (s64) into %ir.4)
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %35 :: (store (s32) into %ir.5)
    %32:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %32
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.11
  
  bb.10.BB_211:
    INLINEASM &"# LLVM BB: BB_211", 1 /* sideeffect attdialect */
    RET64
  
  bb.11.BB_212:
    INLINEASM &"# LLVM BB: BB_212", 1 /* sideeffect attdialect */
    %53:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c103strIJA46_ciEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_213:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_213", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.6)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c106Device6is_cpuEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_214:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_214", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    CMP8mi %8, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s8) from %ir.3)
    %5:gr8 = SETCCr 4, implicit $eflags
    %3:gr8 = AND8ri %5, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c103strIJA42_ciEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_215:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_215", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.6)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKiEE4callB5cxx11ERKS3_S5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_216:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_216", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    $rsi = COPY %5
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJiEEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_217:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_217", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_218:
    INLINEASM &"# LLVM BB: BB_218", 1 /* sideeffect attdialect */
    %18:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.3.BB_219 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %10:gr64 = COPY killed $rdx
    %9:gr64 = COPY killed $rax
    %14:gr32 = COPY %10.sub_32bit
    %13:gr64 = COPY %9
    INLINEASM &"# LLVM BB: BB_219", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.8)
    %11:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_220:
    INLINEASM &"# LLVM BB: BB_220", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJiEEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_221:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_221", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIiEERSoS2_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN6caffe28TypeMeta13_typeMetaDataIfEEtv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr16, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_222:
    INLINEASM &"# LLVM BB: BB_222", 1 /* sideeffect attdialect */
    %0:gr16 = MOV16ri 6
    %1:gr32 = MOVZX32rr16 %0
    $eax = COPY %1
    RET64 implicit $eax

...
---
name:            _ZN6caffe28TypeMetaC2Et
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_223:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr16 = COPY %1.sub_16bit
    INLINEASM &"# LLVM BB: BB_223", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.3)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    MOV16mr %6, 1, $noreg, 0, $noreg, %5 :: (store (s16) into %ir.5)
    RET64

...
---
name:            _ZNR3c1013TensorOptions9set_dtypeENS_8optionalIN6caffe28TypeMetaEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
  - { reg: '$esi', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_224:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $esi
  
    %4:gr32 = COPY $esi
    %2:gr64 = COPY $rdi
    %3:gr64 = COPY killed %2
    %5:gr32 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_224", 1 /* sideeffect attdialect */
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.5, align 2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalIN6caffe28TypeMetaEEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr8 = COPY $al
    TEST8ri %8, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.3
  
  bb.1.BB_225:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_225", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %16
    CALL64pcrel32 @_ZNR3c108optionalIN6caffe28TypeMetaEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %17
    JMP_1 %bb.2
  
  bb.2.BB_226:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_226", 1 /* sideeffect attdialect */
    %29:gr16 = MOV16rm %1, 1, $noreg, 0, $noreg
    MOV16mr %9, 1, $noreg, 2, $noreg, %29
    %28:gr8 = MOV8rm %9, 1, $noreg, 6, $noreg :: (load (s8) from %ir.12, align 2)
    %27:gr8 = AND8ri %28, -9, implicit-def $eflags
    %25:gr8 = OR8ri %27, 8, implicit-def $eflags
    MOV8mr %9, 1, $noreg, 6, $noreg, %25 :: (store (s8) into %ir.12, align 2)
    JMP_1 %bb.4
  
  bb.3.BB_227:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_227", 1 /* sideeffect attdialect */
    %15:gr8 = MOV8rm %9, 1, $noreg, 6, $noreg :: (load (s8) from %ir.16, align 2)
    %14:gr8 = AND8ri %15, -9, implicit-def $eflags
    %12:gr8 = OR8ri %14, 0, implicit-def $eflags
    MOV8mr %9, 1, $noreg, 6, $noreg, %12 :: (store (s8) into %ir.16, align 2)
  
  bb.4.BB_228:
    INLINEASM &"# LLVM BB: BB_228", 1 /* sideeffect attdialect */
    RET64
  
  bb.5.BB_229 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %19:gr64 = COPY killed $rdx
    %18:gr64 = COPY killed $rax
    %22:gr32 = COPY %19.sub_32bit
    %21:gr64 = COPY %18
    INLINEASM &"# LLVM BB: BB_229", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c108optionalIN6caffe28TypeMetaEEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_230:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_230", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalIN6caffe28TypeMetaEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_231:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_231", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_232:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_232", 1 /* sideeffect attdialect */
    JMP_1 %bb.3
  
  bb.2.BB_233:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_233", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.27
    %7:gr64 = MOV64ri @.str.28
    %8:gr32 = MOV32ri 753
    %9:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZNR3c108optionalIN6caffe28TypeMetaEEdeEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $edx = COPY %8
    $rcx = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_234:
    INLINEASM &"# LLVM BB: BB_234", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNR3c108optionalIN6caffe28TypeMetaEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    $rax = COPY %11
    RET64 implicit $rax

...
---
name:            _ZNK3c108optionalIN6caffe28TypeMetaEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_235:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_235", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_236:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_236", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %7:gr8 = MOV8rm %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3, align 2)
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalIN6caffe28TypeMetaEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_237:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_237", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 2, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZSt7forwardIN6caffe28TypeMetaEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_238:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_238", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1045trivially_copyable_optimization_optional_baseIN6caffe28TypeMetaEEC2EOS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_239:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_239", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    MOV8mi %11, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5, align 2)
    %10:gr64 = ADD64ri32 %11, 2, implicit-def $eflags
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c1014constexpr_moveIRN6caffe28TypeMetaEEEONSt16remove_referenceIT_E4typeEOS5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1019constexpr_storage_tIN6caffe28TypeMetaEEC2IJS2_EEEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1014constexpr_moveIRN6caffe28TypeMetaEEEONSt16remove_referenceIT_E4typeEOS5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_240:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_240", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1019constexpr_storage_tIN6caffe28TypeMetaEEC2IJS2_EEEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_241:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_241", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZN3c1017constexpr_forwardIN6caffe28TypeMetaEEEOT_RNSt16remove_referenceIS3_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %6:gr16 = MOV16rm %8, 1, $noreg, 0, $noreg
    MOV16mr %10, 1, $noreg, 0, $noreg, %6
    RET64

...
---
name:            _ZN3c1017constexpr_forwardIN6caffe28TypeMetaEEEOT_RNSt16remove_referenceIS3_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_242:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_242", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c1013TensorOptions6deviceENS_8optionalINS_6DeviceEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr16, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr16, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr16, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 3, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 3, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_243:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr32 = COPY %1
    INLINEASM &"# LLVM BB: BB_243", 1 /* sideeffect attdialect */
    %8:gr16 = COPY %2.sub_16bit
    MOV16mr %stack.2, 1, $noreg, 0, $noreg, killed %8 :: (store (s16) into %ir.4, align 4)
    %9:gr32 = SHR32ri %2, 16, implicit-def dead $eflags
    %10:gr8 = COPY %9.sub_8bit
    MOV8mr %stack.2, 1, $noreg, 2, $noreg, killed %10 :: (store (s8) into %ir.4 + 2, align 2, basealign 4)
    %11:gr8 = MOV8rm %stack.2, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.10 + 2, align 2)
    MOV8mr %stack.1, 1, $noreg, 2, $noreg, killed %11 :: (store (s8) into %ir.9 + 2, align 2)
    %12:gr16 = MOV16rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.10, align 4)
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, killed %12 :: (store (s16) into %ir.9)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.5)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    %14:gr64 = MOV64rm killed %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13, align 2)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, killed %14 :: (store (s64) into %ir.12)
    %15:gr8 = MOV8rm %stack.1, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.15 + 2, align 2)
    MOV8mr %stack.4, 1, $noreg, 2, $noreg, killed %15 :: (store (s8) into %ir.14 + 2, align 2)
    %16:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.15)
    MOV16mr %stack.4, 1, $noreg, 0, $noreg, killed %16 :: (store (s16) into %ir.14)
    %17:gr8 = MOV8rm %stack.4, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.18 + 2, align 2)
    MOV8mr %stack.5, 1, $noreg, 2, $noreg, killed %17 :: (store (s8) into %ir.17 + 2, align 2)
    %18:gr16 = MOV16rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.18)
    MOV16mr %stack.5, 1, $noreg, 0, $noreg, killed %18 :: (store (s16) into %ir.17)
    %19:gr32 = MOVZX32rm8 %stack.5, 1, $noreg, 2, $noreg :: (dereferenceable load (s8) from %ir.7 + 2, align 2, basealign 4)
    %20:gr32 = SHL32ri %19, 16, implicit-def dead $eflags
    %21:gr32 = MOVZX32rm16 %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s16) from %ir.7, align 4)
    %6:gr32 = ADD32rr_DB %21, killed %20, implicit-def dead $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %7
    $esi = COPY %6
    CALL64pcrel32 @_ZNR3c1013TensorOptions10set_deviceENS_8optionalINS_6DeviceEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.20, align 2)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt7forwardIN3c106DeviceEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_244:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_244", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c108optionalINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_245:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_245", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNR3c1013TensorOptions10set_deviceENS_8optionalINS_6DeviceEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
  - { reg: '$esi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 3, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_246:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $esi
  
    %3:gr32 = COPY $esi
    %2:gr64 = COPY $rdi
    %4:gr32 = COPY %3
    INLINEASM &"# LLVM BB: BB_246", 1 /* sideeffect attdialect */
    %11:gr16 = COPY %4.sub_16bit
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, killed %11 :: (store (s16) into %ir.3, align 4)
    %12:gr32 = SHR32ri %4, 16, implicit-def dead $eflags
    %13:gr8 = COPY %12.sub_8bit
    MOV8mr %stack.1, 1, $noreg, 2, $noreg, killed %13 :: (store (s8) into %ir.3 + 2, align 2, basealign 4)
    %9:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %9
    %10:gr8 = MOV8rm %stack.1, 1, $noreg, 2, $noreg
    MOV8mr %stack.0, 1, $noreg, 2, $noreg, %10
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.4)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.3
  
  bb.1.BB_247:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_247", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %20
    CALL64pcrel32 @_ZNR3c108optionalINS_6DeviceEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %21
    JMP_1 %bb.2
  
  bb.2.BB_248:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_248", 1 /* sideeffect attdialect */
    %33:gr16 = MOV16rm %1, 1, $noreg, 0, $noreg
    MOV16mr %8, 1, $noreg, 0, $noreg, %33
    %32:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.14, align 2)
    %31:gr8 = AND8ri %32, -5, implicit-def $eflags
    %29:gr8 = OR8ri %31, 4, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %29 :: (store (s8) into %ir.14, align 2)
    JMP_1 %bb.4
  
  bb.3.BB_249:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_249", 1 /* sideeffect attdialect */
    %19:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.18, align 2)
    %18:gr8 = AND8ri %19, -5, implicit-def $eflags
    %16:gr8 = OR8ri %18, 0, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %16 :: (store (s8) into %ir.18, align 2)
  
  bb.4.BB_250:
    INLINEASM &"# LLVM BB: BB_250", 1 /* sideeffect attdialect */
    RET64
  
  bb.5.BB_251 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %23:gr64 = COPY killed $rdx
    %22:gr64 = COPY killed $rax
    %26:gr32 = COPY %23.sub_32bit
    %25:gr64 = COPY %22
    INLINEASM &"# LLVM BB: BB_251", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c108optionalINS_6DeviceEEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_252:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_252", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_6DeviceEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_253:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_253", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_254:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_254", 1 /* sideeffect attdialect */
    JMP_1 %bb.3
  
  bb.2.BB_255:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_255", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.27
    %7:gr64 = MOV64ri @.str.28
    %8:gr32 = MOV32ri 753
    %9:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6DeviceEEdeEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $edx = COPY %8
    $rcx = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_256:
    INLINEASM &"# LLVM BB: BB_256", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNR3c108optionalINS_6DeviceEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    $rax = COPY %11
    RET64 implicit $rax

...
---
name:            _ZNK3c108optionalINS_6DeviceEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_257:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_257", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_258:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_258", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %7:gr8 = MOV8rm %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_6DeviceEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_259:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_259", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 1, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_260:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_260", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1045trivially_copyable_optimization_optional_baseINS_6DeviceEEC2IJS1_EEENS_10in_place_tEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_261:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_261", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV8mi %11, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.6)
    %10:gr64 = ADD64ri32 %11, 1, implicit-def $eflags
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1019constexpr_storage_tINS_6DeviceEEC2IJS1_EEEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1019constexpr_storage_tINS_6DeviceEEC2IJS1_EEEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_262:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_262", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZN3c1017constexpr_forwardINS_6DeviceEEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %6:gr16 = MOV16rm %8, 1, $noreg, 0, $noreg
    MOV16mr %10, 1, $noreg, 0, $noreg, %6
    RET64

...
---
name:            _ZNK3c1010TensorImpl6deviceEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr16, preferred-register: '' }
  - { id: 14, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_263:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_263", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %0:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    %4:gr32 = MOVZX32rm16 %0, 1, $noreg, 181, $noreg :: (load (s16) from %ir.5, align 1)
    %5:gr32 = SHR32ri %4, 15, implicit-def dead $eflags
    %3:gr8 = COPY %5.sub_8bit
    TEST8ri %3, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_264:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_264", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64m %12, 1, $noreg, 104, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax :: (load (s64) from %ir.12)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr16 = COPY $ax
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %10 :: (store (s16) into %ir.15, align 1)
    JMP_1 %bb.3
  
  bb.2.BB_265:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_265", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNK3c1010TensorImpl14device_defaultEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr16 = COPY $ax
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %7 :: (store (s16) into %ir.17, align 1)
  
  bb.3.BB_266:
    INLINEASM &"# LLVM BB: BB_266", 1 /* sideeffect attdialect */
    %14:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.18, align 1)
    $ax = COPY %14
    RET64 implicit $ax

...
---
name:            _ZNK3c1010TensorImpl14device_defaultEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr16, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_267:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_267", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = ADD64ri32 %9, 178, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEE9has_valueEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    %5:gr8 = XOR8ri %7, -1, implicit-def $eflags
    TEST8ri %5, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_268:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_268", 1 /* sideeffect attdialect */
    %21:gr64 = MOV64ri @.str.30
    %22:gr64 = MOV64ri @.str.31
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %22
    CALL64pcrel32 @_ZN3c106detail17torchCheckMsgImplEPKcS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    %17:gr64 = MOV64ri @__func__._ZNK3c1010TensorImpl14device_defaultEv
    %18:gr64 = MOV64ri @.str.29
    %19:gr32 = MOV32ri 1243
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %18
    $edx = COPY %19
    $rcx = COPY %23
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.2.BB_269:
    INLINEASM &"# LLVM BB: BB_269", 1 /* sideeffect attdialect */
    %16:gr64 = ADD64ri32 %9, 178, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    CALL64pcrel32 @_ZNKR3c108optionalINS_6DeviceEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    %13:gr16 = MOV16rm %15, 1, $noreg, 0, $noreg
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %13
    %11:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.12, align 1)
    $ax = COPY %11
    RET64 implicit $ax

...
---
name:            _ZNK3c108optionalINS_6DeviceEE9has_valueEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_270:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_270", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNKR3c108optionalINS_6DeviceEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_271:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %4:gr64 = COPY $rdi
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_271", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c108optionalINS_6DeviceEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_272:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_272", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNKR3c108optionalINS_6DeviceEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    %12:gr64 = COPY %11
    JMP_1 %bb.3
  
  bb.2.BB_273:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_273", 1 /* sideeffect attdialect */
    %10:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNKR3c108optionalINS_6DeviceEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %12:gr64 = COPY %9
  
  bb.3.BB_274:
    %3:gr64 = COPY %12
    INLINEASM &"# LLVM BB: BB_274", 1 /* sideeffect attdialect */
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNKR3c108optionalINS_6DeviceEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_275:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_275", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 1, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_276:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_276", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %2:gr64 = MOV64ri @.str.32
    %3:gr64 = MOV64ri @.str.28
    %4:gr32 = MOV32ri 749
    %5:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZZNKR3c108optionalINS_6DeviceEEdeEvENKUlvE_clEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    $rsi = COPY %3
    $edx = COPY %4
    $rcx = COPY %5
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNR3c1013TensorOptions10set_layoutENS_8optionalINS_6LayoutEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
  - { reg: '$esi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_277:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $esi
  
    %3:gr32 = COPY $esi
    %2:gr64 = COPY $rdi
    %4:gr16 = COPY %3.sub_16bit
    INLINEASM &"# LLVM BB: BB_277", 1 /* sideeffect attdialect */
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s16) into %ir.5, align 1)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNK3c108optionalINS_6LayoutEEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.3
  
  bb.1.BB_278:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_278", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %15
    CALL64pcrel32 @_ZNR3c108optionalINS_6LayoutEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %16
    JMP_1 %bb.2
  
  bb.2.BB_279:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_279", 1 /* sideeffect attdialect */
    %29:gr8 = MOV8rm %1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.8)
    MOV8mr %8, 1, $noreg, 4, $noreg, %29 :: (store (s8) into %ir.10, align 2)
    %27:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.11, align 2)
    %26:gr8 = AND8ri %27, -17, implicit-def $eflags
    %24:gr8 = OR8ri %26, 16, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %24 :: (store (s8) into %ir.11, align 2)
    JMP_1 %bb.4
  
  bb.3.BB_280:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_280", 1 /* sideeffect attdialect */
    %14:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.15, align 2)
    %13:gr8 = AND8ri %14, -17, implicit-def $eflags
    %11:gr8 = OR8ri %13, 0, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %11 :: (store (s8) into %ir.15, align 2)
  
  bb.4.BB_281:
    INLINEASM &"# LLVM BB: BB_281", 1 /* sideeffect attdialect */
    RET64
  
  bb.5.BB_282 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %18:gr64 = COPY killed $rdx
    %17:gr64 = COPY killed $rax
    %21:gr32 = COPY %18.sub_32bit
    %20:gr64 = COPY %17
    INLINEASM &"# LLVM BB: BB_282", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c108optionalINS_6LayoutEEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_283:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_283", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_6LayoutEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_6LayoutEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_284:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_284", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c108optionalINS_6LayoutEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_285:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_285", 1 /* sideeffect attdialect */
    JMP_1 %bb.3
  
  bb.2.BB_286:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_286", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.27
    %7:gr64 = MOV64ri @.str.28
    %8:gr32 = MOV32ri 753
    %9:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZNR3c108optionalINS_6LayoutEEdeEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $edx = COPY %8
    $rcx = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_287:
    INLINEASM &"# LLVM BB: BB_287", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNR3c108optionalINS_6LayoutEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    $rax = COPY %11
    RET64 implicit $rax

...
---
name:            _ZNK3c108optionalINS_6LayoutEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_288:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_288", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_289:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_289", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %7:gr8 = MOV8rm %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_6LayoutEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_290:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_290", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 1, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl6layoutEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr8, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_291:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_291", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %0:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    %4:gr8 = MOV8rm %0, 1, $noreg, 183, $noreg :: (load (s8) from %ir.8 + 2)
    %3:gr8 = AND8ri %4, 1, implicit-def dead $eflags
    TEST8ri %3, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_292:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_292", 1 /* sideeffect attdialect */
    %42:gr64 = MOV64rm %0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64m %42, 1, $noreg, 112, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al :: (load (s64) from %ir.15)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %40:gr8 = COPY $al
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %40 :: (store (s8) into %ir.1)
    JMP_1 %bb.11
  
  bb.2.BB_293:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_293", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm $noreg, 1, $noreg, @__const._ZNK3c1010TensorImpl6layoutEv.sparse_and_sparsecsr_and_mkldnn_ks, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %12
    %11:gr64 = ADD64ri32 %0, 184, implicit-def $eflags
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %10
    %9:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %9
    CALL64pcrel32 @_ZNK3c1014DispatchKeySet7has_anyES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr8 = COPY $al
    TEST8ri %8, 1, implicit-def $eflags
    JCC_1 %bb.4, 5, implicit $eflags
  
  bb.3.BB_294:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_294", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.1)
    JMP_1 %bb.11
  
  bb.4.BB_295:
    successors: %bb.5(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_295", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNK3c1010TensorImpl9is_sparseEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr8 = COPY $al
    TEST8ri %14, 1, implicit-def $eflags
    JCC_1 %bb.5, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.5.BB_296:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_296", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.1)
    JMP_1 %bb.11
  
  bb.6.BB_297:
    successors: %bb.7(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_297", 1 /* sideeffect attdialect */
    %21:gr64 = ADD64ri32 %0, 184, implicit-def $eflags
    %20:gr64 = MOV64rm $noreg, 1, $noreg, @_ZN3c10L13sparse_csr_ksE, $noreg
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %20
    %19:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.28)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %19
    CALL64pcrel32 @_ZNK3c1014DispatchKeySet7has_anyES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr8 = COPY $al
    TEST8ri %18, 1, implicit-def $eflags
    JCC_1 %bb.7, 5, implicit $eflags
    JMP_1 %bb.8
  
  bb.7.BB_298:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_298", 1 /* sideeffect attdialect */
    %37:gr64 = MOV64rm %0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.31)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64m %37, 1, $noreg, 168, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al :: (load (s64) from %ir.33)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %35:gr8 = COPY $al
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %35 :: (store (s8) into %ir.1)
    JMP_1 %bb.11
  
  bb.8.BB_299:
    successors: %bb.9(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_299", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNK3c1010TensorImpl9is_mkldnnEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr8 = COPY $al
    %24:gr8 = XOR8ri %25, -1, implicit-def $eflags
    TEST8ri %24, 1, implicit-def $eflags
    JCC_1 %bb.9, 5, implicit $eflags
    JMP_1 %bb.10
  
  bb.9.BB_300:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_300", 1 /* sideeffect attdialect */
    %31:gr64 = MOV64ri @.str.34
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %31
    CALL64pcrel32 @_ZN3c103strIJA51_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %32:gr64 = COPY $rax
    %26:gr64 = MOV64ri @__func__._ZNK3c1010TensorImpl6layoutEv
    %27:gr64 = MOV64ri @.str.29
    %28:gr32 = MOV32ri 1279
    %29:gr64 = MOV64ri @.str.33
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    $rsi = COPY %27
    $edx = COPY %28
    $rcx = COPY %29
    $r8 = COPY %32
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.10.BB_301:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_301", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 3 :: (store (s8) into %ir.1)
  
  bb.11.BB_302:
    INLINEASM &"# LLVM BB: BB_302", 1 /* sideeffect attdialect */
    %44:gr32 = MOVSX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.1)
    $eax = COPY %44
    RET64 implicit $eax

...
---
name:            _ZNK3c1014DispatchKeySet7has_anyES0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr8, preferred-register: '' }
  - { id: 36, class: gr8, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_303:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %5:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_303", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.12)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14)
    %10:gr64 = AND64ri32 %11, 32767, implicit-def $eflags
    %7:gr8 = MOV8ri 1
    CMP64ri32 %10, 0, implicit-def $eflags
    %49:gr8 = COPY %7
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_304:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_304", 1 /* sideeffect attdialect */
    MOV16mi %stack.6, 1, $noreg, 0, $noreg, 1 :: (store (s16) into %ir.18)
    MOV16mi %stack.6, 1, $noreg, 2, $noreg, 6 :: (store (s16) into %ir.19)
    MOV16mi %stack.6, 1, $noreg, 4, $noreg, 9 :: (store (s16) into %ir.20)
    MOV16mi %stack.6, 1, $noreg, 6, $noreg, 24 :: (store (s16) into %ir.21)
    %33:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %33 :: (store (s64) into %ir.22)
    MOV64mi32 %stack.5, 1, $noreg, 8, $noreg, 4 :: (store (s64) into %ir.24)
    %31:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.26)
    %30:gr64 = MOV64rm %stack.5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.28)
    %27:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %31
    $rdx = COPY %30
    CALL64pcrel32 @_ZN3c1014DispatchKeySetC2ESt16initializer_listINS_11DispatchKeyEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %26:gr64 = MOV64ri 274887376896
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    $rsi = COPY %26
    CALL64pcrel32 @_ZN3c1014DispatchKeySetC2Em, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.30)
    %21:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %24
    CALL64pcrel32 @_ZNK3c1014DispatchKeySetanES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.33)
    %17:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    %18:gr32 = MOV32r0 implicit-def $eflags
    %19:gr64 = SUBREG_TO_REG 0, %18, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %19
    CALL64pcrel32 @_ZN3c1014DispatchKeySetC2Em, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.34)
    %13:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %16
    CALL64pcrel32 @_ZNK3c1014DispatchKeySeteqES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr8 = COPY $al
    %49:gr8 = COPY %15
  
  bb.2.BB_305:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
  
    %2:gr8 = COPY %49
    INLINEASM &"# LLVM BB: BB_305", 1 /* sideeffect attdialect */
    %35:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %35, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.3.BB_306:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_306", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c103strIJEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %45:gr64 = MOV64ri @__func__._ZNK3c1014DispatchKeySet7has_anyES0_
    %46:gr64 = MOV64ri @.str.35
    %47:gr32 = MOV32ri 302
    %48:gr64 = MOV64ri @.str.36
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %45
    $rsi = COPY %46
    $edx = COPY %47
    $rcx = COPY %48
    CALL64pcrel32 @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_307:
    INLINEASM &"# LLVM BB: BB_307", 1 /* sideeffect attdialect */
    %44:gr64 = MOV64rm %12, 1, $noreg, 0, $noreg :: (load (s64) from %ir.39)
    %43:gr64 = AND64rm %44, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.41)
    CMP64ri32 %43, 0, implicit-def $eflags
    %39:gr8 = SETCCr 5, implicit $eflags
    %37:gr8 = AND8ri %39, 1, implicit-def $eflags
    %38:gr32 = MOVZX32rr8 %37
    $eax = COPY %38
    RET64 implicit $eax

...
---
name:            _ZNK3c1010TensorImpl9is_sparseEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_308:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_308", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %11:gr64 = ADD64ri32 %12, 184, implicit-def $eflags
    %9:gr64 = MOV64rm $noreg, 1, $noreg, @_ZN3c10L9sparse_ksE, $noreg
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %9
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %8
    CALL64pcrel32 @_ZNK3c1014DispatchKeySet7has_allES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1010TensorImpl9is_mkldnnEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_309:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_309", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %11:gr64 = ADD64ri32 %12, 184, implicit-def $eflags
    %9:gr64 = MOV64rm $noreg, 1, $noreg, @_ZN3c10L9mkldnn_ksE, $noreg
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %9
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %8
    CALL64pcrel32 @_ZNK3c1014DispatchKeySet7has_allES0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c103strIJA51_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_310:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_310", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcEE4callES3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1014DispatchKeySetanES0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_311:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_311", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %12:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %10:gr64 = AND64rm %12, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.9)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c1014DispatchKeySetC2Em, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c1014DispatchKeySetC2ESt16initializer_listINS_11DispatchKeyEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_312:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_312", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.8)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %13
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %14
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %12
    $rdx = COPY %11
    CALL64pcrel32 @_ZN3c1014DispatchKeySet12keys_to_reprESt16initializer_listINS_11DispatchKeyEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    MOV64mr %15, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.10)
    RET64

...
---
name:            _ZN3c1014DispatchKeySetC2Em
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_313:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_313", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %7, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    RET64

...
---
name:            _ZNK3c1014DispatchKeySeteqES0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_314:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_314", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %11:gr64 = MOV64rm %12, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    CMP64rm %11, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    %7:gr8 = SETCCr 4, implicit $eflags
    %5:gr8 = AND8ri %7, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_315:
    liveins: $rdi, $rsi, $edx, $rcx
  
    %6:gr64 = COPY $rcx
    %4:gr32 = COPY $edx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr32 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_315", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV32mr %stack.3, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.7)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.8)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.7)
    %12:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    $edx = COPY %13
    $rcx = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail14torchCheckFailEPKcS2_jS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c103strIJEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_316:
    INLINEASM &"# LLVM BB: BB_316", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJEE4callEv, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1014DispatchKeySet12keys_to_reprESt16initializer_listINS_11DispatchKeyEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr16, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr16, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr16, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_317:
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_317", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.12)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.13)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mi32 %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.5)
    %14:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.7)
    %9:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.8)
  
  bb.1.BB_318:
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_318", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    CMP64rm %17, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.2.BB_319:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_319", 1 /* sideeffect attdialect */
    %31:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %30:gr16 = MOV16rm %31, 1, $noreg, 0, $noreg :: (load (s16) from %ir.22)
    MOV16mr %stack.6, 1, $noreg, 0, $noreg, %30 :: (store (s16) into %ir.9)
    %25:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    %27:gr32 = MOVZX32rm16 %stack.6, 1, $noreg, 0, $noreg :: (load (s16) from %ir.9)
    $esi = COPY %27
    CALL64pcrel32 @_ZN3c1014DispatchKeySetC2ENS_11DispatchKeyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %24:gr64 = MOV64rm %stack.7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.25)
    %23:gr64 = OR64rm %24, %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.5)
  
  bb.3.BB_320:
    successors: %bb.1(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_320", 1 /* sideeffect attdialect */
    %35:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %34:gr64 = ADD64ri32 %35, 2, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %34 :: (store (s64) into %ir.7)
    JMP_1 %bb.1
  
  bb.4.BB_321:
    INLINEASM &"# LLVM BB: BB_321", 1 /* sideeffect attdialect */
    %19:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    $rax = COPY %19
    RET64 implicit $rax

...
---
name:            _ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_322:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_322", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt16initializer_listIN3c1011DispatchKeyEE3endEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_323:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_323", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNKSt16initializer_listIN3c1011DispatchKeyEE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = SHL64ri %8, 1, implicit-def $eflags
    %6:gr64 = ADD64rr %9, %5, implicit-def $eflags
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c1014DispatchKeySetC2ENS_11DispatchKeyE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr16, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr32, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr16, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr16, preferred-register: '' }
  - { id: 31, class: gr16, preferred-register: '' }
  - { id: 32, class: gr16, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr16, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr32, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr32, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr8, preferred-register: '' }
  - { id: 66, class: gr32, preferred-register: '' }
  - { id: 67, class: gr16, preferred-register: '' }
  - { id: 68, class: gr8, preferred-register: '' }
  - { id: 69, class: gr16, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$esi', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_324:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $esi
  
    %4:gr32 = COPY $esi
    %3:gr64 = COPY $rdi
    %5:gr16 = COPY %4.sub_16bit
    INLINEASM &"# LLVM BB: BB_324", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.2)
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %5 :: (store (s16) into %ir.3)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    MOV64mi32 %7, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.10)
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s16) from %ir.3)
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1.BB_325:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_325", 1 /* sideeffect attdialect */
    MOV64mi32 %7, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.13)
    JMP_1 %bb.12
  
  bb.2.BB_326:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_326", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 47, implicit-def $eflags :: (load (s16) from %ir.3)
    JCC_1 %bb.4, 7, implicit $eflags
  
  bb.3.BB_327:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_327", 1 /* sideeffect attdialect */
    %69:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    %68:gr8 = COPY %69.sub_8bit
    %66:gr32 = MOVZX32rr8 %68
    %64:gr32 = ADD32ri %66, 15, implicit-def $eflags
    %62:gr32 = SUB32ri %64, 1, implicit-def $eflags
    %59:gr32 = MOV32rr %62
    %60:gr64 = SUBREG_TO_REG 0, %59, %subreg.sub_32bit
    %55:gr64 = MOV32ri64 1
    $rcx = COPY %60
    $cl = KILL killed $rcx
    %57:gr64 = SHL64rCL %55, implicit-def $eflags, implicit $cl
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %57 :: (store (s64) into %ir.4)
    %53:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %7, 1, $noreg, 0, $noreg, %53 :: (store (s64) into %ir.24)
    JMP_1 %bb.11
  
  bb.4.BB_328:
    successors: %bb.9(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_328", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 127, implicit-def $eflags :: (load (s16) from %ir.3)
    JCC_1 %bb.9, 7, implicit $eflags
  
  bb.5.BB_329:
    successors: %bb.7(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_329", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %33:gr32 = MOVZX32rm16 %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    $edi = COPY %33
    CALL64pcrel32 @_ZN3c1018toFunctionalityKeyENS_11DispatchKeyE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %34:gr16 = COPY $ax
    MOV16mr %stack.3, 1, $noreg, 0, $noreg, %34 :: (store (s16) into %ir.5)
    %30:gr16 = MOV16rm %stack.3, 1, $noreg, 0, $noreg :: (load (s16) from %ir.5)
    %29:gr8 = COPY %30.sub_8bit
    %27:gr32 = MOVZX32rr8 %29
    %25:gr32 = ADD32ri %27, 15, implicit-def $eflags
    %23:gr32 = SUB32ri %25, 1, implicit-def $eflags
    %20:gr32 = MOV32rr %23
    %21:gr64 = SUBREG_TO_REG 0, %20, %subreg.sub_32bit
    %16:gr64 = MOV32ri64 1
    $rcx = COPY %21
    $cl = KILL killed $rcx
    %18:gr64 = SHL64rCL %16, implicit-def $eflags, implicit $cl
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %18 :: (store (s64) into %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr32 = MOVZX32rm16 %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    $edi = COPY %13
    CALL64pcrel32 @_ZN3c1018toBackendComponentENS_11DispatchKeyE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr8 = COPY $al
    MOV8mr %stack.5, 1, $noreg, 0, $noreg, %14 :: (store (s8) into %ir.7)
    CMP8mi %stack.5, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s8) from %ir.7)
    JCC_1 %bb.7, 5, implicit $eflags
  
  bb.6.BB_330:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_330", 1 /* sideeffect attdialect */
    %45:gr32 = MOV32r0 implicit-def $eflags
    %46:gr64 = SUBREG_TO_REG 0, %45, %subreg.sub_32bit
    %70:gr64 = COPY %46
    JMP_1 %bb.8
  
  bb.7.BB_331:
    successors: %bb.8(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_331", 1 /* sideeffect attdialect */
    %44:gr32 = MOVZX32rm8 %stack.5, 1, $noreg, 0, $noreg :: (load (s8) from %ir.7)
    %42:gr32 = SUB32ri %44, 1, implicit-def $eflags
    %39:gr32 = MOV32rr %42
    %40:gr64 = SUBREG_TO_REG 0, %39, %subreg.sub_32bit
    %35:gr64 = MOV32ri64 1
    $rcx = COPY %40
    $cl = KILL killed $rcx
    %37:gr64 = SHL64rCL %35, implicit-def $eflags, implicit $cl
    %70:gr64 = COPY %37
  
  bb.8.BB_332:
    successors: %bb.10(0x80000000)
  
    %2:gr64 = COPY %70
    INLINEASM &"# LLVM BB: BB_332", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.8)
    %51:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %50:gr64 = ADD64rm %51, %stack.6, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    MOV64mr %7, 1, $noreg, 0, $noreg, %50 :: (store (s64) into %ir.49)
    JMP_1 %bb.10
  
  bb.9.BB_333:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_333", 1 /* sideeffect attdialect */
    MOV64mi32 %7, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.50)
  
  bb.10.BB_334:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_334", 1 /* sideeffect attdialect */
  
  bb.11.BB_335:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_335", 1 /* sideeffect attdialect */
  
  bb.12.BB_336:
    INLINEASM &"# LLVM BB: BB_336", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZNKSt16initializer_listIN3c1011DispatchKeyEE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_337:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_337", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c1018toFunctionalityKeyENS_11DispatchKeyE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr16, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_338:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr16 = COPY %0.sub_16bit
    INLINEASM &"# LLVM BB: BB_338", 1 /* sideeffect attdialect */
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s16) into %ir.2)
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 47, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.2, 7, implicit $eflags
  
  bb.1.BB_339:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_339", 1 /* sideeffect attdialect */
    %9:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.2.BB_340:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_340", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 63, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.4, 7, implicit $eflags
  
  bb.3.BB_341:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_341", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.4.BB_342:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_342", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 79, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.6, 7, implicit $eflags
  
  bb.5.BB_343:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_343", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 6 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.6.BB_344:
    successors: %bb.8(0x40000000), %bb.7(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_344", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 95, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.8, 7, implicit $eflags
  
  bb.7.BB_345:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_345", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 9 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.8.BB_346:
    successors: %bb.10(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_346", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 111, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.10, 7, implicit $eflags
  
  bb.9.BB_347:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_347", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 12 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.10.BB_348:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_348", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 127, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.12, 7, implicit $eflags
  
  bb.11.BB_349:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_349", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 24 :: (store (s16) into %ir.1)
    JMP_1 %bb.13
  
  bb.12.BB_350:
    successors: %bb.13(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_350", 1 /* sideeffect attdialect */
    MOV16mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s16) into %ir.1)
  
  bb.13.BB_351:
    INLINEASM &"# LLVM BB: BB_351", 1 /* sideeffect attdialect */
    %11:gr32 = MOVZX32rm16 %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.1)
    $eax = COPY %11
    RET64 implicit $eax

...
---
name:            _ZN3c1018toBackendComponentENS_11DispatchKeyE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr16, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr16, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr16, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr16, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr16, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr16, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr32, preferred-register: '' }
  - { id: 29, class: gr16, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr16, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr16, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr16, preferred-register: '' }
  - { id: 42, class: gr8, preferred-register: '' }
  - { id: 43, class: gr32, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
  - { id: 45, class: gr32, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr8, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr16, preferred-register: '' }
  - { id: 50, class: gr8, preferred-register: '' }
  - { id: 51, class: gr16, preferred-register: '' }
  - { id: 52, class: gr8, preferred-register: '' }
  - { id: 53, class: gr32, preferred-register: '' }
  - { id: 54, class: gr8, preferred-register: '' }
  - { id: 55, class: gr32, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr8, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr16, preferred-register: '' }
  - { id: 60, class: gr8, preferred-register: '' }
  - { id: 61, class: gr16, preferred-register: '' }
  - { id: 62, class: gr8, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_352:
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr16 = COPY %0.sub_16bit
    INLINEASM &"# LLVM BB: BB_352", 1 /* sideeffect attdialect */
    MOV16mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s16) into %ir.2)
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 48, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.3, 2, implicit $eflags
  
  bb.1.BB_353:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_353", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 63, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.3, 7, implicit $eflags
  
  bb.2.BB_354:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_354", 1 /* sideeffect attdialect */
    %61:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    %60:gr8 = COPY %61.sub_8bit
    %58:gr32 = MOVZX32rr8 %60
    %56:gr32 = SUB32ri %58, 48, implicit-def $eflags
    %54:gr8 = COPY %56.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %54 :: (store (s8) into %ir.1)
    JMP_1 %bb.16
  
  bb.3.BB_355:
    successors: %bb.6(0x40000000), %bb.4(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_355", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 64, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.6, 2, implicit $eflags
  
  bb.4.BB_356:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_356", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 79, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.6, 7, implicit $eflags
  
  bb.5.BB_357:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_357", 1 /* sideeffect attdialect */
    %51:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    %50:gr8 = COPY %51.sub_8bit
    %48:gr32 = MOVZX32rr8 %50
    %46:gr32 = SUB32ri %48, 64, implicit-def $eflags
    %44:gr8 = COPY %46.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %44 :: (store (s8) into %ir.1)
    JMP_1 %bb.16
  
  bb.6.BB_358:
    successors: %bb.9(0x40000000), %bb.7(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_358", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 80, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.9, 2, implicit $eflags
  
  bb.7.BB_359:
    successors: %bb.9(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_359", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 95, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.9, 7, implicit $eflags
  
  bb.8.BB_360:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_360", 1 /* sideeffect attdialect */
    %41:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    %40:gr8 = COPY %41.sub_8bit
    %38:gr32 = MOVZX32rr8 %40
    %36:gr32 = SUB32ri %38, 80, implicit-def $eflags
    %34:gr8 = COPY %36.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %34 :: (store (s8) into %ir.1)
    JMP_1 %bb.16
  
  bb.9.BB_361:
    successors: %bb.12(0x40000000), %bb.10(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_361", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 96, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.12, 2, implicit $eflags
  
  bb.10.BB_362:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_362", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 111, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.12, 7, implicit $eflags
  
  bb.11.BB_363:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_363", 1 /* sideeffect attdialect */
    %31:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    %30:gr8 = COPY %31.sub_8bit
    %28:gr32 = MOVZX32rr8 %30
    %26:gr32 = SUB32ri %28, 96, implicit-def $eflags
    %24:gr8 = COPY %26.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %24 :: (store (s8) into %ir.1)
    JMP_1 %bb.16
  
  bb.12.BB_364:
    successors: %bb.15(0x40000000), %bb.13(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_364", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 112, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.15, 2, implicit $eflags
  
  bb.13.BB_365:
    successors: %bb.15(0x40000000), %bb.14(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_365", 1 /* sideeffect attdialect */
    CMP16mi %stack.1, 1, $noreg, 0, $noreg, 127, implicit-def $eflags :: (load (s16) from %ir.2)
    JCC_1 %bb.15, 7, implicit $eflags
  
  bb.14.BB_366:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_366", 1 /* sideeffect attdialect */
    %21:gr16 = MOV16rm %stack.1, 1, $noreg, 0, $noreg :: (load (s16) from %ir.2)
    %20:gr8 = COPY %21.sub_8bit
    %18:gr32 = MOVZX32rr8 %20
    %16:gr32 = SUB32ri %18, 112, implicit-def $eflags
    %14:gr8 = COPY %16.sub_8bit
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s8) into %ir.1)
    JMP_1 %bb.16
  
  bb.15.BB_367:
    successors: %bb.16(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_367", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.1)
  
  bb.16.BB_368:
    INLINEASM &"# LLVM BB: BB_368", 1 /* sideeffect attdialect */
    %63:gr32 = MOVZX32rm8 %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.1)
    $eax = COPY %63
    RET64 implicit $eax

...
---
name:            _ZN3c106detail12_str_wrapperIJEE4callEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:       []
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_369:
    INLINEASM &"# LLVM BB: BB_369", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZNK3c1014DispatchKeySet7has_allES0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_370:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_370", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %15, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %12:gr64 = AND64rm %14, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    CMP64rm %12, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.11)
    %7:gr8 = SETCCr 4, implicit $eflags
    %5:gr8 = AND8ri %7, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZSt7forwardIN3c106LayoutEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_371:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_371", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1045trivially_copyable_optimization_optional_baseINS_6LayoutEEC2EOS1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_372:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_372", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    MOV8mi %11, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    %10:gr64 = ADD64ri32 %11, 1, implicit-def $eflags
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c1014constexpr_moveIRNS_6LayoutEEEONSt16remove_referenceIT_E4typeEOS4_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1019constexpr_storage_tINS_6LayoutEEC2IJS1_EEEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1014constexpr_moveIRNS_6LayoutEEEONSt16remove_referenceIT_E4typeEOS4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_373:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_373", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1019constexpr_storage_tINS_6LayoutEEC2IJS1_EEEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_374:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_374", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZN3c1017constexpr_forwardINS_6LayoutEEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %7:gr8 = MOV8rm %9, 1, $noreg, 0, $noreg :: (load (s8) from %ir.7)
    MOV8mr %11, 1, $noreg, 0, $noreg, %7 :: (store (s8) into %ir.5)
    RET64

...
---
name:            _ZN3c1017constexpr_forwardINS_6LayoutEEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_375:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_375", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNR3c1013TensorOptions9set_dtypeENS_8optionalINS_10ScalarTypeEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr16, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$esi', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_376:
    successors: %bb.1(0x40000000), %bb.4(0x40000000)
    liveins: $rdi, $esi
  
    %4:gr32 = COPY $esi
    %3:gr64 = COPY $rdi
    %5:gr16 = COPY %4.sub_16bit
    INLINEASM &"# LLVM BB: BB_376", 1 /* sideeffect attdialect */
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %5 :: (store (s16) into %ir.6, align 1)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_10ScalarTypeEEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr8 = COPY $al
    TEST8ri %8, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.1.BB_377:
    successors: %bb.2(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_377", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %16
    CALL64pcrel32 @_ZNR3c108optionalINS_10ScalarTypeEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %17
    JMP_1 %bb.2
  
  bb.2.BB_378:
    successors: %bb.3(0x40000000), %bb.6(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_378", 1 /* sideeffect attdialect */
    %18:gr32 = MOVSX32rm8 %1, 1, $noreg, 0, $noreg :: (dereferenceable load (s8) from %ir.9)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $edi = COPY %18
    CALL64pcrel32 @_ZN3c10L20scalarTypeToTypeMetaENS_10ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rsp, implicit-def $ssp, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %19:gr16 = COPY $ax
    EH_LABEL <mcsymbol >
    %2:gr16 = COPY %19
    JMP_1 %bb.3
  
  bb.3.BB_379:
    successors: %bb.5(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_379", 1 /* sideeffect attdialect */
    MOV16mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.12)
    %31:gr16 = MOV16rm %stack.2, 1, $noreg, 0, $noreg
    MOV16mr %9, 1, $noreg, 2, $noreg, %31
    %30:gr8 = MOV8rm %9, 1, $noreg, 6, $noreg :: (load (s8) from %ir.16, align 2)
    %29:gr8 = AND8ri %30, -9, implicit-def $eflags
    %27:gr8 = OR8ri %29, 8, implicit-def $eflags
    MOV8mr %9, 1, $noreg, 6, $noreg, %27 :: (store (s8) into %ir.16, align 2)
    JMP_1 %bb.5
  
  bb.4.BB_380:
    successors: %bb.5(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_380", 1 /* sideeffect attdialect */
    %15:gr8 = MOV8rm %9, 1, $noreg, 6, $noreg :: (load (s8) from %ir.20, align 2)
    %14:gr8 = AND8ri %15, -9, implicit-def $eflags
    %12:gr8 = OR8ri %14, 0, implicit-def $eflags
    MOV8mr %9, 1, $noreg, 6, $noreg, %12 :: (store (s8) into %ir.20, align 2)
  
  bb.5.BB_381:
    INLINEASM &"# LLVM BB: BB_381", 1 /* sideeffect attdialect */
    RET64
  
  bb.6.BB_382 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %21:gr64 = COPY killed $rdx
    %20:gr64 = COPY killed $rax
    %24:gr32 = COPY %21.sub_32bit
    %23:gr64 = COPY %20
    INLINEASM &"# LLVM BB: BB_382", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c108optionalINS_10ScalarTypeEEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_383:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_383", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c10L20scalarTypeToTypeMetaENS_10ScalarTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    2
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_384:
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr8 = COPY %0.sub_8bit
    INLINEASM &"# LLVM BB: BB_384", 1 /* sideeffect attdialect */
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s8) into %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    $edi = COPY %6
    CALL64pcrel32 @_ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $ax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr16 = COPY $ax
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %7 :: (store (s16) into %ir.5)
    %3:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.6)
    $ax = COPY %3
    RET64 implicit $ax

...
---
name:            _ZNR3c108optionalINS_10ScalarTypeEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_385:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_385", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c108optionalINS_10ScalarTypeEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_386:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_386", 1 /* sideeffect attdialect */
    JMP_1 %bb.3
  
  bb.2.BB_387:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_387", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.27
    %7:gr64 = MOV64ri @.str.28
    %8:gr32 = MOV32ri 753
    %9:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZNR3c108optionalINS_10ScalarTypeEEdeEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $edx = COPY %8
    $rcx = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_388:
    INLINEASM &"# LLVM BB: BB_388", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNR3c108optionalINS_10ScalarTypeEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    $rax = COPY %11
    RET64 implicit $rax

...
---
name:            _ZNK3c108optionalINS_10ScalarTypeEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_389:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_389", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_390:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_390", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %7:gr8 = MOV8rm %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr16, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr16, preferred-register: '' }
  - { id: 13, class: gr16, preferred-register: '' }
  - { id: 14, class: gr16, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr16, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_391:
    successors: %bb.1(0x40000000), %bb.4(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr8 = COPY %0.sub_8bit
    INLINEASM &"# LLVM BB: BB_391", 1 /* sideeffect attdialect */
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s8) into %ir.2)
    %11:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    %12:gr16 = COPY %11.sub_16bit
    MOV16mr %stack.2, 1, $noreg, 0, $noreg, %12 :: (store (s16) into %ir.3)
    %8:gr32 = MOVZX32rm16 %stack.2, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    CMP32ri %8, 26, implicit-def $eflags
    %5:gr8 = SETCCr 12, implicit $eflags
    %4:gr8 = XOR8ri %5, -1, implicit-def $eflags
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.1.BB_392:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_392", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %18:gr64 = MOV32ri64 @.str.39
    %19:gr64 = MOV32ri64 @.str.40
    %20:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %21:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %20
    $rsi = COPY %18
    $rdx = COPY %21
    $rcx = COPY %19
    CALL64pcrel32 @_ZN3c103strIJA25_cNS_10ScalarTypeEA28_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %22:gr64 = MOV32ri64 @__func__._ZN6caffe28TypeMeta14fromScalarTypeEN3c1010ScalarTypeE
    %23:gr64 = MOV32ri64 @.str.37
    %24:gr64 = MOV32ri64 @.str.38
    %25:gr32 = MOV32ri 467
    $rdi = COPY %22
    $rsi = COPY %23
    $edx = COPY %25
    $rcx = COPY %24
    $r8 = COPY %20
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_393:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_393", 1 /* sideeffect attdialect */
  
  bb.3.BB_394 (landing-pad):
    successors: %bb.5(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %27:gr64 = COPY killed $rdx
    %26:gr64 = COPY killed $rax
    %31:gr32 = COPY %27.sub_32bit
    %30:gr64 = COPY %26
    INLINEASM &"# LLVM BB: BB_394", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %30 :: (store (s64) into %ir.5)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %31 :: (store (s32) into %ir.6)
    %28:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.5
  
  bb.4.BB_395:
    INLINEASM &"# LLVM BB: BB_395", 1 /* sideeffect attdialect */
    %15:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    %17:gr32 = MOVZX32rm16 %stack.2, 1, $noreg, 0, $noreg :: (load (s16) from %ir.3)
    $esi = COPY %17
    CALL64pcrel32 @_ZN6caffe28TypeMetaC2Et, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.17)
    $ax = COPY %14
    RET64 implicit $ax
  
  bb.5.BB_396:
    INLINEASM &"# LLVM BB: BB_396", 1 /* sideeffect attdialect */
    %34:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %34
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c103strIJA25_cNS_10ScalarTypeEA28_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_397:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_397", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.8)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %10:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.9)
    %5:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %7:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %5
    $rdx = COPY %11
    $rcx = COPY %7
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKNS_10ScalarTypeES3_EE4callB5cxx11ERKS3_S6_S9_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_398:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %4:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_398", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rdi = COPY %5
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    %8:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.7)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    $rsi = COPY %6
    $rdx = COPY %7
    $rcx = COPY %8
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJNS_10ScalarTypeES3_EEERSoS5_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_399:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_399", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %10
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_400:
    INLINEASM &"# LLVM BB: BB_400", 1 /* sideeffect attdialect */
    %20:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %4
    RET64 implicit $rax
  
  bb.3.BB_401 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %12:gr64 = COPY killed $rdx
    %11:gr64 = COPY killed $rax
    %16:gr32 = COPY %12.sub_32bit
    %15:gr64 = COPY %11
    INLINEASM &"# LLVM BB: BB_401", 1 /* sideeffect attdialect */
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.9)
    MOV32mr %stack.6, 1, $noreg, 0, $noreg, %16 :: (store (s32) into %ir.10)
    %13:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_402:
    INLINEASM &"# LLVM BB: BB_402", 1 /* sideeffect attdialect */
    %19:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJNS_10ScalarTypeES3_EEERSoS5_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_403:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_403", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.7)
    %19:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    $rsi = COPY %18
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZN3c106detail4_strINS_10ScalarTypeEJPKcEEERSoS5_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strINS_10ScalarTypeEJPKcEEERSoS5_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_404:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_404", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strINS_10ScalarTypeEEERSoS3_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strINS_10ScalarTypeEEERSoS3_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_405:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_405", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    %8:gr32 = MOVSX32rm8 %11, 1, $noreg, 0, $noreg :: (load (s8) from %ir.5)
    $esi = COPY %8
    CALL64pcrel32 @_ZN3c10lsERSoNS_10ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c10lsERSoNS_10ScalarTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_406:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_406", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s8) into %ir.3)
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr32 = MOVSX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    $edi = COPY %8
    CALL64pcrel32 @_ZN3c10L8toStringENS_10ScalarTypeE, csr_64, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c10L8toStringENS_10ScalarTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr64_nosp, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
jumpTable:
  kind:            block-address
  entries:
    - id:              0
      blocks:          [ '%bb.1', '%bb.2', '%bb.3', '%bb.4', '%bb.5', '%bb.6', 
                         '%bb.7', '%bb.8', '%bb.9', '%bb.10', '%bb.11', 
                         '%bb.12', '%bb.13', '%bb.14', '%bb.15', '%bb.16', 
                         '%bb.17', '%bb.18', '%bb.19', '%bb.20', '%bb.21', 
                         '%bb.22', '%bb.23', '%bb.24', '%bb.25' ]
body:             |
  bb.0.BB_407:
    successors: %bb.26(0x40000000), %bb.28(0x40000000)
    liveins: $edi
  
    %0:gr32 = COPY $edi
    %1:gr8 = COPY %0.sub_8bit
    INLINEASM &"# LLVM BB: BB_407", 1 /* sideeffect attdialect */
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s8) into %ir.2)
    %3:gr32 = MOVZX32rm8 %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s8) from %ir.2)
    %2:gr64_nosp = SUBREG_TO_REG 0, killed %3, %subreg.sub_32bit
    %4:gr64 = SUB64ri32 %2, 24, implicit-def $eflags
    JCC_1 %bb.26, 7, implicit $eflags
  
  bb.28.BB_407:
    successors: %bb.1(0x051eb852), %bb.2(0x051eb852), %bb.3(0x051eb852), %bb.4(0x051eb852), %bb.5(0x051eb852), %bb.6(0x051eb852), %bb.7(0x051eb852), %bb.8(0x051eb852), %bb.9(0x051eb852), %bb.10(0x051eb852), %bb.11(0x051eb852), %bb.12(0x051eb852), %bb.13(0x051eb852), %bb.14(0x051eb852), %bb.15(0x051eb852), %bb.16(0x051eb852), %bb.17(0x051eb852), %bb.18(0x051eb852), %bb.19(0x051eb852), %bb.20(0x051eb852), %bb.21(0x051eb852), %bb.22(0x051eb852), %bb.23(0x051eb852), %bb.24(0x051eb852), %bb.25(0x051eb852)
  
    %5:gr64 = MOV64rm $noreg, 8, %2, %jump-table.0, $noreg :: (load (s64) from jump-table)
    JMP64r killed %5
  
  bb.1.BB_408:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_408", 1 /* sideeffect attdialect */
    %30:gr64 = MOV64ri @.str.41
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %30 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.2.BB_409:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_409", 1 /* sideeffect attdialect */
    %29:gr64 = MOV64ri @.str.42
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %29 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.3.BB_410:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_410", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64ri @.str.43
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %28 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.4.BB_411:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_411", 1 /* sideeffect attdialect */
    %27:gr64 = MOV64ri @.str.44
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %27 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.5.BB_412:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_412", 1 /* sideeffect attdialect */
    %26:gr64 = MOV64ri @.str.45
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %26 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.6.BB_413:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_413", 1 /* sideeffect attdialect */
    %25:gr64 = MOV64ri @.str.46
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %25 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.7.BB_414:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_414", 1 /* sideeffect attdialect */
    %24:gr64 = MOV64ri @.str.47
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %24 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.8.BB_415:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_415", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64ri @.str.48
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.9.BB_416:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_416", 1 /* sideeffect attdialect */
    %22:gr64 = MOV64ri @.str.49
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %22 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.10.BB_417:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_417", 1 /* sideeffect attdialect */
    %21:gr64 = MOV64ri @.str.50
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %21 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.11.BB_418:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_418", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64ri @.str.51
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %20 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.12.BB_419:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_419", 1 /* sideeffect attdialect */
    %19:gr64 = MOV64ri @.str.52
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.13.BB_420:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_420", 1 /* sideeffect attdialect */
    %18:gr64 = MOV64ri @.str.53
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %18 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.14.BB_421:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_421", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64ri @.str.54
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %17 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.15.BB_422:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_422", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64ri @.str.55
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.16.BB_423:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_423", 1 /* sideeffect attdialect */
    %15:gr64 = MOV64ri @.str.56
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.17.BB_424:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_424", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64ri @.str.57
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.18.BB_425:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_425", 1 /* sideeffect attdialect */
    %13:gr64 = MOV64ri @.str.58
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.19.BB_426:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_426", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64ri @.str.59
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.20.BB_427:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_427", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64ri @.str.60
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.21.BB_428:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_428", 1 /* sideeffect attdialect */
    %10:gr64 = MOV64ri @.str.61
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.22.BB_429:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_429", 1 /* sideeffect attdialect */
    %9:gr64 = MOV64ri @.str.62
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.23.BB_430:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_430", 1 /* sideeffect attdialect */
    %8:gr64 = MOV64ri @.str.63
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.24.BB_431:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_431", 1 /* sideeffect attdialect */
    %7:gr64 = MOV64ri @.str.64
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.25.BB_432:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_432", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.65
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.1)
    JMP_1 %bb.27
  
  bb.26.BB_433:
    successors: %bb.27(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_433", 1 /* sideeffect attdialect */
    %31:gr64 = MOV64ri @.str.66
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %31 :: (store (s64) into %ir.1)
  
  bb.27.BB_434:
    INLINEASM &"# LLVM BB: BB_434", 1 /* sideeffect attdialect */
    %33:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %33
    RET64 implicit $rax

...
---
name:            _ZNR3c108optionalINS_10ScalarTypeEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_435:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_435", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 1, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZSt7forwardIRKN3c1010ScalarTypeEEOT_RNSt16remove_referenceIS4_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_436:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_436", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1045trivially_copyable_optimization_optional_baseINS_10ScalarTypeEEC2ERKS1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_437:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_437", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    MOV8mi %9, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    %8:gr64 = ADD64ri32 %9, 1, implicit-def $eflags
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %6
    CALL64pcrel32 @_ZN3c1019constexpr_storage_tINS_10ScalarTypeEEC2IJRKS1_EEEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1019constexpr_storage_tINS_10ScalarTypeEEC2IJRKS1_EEEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_438:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_438", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZN3c1017constexpr_forwardIRKNS_10ScalarTypeEEEOT_RNSt16remove_referenceIS4_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %7:gr8 = MOV8rm %9, 1, $noreg, 0, $noreg :: (load (s8) from %ir.7)
    MOV8mr %11, 1, $noreg, 0, $noreg, %7 :: (store (s8) into %ir.5)
    RET64

...
---
name:            _ZN3c1017constexpr_forwardIRKNS_10ScalarTypeEEEOT_RNSt16remove_referenceIS4_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_439:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_439", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNR3c1013TensorOptions17set_memory_formatENS_8optionalINS_12MemoryFormatEEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr16, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr8, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr8, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%2' }
  - { reg: '$esi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_440:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $esi
  
    %3:gr32 = COPY $esi
    %2:gr64 = COPY $rdi
    %4:gr16 = COPY %3.sub_16bit
    INLINEASM &"# LLVM BB: BB_440", 1 /* sideeffect attdialect */
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s16) into %ir.5, align 1)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %6:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNK3c108optionalINS_12MemoryFormatEEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    TEST8ri %7, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.3
  
  bb.1.BB_441:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_441", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %15
    CALL64pcrel32 @_ZNR3c108optionalINS_12MemoryFormatEEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %1:gr64 = COPY %16
    JMP_1 %bb.2
  
  bb.2.BB_442:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_442", 1 /* sideeffect attdialect */
    %29:gr8 = MOV8rm %1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.8)
    MOV8mr %8, 1, $noreg, 5, $noreg, %29 :: (store (s8) into %ir.10)
    %27:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.11, align 2)
    %26:gr8 = AND8ri %27, 127, implicit-def $eflags
    %24:gr8 = OR8ri %26, -128, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %24 :: (store (s8) into %ir.11, align 2)
    JMP_1 %bb.4
  
  bb.3.BB_443:
    successors: %bb.4(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_443", 1 /* sideeffect attdialect */
    %14:gr8 = MOV8rm %8, 1, $noreg, 6, $noreg :: (load (s8) from %ir.15, align 2)
    %13:gr8 = AND8ri %14, 127, implicit-def $eflags
    %11:gr8 = OR8ri %13, 0, implicit-def $eflags
    MOV8mr %8, 1, $noreg, 6, $noreg, %11 :: (store (s8) into %ir.15, align 2)
  
  bb.4.BB_444:
    INLINEASM &"# LLVM BB: BB_444", 1 /* sideeffect attdialect */
    RET64
  
  bb.5.BB_445 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %18:gr64 = COPY killed $rdx
    %17:gr64 = COPY killed $rax
    %21:gr32 = COPY %18.sub_32bit
    %20:gr64 = COPY %17
    INLINEASM &"# LLVM BB: BB_445", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c108optionalINS_12MemoryFormatEEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_446:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_446", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_12MemoryFormatEEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_447:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_447", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c108optionalINS_12MemoryFormatEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_448:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_448", 1 /* sideeffect attdialect */
    JMP_1 %bb.3
  
  bb.2.BB_449:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_449", 1 /* sideeffect attdialect */
    %6:gr64 = MOV64ri @.str.27
    %7:gr64 = MOV64ri @.str.28
    %8:gr32 = MOV32ri 753
    %9:gr64 = MOV64ri @__PRETTY_FUNCTION__._ZNR3c108optionalINS_12MemoryFormatEEdeEv
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $edx = COPY %8
    $rcx = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @__assert_fail, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_450:
    INLINEASM &"# LLVM BB: BB_450", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNR3c108optionalINS_12MemoryFormatEE13contained_valEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    $rax = COPY %11
    RET64 implicit $rax

...
---
name:            _ZNK3c108optionalINS_12MemoryFormatEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_451:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_451", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNK3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEE11initializedEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    %3:gr8 = AND8ri %6, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNK3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEE11initializedEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_452:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_452", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %7:gr8 = MOV8rm %8, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNR3c108optionalINS_12MemoryFormatEE13contained_valEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_453:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_453", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %5:gr64 = ADD64ri32 %7, 1, implicit-def $eflags
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl29is_strides_like_channels_lastEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_454:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_454", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %6:gr32 = MOV32ri 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $esi = COPY %6
    CALL64pcrel32 @_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c10eqIlEEbRKSt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_455:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_455", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.9)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %19:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %17:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %19
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %15
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg
    MOV64mr %stack.3, 1, $noreg, 8, $noreg, %16
    %14:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 8, $noreg :: (load (s64) from %ir.16)
    %9:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE6equalsES1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr8 = COPY $al
    %7:gr8 = AND8ri %12, 1, implicit-def $eflags
    %8:gr32 = MOVZX32rr8 %7
    $eax = COPY %8
    RET64 implicit $eax

...
---
name:            _ZN3c1028get_channels_last_strides_2dENS_8ArrayRefIlEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_456:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_456", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %2 :: (store (s64) into %ir.9)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %9
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %7
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK2at10TensorBase7stridesEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_457:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_457", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c1013intrusive_ptrINS_10TensorImplENS_19UndefinedTensorImplEEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZNK3c1010TensorImpl7stridesEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    %5:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.8)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.10)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.12)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.12 + 8)
    $rax = COPY %6
    $rdx = COPY %7
    RET 0, $rax, $rdx

...
---
name:            _ZNSt6vectorIlSaIlEED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_458:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_458", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    %3:gr64 = MOV64rm %0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %4:gr64 = MOV64rm %0, 1, $noreg, 8, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    $rsi = COPY %4
    $rdx = COPY %5
    CALL64pcrel32 @_ZSt8_DestroyIPllEvT_S1_RSaIT0_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_459:
    INLINEASM &"# LLVM BB: BB_459", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64
  
  bb.2.BB_460 (landing-pad):
    successors: %bb.3(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %7:gr64 = COPY killed $rdx
    %6:gr64 = COPY killed $rax
    %11:gr32 = COPY %7.sub_32bit
    %10:gr64 = COPY %6
    INLINEASM &"# LLVM BB: BB_460", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.2)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %11 :: (store (s32) into %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_461:
    INLINEASM &"# LLVM BB: BB_461", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c1010TensorImpl32is_strides_like_channels_last_3dEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_462:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_462", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %6:gr32 = MOV32ri 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $esi = COPY %6
    CALL64pcrel32 @_ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr8 = COPY $al
    %3:gr8 = AND8ri %7, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZN3c1028get_channels_last_strides_3dENS_8ArrayRefIlEE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_463:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_463", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %2 :: (store (s64) into %ir.9)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 8, $noreg
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %9
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %7
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl15is_strides_likeENS_12MemoryFormatE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr8, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_464:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $esi
  
    %2:gr32 = COPY $esi
    %1:gr64 = COPY $rdi
    %3:gr8 = COPY %2.sub_8bit
    INLINEASM &"# LLVM BB: BB_464", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s8) into %ir.4)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %5:gr32 = MOV32ri 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $esi = COPY %5
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr8 = COPY $al
    TEST8ri %6, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_465:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_465", 1 /* sideeffect attdialect */
    %21:gr8 = MOV8rm %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    %20:gr64 = MOV64rm %7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    %16:gr32 = MOVSX32rr8 %21
    $esi = COPY %16
    CALL64m %20, 1, $noreg, 32, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al :: (load (s64) from %ir.10)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr8 = COPY $al
    %14:gr8 = AND8ri %18, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s8) into %ir.2)
    JMP_1 %bb.3
  
  bb.2.BB_466:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_466", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    %11:gr32 = MOVSX32rm8 %stack.2, 1, $noreg, 0, $noreg :: (load (s8) from %ir.4)
    $esi = COPY %11
    CALL64pcrel32 @_ZNK3c1010TensorImpl23is_strides_like_defaultENS_12MemoryFormatE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr8 = COPY $al
    %9:gr8 = AND8ri %12, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s8) into %ir.2)
  
  bb.3.BB_467:
    INLINEASM &"# LLVM BB: BB_467", 1 /* sideeffect attdialect */
    %25:gr8 = MOV8rm %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    %23:gr8 = AND8ri %25, 1, implicit-def $eflags
    %24:gr32 = MOVZX32rr8 %23
    $eax = COPY %24
    RET64 implicit $eax

...
---
name:            _ZNK3c1010TensorImpl23is_strides_like_defaultENS_12MemoryFormatE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr8, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr8, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_468:
    successors: %bb.1(0x40000000), %bb.6(0x40000000)
    liveins: $rdi, $esi
  
    %2:gr32 = COPY $esi
    %1:gr64 = COPY $rdi
    %3:gr8 = COPY %2.sub_8bit
    INLINEASM &"# LLVM BB: BB_468", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV8mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s8) into %ir.4)
    %0:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    %5:gr32 = MOVZX32rm16 %0, 1, $noreg, 181, $noreg :: (load (s16) from %ir.7, align 1)
    %6:gr32 = SHR32ri %5, 12, implicit-def dead $eflags
    %7:gr8 = COPY %6.sub_8bit
    %4:gr8 = AND8ri %7, 1, implicit-def dead $eflags
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.6
  
  bb.1.BB_469:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_469", 1 /* sideeffect attdialect */
    CMP8mi %stack.2, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load (s8) from %ir.4)
    JCC_1 %bb.3, 5, implicit $eflags
  
  bb.2.BB_470:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_470", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNK3c1010TensorImpl19symbolic_shape_metaEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %37:gr64 = COPY $rax
    %36:gr64 = ADD64ri32 %37, 176, implicit-def $eflags
    %32:gr64 = MOV64ri @.str.29
    %33:gr64 = MOV32ri64 850
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %36
    $rsi = COPY %32
    $rdx = COPY %33
    CALL64pcrel32 target-flags(x86-plt) @_ZNK3c107SymBool10guard_boolEPKcl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %34:gr8 = COPY $al
    %30:gr8 = AND8ri %34, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %30 :: (store (s8) into %ir.2)
    JMP_1 %bb.11
  
  bb.3.BB_471:
    successors: %bb.5(0x40000000), %bb.4(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_471", 1 /* sideeffect attdialect */
    CMP8mi %stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (load (s8) from %ir.4)
    JCC_1 %bb.5, 5, implicit $eflags
  
  bb.4.BB_472:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_472", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNK3c1010TensorImpl19symbolic_shape_metaEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %28:gr64 = COPY $rax
    %27:gr64 = ADD64ri32 %28, 192, implicit-def $eflags
    %23:gr64 = MOV64ri @.str.29
    %24:gr64 = MOV32ri64 853
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %23
    $rdx = COPY %24
    CALL64pcrel32 target-flags(x86-plt) @_ZNK3c107SymBool10guard_boolEPKcl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr8 = COPY $al
    %21:gr8 = AND8ri %25, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %21 :: (store (s8) into %ir.2)
    JMP_1 %bb.11
  
  bb.5.BB_473:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_473", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.2)
    JMP_1 %bb.11
  
  bb.6.BB_474:
    successors: %bb.8(0x40000000), %bb.7(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_474", 1 /* sideeffect attdialect */
    CMP8mi %stack.2, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (load (s8) from %ir.4)
    JCC_1 %bb.8, 5, implicit $eflags
  
  bb.7.BB_475:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_475", 1 /* sideeffect attdialect */
    %16:gr8 = MOV8rm %0, 1, $noreg, 181, $noreg :: (load (s8) from %ir.25)
    %17:gr8 = SHR8ri %16, 2, implicit-def dead $eflags
    %14:gr8 = AND8ri %17, 1, implicit-def dead $eflags
    %15:gr8 = AND8ri %14, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %15 :: (store (s8) into %ir.2)
    JMP_1 %bb.11
  
  bb.8.BB_476:
    successors: %bb.10(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_476", 1 /* sideeffect attdialect */
    CMP8mi %stack.2, 1, $noreg, 0, $noreg, 3, implicit-def $eflags :: (load (s8) from %ir.4)
    JCC_1 %bb.10, 5, implicit $eflags
  
  bb.9.BB_477:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_477", 1 /* sideeffect attdialect */
    %12:gr8 = MOV8rm %0, 1, $noreg, 181, $noreg :: (load (s8) from %ir.33)
    %13:gr8 = SHR8ri %12, 4, implicit-def dead $eflags
    %10:gr8 = AND8ri %13, 1, implicit-def dead $eflags
    %11:gr8 = AND8ri %10, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %11 :: (store (s8) into %ir.2)
    JMP_1 %bb.11
  
  bb.10.BB_478:
    successors: %bb.11(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_478", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.2)
  
  bb.11.BB_479:
    INLINEASM &"# LLVM BB: BB_479", 1 /* sideeffect attdialect */
    %41:gr8 = MOV8rm %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.2)
    %39:gr8 = AND8ri %41, 1, implicit-def $eflags
    %40:gr32 = MOVZX32rr8 %39
    $eax = COPY %40
    RET64 implicit $eax

...
---
name:            _ZNK3c1010TensorImpl19symbolic_shape_metaEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_480:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    INLINEASM &"# LLVM BB: BB_480", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.1)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %10:gr64 = ADD64ri32 %11, 40, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr8 = COPY $al
    %5:gr32 = MOV32r0 implicit-def $eflags
    %6:gr8 = COPY %5.sub_8bit
    TEST8ri %9, 1, implicit-def $eflags
    %31:gr8 = COPY %6
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_481:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_481", 1 /* sideeffect attdialect */
    %17:gr64 = ADD64ri32 %11, 40, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEcvbEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr8 = COPY $al
    %31:gr8 = COPY %13
  
  bb.2.BB_482:
    successors: %bb.3(0x40000000), %bb.4(0x40000000)
  
    %2:gr8 = COPY %31
    INLINEASM &"# LLVM BB: BB_482", 1 /* sideeffect attdialect */
    %19:gr8 = XOR8ri %2, -1, implicit-def $eflags
    TEST8ri %19, 1, implicit-def $eflags
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.4
  
  bb.3.BB_483:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_483", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 @_ZN3c103strIJEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %27:gr64 = MOV64ri @__func__._ZNK3c1010TensorImpl19symbolic_shape_metaEv
    %28:gr64 = MOV64ri @.str.29
    %29:gr32 = MOV32ri 1707
    %30:gr64 = MOV64ri @.str.67
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %28
    $edx = COPY %29
    $rcx = COPY %30
    CALL64pcrel32 @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_NS0_22CompileTimeEmptyStringE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_484:
    INLINEASM &"# LLVM BB: BB_484", 1 /* sideeffect attdialect */
    %26:gr64 = ADD64ri32 %11, 40, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEdeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %22:gr64 = COPY $rax
    $rax = COPY %22
    RET64 implicit $rax

...
---
name:            _ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_485:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_485", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    %7:gr32 = MOV32r0 implicit-def dead $eflags
    %8:gr64 = NEG64r %6, implicit-def $eflags
    %9:gr32 = SBB32rr %7, %7, implicit-def dead $eflags, implicit $eflags
    %2:gr8 = COPY %9.sub_8bit
    %3:gr8 = AND8ri %2, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EEptEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_486:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_486", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEcvbEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_487:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_487", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    %7:gr32 = MOV32r0 implicit-def dead $eflags
    %8:gr64 = NEG64r %6, implicit-def $eflags
    %9:gr32 = SBB32rr %7, %7, implicit-def dead $eflags, implicit $eflags
    %2:gr8 = COPY %9.sub_8bit
    %3:gr8 = AND8ri %2, 1, implicit-def $eflags
    %4:gr32 = MOVZX32rr8 %3
    $eax = COPY %4
    RET64 implicit $eax

...
---
name:            _ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_488:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_488", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
  
  bb.1.BB_489:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_489", 1 /* sideeffect attdialect */
  
  bb.2.BB_490:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_490", 1 /* sideeffect attdialect */
  
  bb.3.BB_491:
    INLINEASM &"# LLVM BB: BB_491", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNKSt10unique_ptrIN3c109ExtraMetaESt14default_deleteIS1_EE3getEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_492:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_492", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNKSt15__uniq_ptr_implIN3c109ExtraMetaESt14default_deleteIS1_EE6_M_ptrEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt15__uniq_ptr_implIN3c109ExtraMetaESt14default_deleteIS1_EE6_M_ptrEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_493:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_493", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt3getILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    %4:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt3getILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_494:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_494", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZSt12__get_helperILm0EPN3c109ExtraMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt12__get_helperILm0EPN3c109ExtraMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_495:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_495", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNSt11_Tuple_implILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEE7_M_headERKS5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNSt11_Tuple_implILm0EJPN3c109ExtraMetaESt14default_deleteIS1_EEE7_M_headERKS5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_496:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_496", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNSt10_Head_baseILm0EPN3c109ExtraMetaELb0EE7_M_headERKS3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNSt10_Head_baseILm0EPN3c109ExtraMetaELb0EE7_M_headERKS3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_497:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_497", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt10unique_ptrIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE3getEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_498:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_498", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNKSt15__uniq_ptr_implIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE6_M_ptrEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt15__uniq_ptr_implIN3c1017SymbolicShapeMetaESt14default_deleteIS1_EE6_M_ptrEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_499:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_499", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZSt3getILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = COPY $rax
    %4:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt3getILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS9_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_500:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_500", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZSt12__get_helperILm0EPN3c1017SymbolicShapeMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt12__get_helperILm0EPN3c1017SymbolicShapeMetaEJSt14default_deleteIS1_EEERKT0_RKSt11_Tuple_implIXT_EJS5_DpT1_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_501:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_501", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNSt11_Tuple_implILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEE7_M_headERKS5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNSt11_Tuple_implILm0EJPN3c1017SymbolicShapeMetaESt14default_deleteIS1_EEE7_M_headERKS5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_502:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_502", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNSt10_Head_baseILm0EPN3c1017SymbolicShapeMetaELb0EE7_M_headERKS3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNSt10_Head_baseILm0EPN3c1017SymbolicShapeMetaELb0EE7_M_headERKS3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_503:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_503", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c108ArrayRefIlEC2ISaIlEEERKSt6vectorIlT_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_504:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_504", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    CALL64pcrel32 @_ZNKSt6vectorIlSaIlEE4dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    MOV64mr %13, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.5)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZNKSt6vectorIlSaIlEE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    MOV64mr %13, 1, $noreg, 8, $noreg, %7 :: (store (s64) into %ir.8)
    RET64

...
---
name:            _ZNK3c108ArrayRefIlE6equalsES1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr8, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr8, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr8, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%5' }
  - { reg: '$rdx', virtual-reg: '%7' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_505:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %7:gr64 = COPY $rdx
    %5:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    %8:gr64 = COPY killed %7
    INLINEASM &"# LLVM BB: BB_505", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.6)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %8 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = MOV64rm %14, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    %9:gr32 = MOV32r0 implicit-def $eflags
    %10:gr8 = COPY %9.sub_8bit
    CMP64rm %13, %stack.0, 1, $noreg, 8, $noreg, implicit-def $eflags :: (load (s64) from %ir.11)
    %25:gr8 = COPY %10
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.1.BB_506:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_506", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %22:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE3endEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    %19:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE5beginEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %22
    $rsi = COPY %21
    $rdx = COPY %20
    CALL64pcrel32 @_ZSt5equalIPKlS1_EbT_S2_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr8 = COPY $al
    %25:gr8 = COPY %18
  
  bb.2.BB_507:
    %2:gr8 = COPY %25
    INLINEASM &"# LLVM BB: BB_507", 1 /* sideeffect attdialect */
    %23:gr8 = AND8ri %2, 1, implicit-def $eflags
    %24:gr32 = MOVZX32rr8 %23
    $eax = COPY %24
    RET64 implicit $eax

...
---
name:            _ZNKSt6vectorIlSaIlEE4dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_508:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_508", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %6:gr64 = MOV64rm %7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $rsi = COPY %6
    CALL64pcrel32 @_ZNKSt6vectorIlSaIlEE11_M_data_ptrIlEEPT_S4_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNKSt6vectorIlSaIlEE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_509:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_509", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %12:gr64 = MOV64rm %13, 1, $noreg, 8, $noreg :: (load (s64) from %ir.6)
    %11:gr64 = MOV64rm %13, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %7:gr64 = SUB64rr %12, %11, implicit-def $eflags
    %4:gr64 = SAR64ri %7, 3, implicit-def $eflags
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt6vectorIlSaIlEE11_M_data_ptrIlEEPT_S4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_510:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_510", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZSt5equalIPKlS1_EbT_S2_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_511:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_511", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZSt11__equal_auxIPKlS1_EbT_S2_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr8 = COPY $al
    %7:gr8 = AND8ri %12, 1, implicit-def $eflags
    %8:gr32 = MOVZX32rr8 %7
    $eax = COPY %8
    RET64 implicit $eax

...
---
name:            _ZSt11__equal_auxIPKlS1_EbT_S2_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_512:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_512", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %21:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    CALL64pcrel32 @_ZSt12__niter_baseIPKlET_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = COPY $rax
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 @_ZSt12__niter_baseIPKlET_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %15:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 @_ZSt12__niter_baseIPKlET_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %17
    $rdx = COPY %14
    CALL64pcrel32 @_ZSt12__equal_aux1IPKlS1_EbT_S2_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr8 = COPY $al
    %7:gr8 = AND8ri %12, 1, implicit-def $eflags
    %8:gr32 = MOVZX32rr8 %7
    $eax = COPY %8
    RET64 implicit $eax

...
---
name:            _ZSt12__equal_aux1IPKlS1_EbT_S2_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr8, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_513:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_513", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    MOV8mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.6)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZNSt7__equalILb1EE5equalIlEEbPKT_S4_S4_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr8 = COPY $al
    %7:gr8 = AND8ri %12, 1, implicit-def $eflags
    %8:gr32 = MOVZX32rr8 %7
    $eax = COPY %8
    RET64 implicit $eax

...
---
name:            _ZSt12__niter_baseIPKlET_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_514:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_514", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNSt7__equalILb1EE5equalIlEEbPKT_S4_S4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr8, preferred-register: '' }
  - { id: 18, class: gr8, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr32, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_515:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_515", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    %16:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %12:gr64 = SUB64rr %16, %15, implicit-def $eflags
    %9:gr64 = SAR64ri %12, 3, implicit-def $eflags
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.7)
    CMP64mi32 %stack.4, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.7)
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_516:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_516", 1 /* sideeffect attdialect */
    %29:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %28:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %27:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %29
    $rsi = COPY %28
    $rdx = COPY %27
    CALL64pcrel32 @_ZSt8__memcmpIllEiPKT_PKT0_m, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %26:gr32 = COPY $eax
    CMP32ri %26, 0, implicit-def $eflags
    %21:gr8 = SETCCr 5, implicit $eflags
    %20:gr8 = XOR8ri %21, -1, implicit-def $eflags
    %18:gr8 = AND8ri %20, 1, implicit-def $eflags
    MOV8mr %stack.0, 1, $noreg, 0, $noreg, %18 :: (store (s8) into %ir.3)
    JMP_1 %bb.3
  
  bb.2.BB_517:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_517", 1 /* sideeffect attdialect */
    MOV8mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.3)
  
  bb.3.BB_518:
    INLINEASM &"# LLVM BB: BB_518", 1 /* sideeffect attdialect */
    %33:gr8 = MOV8rm %stack.0, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %31:gr8 = AND8ri %33, 1, implicit-def $eflags
    %32:gr32 = MOVZX32rr8 %31
    $eax = COPY %32
    RET64 implicit $eax

...
---
name:            _ZSt8__memcmpIllEiPKT_PKT0_m
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_519:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_519", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %17:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %12:gr64 = SHL64ri %13, 3, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %15
    $rdx = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @memcmp, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %10:gr32 = COPY $eax
    %6:gr32 = COPY %10
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr32, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr64, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr64, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr64, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr64, preferred-register: '' }
  - { id: 90, class: gr64, preferred-register: '' }
  - { id: 91, class: gr64, preferred-register: '' }
  - { id: 92, class: gr8, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr64, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr32, preferred-register: '' }
  - { id: 101, class: gr64, preferred-register: '' }
  - { id: 102, class: gr32, preferred-register: '' }
  - { id: 103, class: gr64, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr64, preferred-register: '' }
  - { id: 106, class: gr64, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: gr64, preferred-register: '' }
  - { id: 109, class: gr64, preferred-register: '' }
  - { id: 110, class: gr64, preferred-register: '' }
  - { id: 111, class: gr64, preferred-register: '' }
  - { id: 112, class: gr32, preferred-register: '' }
  - { id: 113, class: gr64, preferred-register: '' }
  - { id: 114, class: gr32, preferred-register: '' }
  - { id: 115, class: gr64, preferred-register: '' }
  - { id: 116, class: gr64, preferred-register: '' }
  - { id: 117, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_520:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_520", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.14)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %2 :: (store (s64) into %ir.15)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %4
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %6
    CALL64pcrel32 @_ZNSaIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %5
    $rdx = COPY %6
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEC2EmRKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_521:
    successors: %bb.4(0x40000000), %bb.15(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_521", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %15
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %16
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = COPY %17
    %18:gr64 = SUB64ri32 %17, 3, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.15
  
  bb.15.BB_521:
    successors: %bb.3(0x40000000), %bb.5(0x40000000)
  
    %19:gr64 = SUB64ri32 %14, 4, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.2.BB_522 (landing-pad):
    successors: %bb.14(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %8:gr64 = COPY killed $rdx
    %7:gr64 = COPY killed $rax
    %12:gr32 = COPY %8.sub_32bit
    %11:gr64 = COPY %7
    INLINEASM &"# LLVM BB: BB_522", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.8)
    %9:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.14
  
  bb.3.BB_523:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_523", 1 /* sideeffect attdialect */
    %90:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %90
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %91:gr64 = COPY $rax
    MOV64mi32 %91, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.21)
    %86:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %87:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %86
    $rsi = COPY %87
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %88:gr64 = COPY $rax
    %85:gr64 = MOV64rm %88, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    %82:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %82
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %83:gr64 = COPY $rax
    MOV64mr %83, 1, $noreg, 0, $noreg, %85 :: (store (s64) into %ir.24)
    %78:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %78
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %79:gr64 = COPY $rax
    %77:gr64 = MOV64rm %79, 1, $noreg, 0, $noreg :: (load (s64) from %ir.25)
    %73:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %74:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %73
    $rsi = COPY %74
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %75:gr64 = COPY $rax
    %71:gr64 = IMUL64rm %77, %75, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.27)
    %67:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %67
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %68:gr64 = COPY $rax
    MOV64mr %68, 1, $noreg, 0, $noreg, %71 :: (store (s64) into %ir.30)
    %63:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %63
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %64:gr64 = COPY $rax
    %62:gr64 = MOV64rm %64, 1, $noreg, 0, $noreg :: (load (s64) from %ir.31)
    %58:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %59:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %58
    $rsi = COPY %59
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %60:gr64 = COPY $rax
    %56:gr64 = IMUL64rm %62, %60, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.33)
    %51:gr32 = MOV32r0 implicit-def $eflags
    %52:gr64 = SUBREG_TO_REG 0, %51, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %52
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %53:gr64 = COPY $rax
    MOV64mr %53, 1, $noreg, 0, $noreg, %56 :: (store (s64) into %ir.36)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    MOV32mi %stack.6, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
    JMP_1 %bb.10
  
  bb.4.BB_524:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_524", 1 /* sideeffect attdialect */
    %46:gr32 = MOV32r0 implicit-def $eflags
    %47:gr64 = SUBREG_TO_REG 0, %46, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %47
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %48:gr64 = COPY $rax
    MOV64mi32 %48, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.37)
    %41:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %42:gr32 = MOV32r0 implicit-def $eflags
    %43:gr64 = SUBREG_TO_REG 0, %42, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %41
    $rsi = COPY %43
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %44:gr64 = COPY $rax
    %40:gr64 = MOV64rm %44, 1, $noreg, 0, $noreg :: (load (s64) from %ir.38)
    %37:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %37
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %38:gr64 = COPY $rax
    MOV64mr %38, 1, $noreg, 0, $noreg, %40 :: (store (s64) into %ir.40)
    %33:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %33
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %34:gr64 = COPY $rax
    %32:gr64 = MOV64rm %34, 1, $noreg, 0, $noreg :: (load (s64) from %ir.41)
    %28:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %29:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    $rsi = COPY %29
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %30:gr64 = COPY $rax
    %26:gr64 = IMUL64rm %32, %30, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.43)
    %22:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %22
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    MOV64mr %23, 1, $noreg, 0, $noreg, %26 :: (store (s64) into %ir.46)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    MOV32mi %stack.6, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
    JMP_1 %bb.10
  
  bb.5.BB_525:
    successors: %bb.6(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_525", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %93:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %93
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %94:gr64 = COPY $rax
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %94 :: (store (s64) into %ir.11)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %95:gr64 = MOV32ri64 @.str.70
    %96:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    %97:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rdi = COPY %96
    $rsi = COPY %95
    $rdx = COPY %97
    CALL64pcrel32 @_ZN3c103strIJA37_cmEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.6
  
  bb.6.BB_526:
    successors: %bb.7(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_526", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %104:gr64 = MOV32ri64 @__func__._ZN3c1028get_channels_last_strides_2dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE
    %105:gr64 = MOV32ri64 @.str.68
    %106:gr64 = MOV32ri64 @.str.69
    %107:gr32 = MOV32ri 81
    %108:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rdi = COPY %104
    $rsi = COPY %105
    $edx = COPY %107
    $rcx = COPY %106
    $r8 = COPY %108
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.7
  
  bb.7.BB_527:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_527", 1 /* sideeffect attdialect */
  
  bb.8.BB_528 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %99:gr64 = COPY killed $rdx
    %98:gr64 = COPY killed $rax
    %102:gr32 = COPY %99.sub_32bit
    %101:gr64 = COPY %98
    INLINEASM &"# LLVM BB: BB_528", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %101 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %102 :: (store (s32) into %ir.8)
    JMP_1 %bb.13
  
  bb.9.BB_529 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %110:gr64 = COPY killed $rdx
    %109:gr64 = COPY killed $rax
    %114:gr32 = COPY %110.sub_32bit
    %113:gr64 = COPY %109
    INLINEASM &"# LLVM BB: BB_529", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %113 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %114 :: (store (s32) into %ir.8)
    %111:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %111
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.13
  
  bb.10.BB_530:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_530", 1 /* sideeffect attdialect */
    TEST8mi %stack.2, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.5)
    JCC_1 %bb.12, 5, implicit $eflags
  
  bb.11.BB_531:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_531", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.12.BB_532:
    INLINEASM &"# LLVM BB: BB_532", 1 /* sideeffect attdialect */
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.13.BB_533:
    successors: %bb.14(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_533", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.14.BB_534:
    INLINEASM &"# LLVM BB: BB_534", 1 /* sideeffect attdialect */
    %117:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %117
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNSaIlEC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_535:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_535", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZNSt15__new_allocatorIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt6vectorIlSaIlEEC2EmRKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%3' }
  - { reg: '$rdx', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_536:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %5:gr64 = COPY $rdx
    %3:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_536", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $rsi = COPY %8
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEE17_S_check_init_lenEmRKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %9
    $rdx = COPY %10
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEEC2EmRKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %11
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEE21_M_default_initializeEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_537:
    INLINEASM &"# LLVM BB: BB_537", 1 /* sideeffect attdialect */
    RET64
  
  bb.2.BB_538 (landing-pad):
    successors: %bb.3(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %13:gr64 = COPY killed $rdx
    %12:gr64 = COPY killed $rax
    %17:gr32 = COPY %13.sub_32bit
    %16:gr64 = COPY %12
    INLINEASM &"# LLVM BB: BB_538", 1 /* sideeffect attdialect */
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.6)
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %17 :: (store (s32) into %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_539:
    INLINEASM &"# LLVM BB: BB_539", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNSaIlED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_540:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_540", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZNSt15__new_allocatorIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt6vectorIlSaIlEEixEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_541:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_541", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %12, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr64 = SHL64ri %9, 3, implicit-def $eflags
    %8:gr64 = ADD64rr %11, %7, implicit-def $eflags
    $rax = COPY %8
    RET64 implicit $rax

...
---
name:            _ZN3c103strIJA37_cmEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_542:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_542", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.6)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKmEE4callB5cxx11ERKS3_S5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNSt15__new_allocatorIlEC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_543:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_543", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    RET64

...
---
name:            _ZNSt6vectorIlSaIlEE17_S_check_init_lenEmRKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_544:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_544", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %9:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %11
    CALL64pcrel32 @_ZNSaIlEC2ERKS_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEE11_S_max_sizeERKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %6:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CMP64rr %12, %8, implicit-def $eflags
    JCC_1 %bb.2, 6, implicit $eflags
  
  bb.1.BB_545:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_545", 1 /* sideeffect attdialect */
    %15:gr64 = MOV64ri @.str.71
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 target-flags(x86-plt) @_ZSt20__throw_length_errorPKc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.2.BB_546:
    INLINEASM &"# LLVM BB: BB_546", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %14
    RET64 implicit $rax

...
---
name:            _ZNSt12_Vector_baseIlSaIlEEC2EmRKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%3' }
  - { reg: '$rdx', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_547:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %5:gr64 = COPY $rdx
    %3:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_547", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.3)
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %7
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %8
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE17_M_create_storageEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_548:
    INLINEASM &"# LLVM BB: BB_548", 1 /* sideeffect attdialect */
    RET64
  
  bb.2.BB_549 (landing-pad):
    successors: %bb.3(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %10:gr64 = COPY killed $rdx
    %9:gr64 = COPY killed $rax
    %13:gr32 = COPY %10.sub_32bit
    %12:gr64 = COPY %9
    INLINEASM &"# LLVM BB: BB_549", 1 /* sideeffect attdialect */
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.6)
    MOV32mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s32) into %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_550:
    INLINEASM &"# LLVM BB: BB_550", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNSt6vectorIlSaIlEE21_M_default_initializeEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_551:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_551", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr64 = MOV64rm %14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %12
    $rdx = COPY %11
    CALL64pcrel32 @_ZSt27__uninitialized_default_n_aIPlmlET_S1_T0_RSaIT1_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    MOV64mr %14, 1, $noreg, 8, $noreg, %9 :: (store (s64) into %ir.17)
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_552:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_552", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %0:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.1)
    %3:gr64 = MOV64rm %0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.15)
    %4:gr64 = MOV64rm %0, 1, $noreg, 16, $noreg :: (load (s64) from %ir.11)
    %5:gr64 = SUB64rr %4, %3, implicit-def dead $eflags
    %6:gr64 = exact SAR64ri %5, 3, implicit-def dead $eflags
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %3
    $rdx = COPY %6
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_553:
    INLINEASM &"# LLVM BB: BB_553", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64
  
  bb.2.BB_554 (landing-pad):
    successors: %bb.3(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %8:gr64 = COPY killed $rdx
    %7:gr64 = COPY killed $rax
    %12:gr32 = COPY %8.sub_32bit
    %11:gr64 = COPY %7
    INLINEASM &"# LLVM BB: BB_554", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.2)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_555:
    INLINEASM &"# LLVM BB: BB_555", 1 /* sideeffect attdialect */
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNSt6vectorIlSaIlEE11_S_max_sizeERKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_556:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_556", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.1)
    %10:gr64 = MOV64ri 1152921504606846975
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.2)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.3)
    %3:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %4:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    $rsi = COPY %4
    CALL64pcrel32 @_ZSt3minImERKT_S2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
  
  bb.1.BB_557:
    INLINEASM &"# LLVM BB: BB_557", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZNSaIlEC2ERKS_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_558:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_558", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %7
    CALL64pcrel32 @_ZNSt15__new_allocatorIlEC2ERKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt16allocator_traitsISaIlEE8max_sizeERKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_559:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_559", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %6:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64pcrel32 @_ZNKSt15__new_allocatorIlE8max_sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZSt3minImERKT_S2_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_560:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_560", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %9:gr64 = MOV64rm %10, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    CMP64rm %9, %7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.7)
    JCC_1 %bb.2, 3, implicit $eflags
  
  bb.1.BB_561:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_561", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.2)
    JMP_1 %bb.3
  
  bb.2.BB_562:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_562", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.2)
  
  bb.3.BB_563:
    INLINEASM &"# LLVM BB: BB_563", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %16
    RET64 implicit $rax

...
---
name:            _ZNKSt15__new_allocatorIlE8max_sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_564:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_564", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNKSt15__new_allocatorIlE11_M_max_sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt15__new_allocatorIlE11_M_max_sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_565:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_565", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %2:gr64 = MOV64ri 1152921504606846975
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            _ZNSt15__new_allocatorIlEC2ERKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_566:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_566", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE12_Vector_implC2ERKS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_567:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_567", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %8
    CALL64pcrel32 @_ZNSaIlEC2ERKS_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE17_Vector_impl_dataC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE17_M_create_storageEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_568:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_568", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %18:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %17:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    $rsi = COPY %17
    CALL64pcrel32 @_ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    MOV64mr %18, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.9)
    %13:gr64 = MOV64rm %18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    MOV64mr %18, 1, $noreg, 8, $noreg, %13 :: (store (s64) into %ir.16)
    %11:gr64 = MOV64rm %18, 1, $noreg, 0, $noreg :: (load (s64) from %ir.19)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %8:gr64 = SHL64ri %10, 3, implicit-def $eflags
    %9:gr64 = ADD64rr %11, %8, implicit-def $eflags
    MOV64mr %18, 1, $noreg, 16, $noreg, %9 :: (store (s64) into %ir.25)
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE12_Vector_implD2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_569:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_569", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %4:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE17_Vector_impl_dataC2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_570:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_570", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    MOV64mi32 %3, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.3)
    MOV64mi32 %3, 1, $noreg, 8, $noreg, 0 :: (store (s64) into %ir.4)
    MOV64mi32 %3, 1, $noreg, 16, $noreg, 0 :: (store (s64) into %ir.5)
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE11_M_allocateEm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%3' }
  - { reg: '$rsi', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_571:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %5:gr64 = COPY $rsi
    %3:gr64 = COPY $rdi
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_571", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.3)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    CMP64mi32 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.3)
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_572:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_572", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %14
    CALL64pcrel32 @_ZNSt16allocator_traitsISaIlEE8allocateERS0_m, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %16:gr64 = COPY %13
    JMP_1 %bb.3
  
  bb.2.BB_573:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_573", 1 /* sideeffect attdialect */
    %9:gr32 = MOV32r0 implicit-def $eflags
    %10:gr64 = SUBREG_TO_REG 0, %9, %subreg.sub_32bit
    %16:gr64 = COPY %10
  
  bb.3.BB_574:
    %2:gr64 = COPY %16
    INLINEASM &"# LLVM BB: BB_574", 1 /* sideeffect attdialect */
    $rax = COPY %2
    RET64 implicit $rax

...
---
name:            _ZNSt16allocator_traitsISaIlEE8allocateERS0_m
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_575:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_575", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %7:gr32 = MOV32r0 implicit-def $eflags
    %8:gr64 = SUBREG_TO_REG 0, %7, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %10
    $rdx = COPY %8
    CALL64pcrel32 @_ZNSt15__new_allocatorIlE8allocateEmPKv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZNSt15__new_allocatorIlE8allocateEmPKv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_576:
    successors: %bb.4(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_576", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZNKSt15__new_allocatorIlE11_M_max_sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    CMP64rr %10, %9, implicit-def $eflags
    JCC_1 %bb.4, 6, implicit $eflags
  
  bb.1.BB_577:
    successors: %bb.3(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_577", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64ri 2305843009213693951
    CMP64mr %stack.1, 1, $noreg, 0, $noreg, %20, implicit-def $eflags :: (load (s64) from %ir.4)
    JCC_1 %bb.3, 6, implicit $eflags
  
  bb.2.BB_578:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_578", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @_ZSt28__throw_bad_array_new_lengthv, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.3.BB_579:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_579", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @_ZSt17__throw_bad_allocv, csr_64, implicit $rsp, implicit $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_580:
    INLINEASM &"# LLVM BB: BB_580", 1 /* sideeffect attdialect */
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %17:gr64 = SHL64ri %18, 3, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_Znwm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    $rax = COPY %15
    RET64 implicit $rax

...
---
name:            _ZNSt15__new_allocatorIlED2Ev
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_581:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_581", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    RET64

...
---
name:            _ZSt27__uninitialized_default_n_aIPlmlET_S1_T0_RSaIT1_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_582:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_582", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %10
    CALL64pcrel32 @_ZSt25__uninitialized_default_nIPlmET_S1_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE19_M_get_Tp_allocatorEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_583:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_583", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZSt25__uninitialized_default_nIPlmET_S1_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_584:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_584", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.4)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %8
    CALL64pcrel32 @_ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPlmEET_S3_T0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZNSt27__uninitialized_default_n_1ILb1EE18__uninit_default_nIPlmEET_S3_T0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_585:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_585", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    CMP64mi32 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.3)
    JCC_1 %bb.2, 6, implicit $eflags
  
  bb.1.BB_586:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_586", 1 /* sideeffect attdialect */
    %24:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %24
    CALL64pcrel32 @_ZSt11__addressofIlEPT_RS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.4)
    %20:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 @_ZSt10_ConstructIlJEEvPT_DpOT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %17:gr64 = ADD64ri32 %18, 8, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %17 :: (store (s64) into %ir.2)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %12:gr64 = SUB64ri32 %13, 1, implicit-def $eflags
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    $rsi = COPY %12
    $rdx = COPY %10
    CALL64pcrel32 @_ZSt6fill_nIPlmlET_S1_T0_RKT1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.2)
  
  bb.2.BB_587:
    INLINEASM &"# LLVM BB: BB_587", 1 /* sideeffect attdialect */
    %26:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %26
    RET64 implicit $rax

...
---
name:            _ZSt11__addressofIlEPT_RS0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_588:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_588", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZSt10_ConstructIlJEEvPT_DpOT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_589:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_589", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    MOV64mi32 %3, 1, $noreg, 0, $noreg, 0 :: (store (s64) into %ir.4)
    RET64

...
---
name:            _ZSt6fill_nIPlmlET_S1_T0_RKT1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_590:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_590", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 @_ZSt17__size_to_integerm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    $rsi = COPY %14
    $rdx = COPY %12
    CALL64pcrel32 @_ZSt10__fill_n_aIPlmlET_S1_T0_RKT1_St26random_access_iterator_tag, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    $rax = COPY %10
    RET64 implicit $rax

...
---
name:            _ZSt10__fill_n_aIPlmlET_S1_T0_RKT1_St26random_access_iterator_tag
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_591:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_591", 1 /* sideeffect attdialect */
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.7)
    CMP64mi32 %stack.3, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.6)
    JCC_1 %bb.2, 7, implicit $eflags
  
  bb.1.BB_592:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_592", 1 /* sideeffect attdialect */
    %26:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %26 :: (store (s64) into %ir.3)
    JMP_1 %bb.3
  
  bb.2.BB_593:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_593", 1 /* sideeffect attdialect */
    %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %23:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %22:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %20:gr64 = SHL64ri %22, 3, implicit-def $eflags
    %21:gr64 = ADD64rr %23, %20, implicit-def $eflags
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %24
    $rsi = COPY %21
    $rdx = COPY %17
    CALL64pcrel32 @_ZSt8__fill_aIPllEvT_S1_RKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %12:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %10:gr64 = SHL64ri %12, 3, implicit-def $eflags
    %11:gr64 = ADD64rr %13, %10, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.3)
  
  bb.3.BB_594:
    INLINEASM &"# LLVM BB: BB_594", 1 /* sideeffect attdialect */
    %28:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %28
    RET64 implicit $rax

...
---
name:            _ZSt17__size_to_integerm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_595:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_595", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZSt19__iterator_categoryIPlENSt15iterator_traitsIT_E17iterator_categoryERKS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_596:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_596", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    RET64

...
---
name:            _ZSt8__fill_aIPllEvT_S1_RKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_597:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_597", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    $rsi = COPY %10
    $rdx = COPY %9
    CALL64pcrel32 @_ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZSt9__fill_a1IPllEN9__gnu_cxx11__enable_ifIXsr11__is_scalarIT0_EE7__valueEvE6__typeET_S6_RKS3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_598:
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_598", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %8:gr64 = MOV64rm %9, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %8 :: (store (s64) into %ir.6)
  
  bb.1.BB_599:
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_599", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    CMP64rm %12, %stack.1, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.4)
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.2.BB_600:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_600", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %15, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.13)
  
  bb.3.BB_601:
    successors: %bb.1(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_601", 1 /* sideeffect attdialect */
    %20:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %19:gr64 = ADD64ri32 %20, 8, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %19 :: (store (s64) into %ir.3)
    JMP_1 %bb.1
  
  bb.4.BB_602:
    INLINEASM &"# LLVM BB: BB_602", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZNSt12_Vector_baseIlSaIlEE13_M_deallocateEPlm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
  - { reg: '$rsi', virtual-reg: '%3' }
  - { reg: '$rdx', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_603:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %5:gr64 = COPY $rdx
    %3:gr64 = COPY $rsi
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    %4:gr64 = COPY killed %3
    %6:gr64 = COPY killed %5
    INLINEASM &"# LLVM BB: BB_603", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    %8:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    CMP64mi32 %stack.1, 1, $noreg, 0, $noreg, 0, implicit-def $eflags :: (load (s64) from %ir.4)
    JCC_1 %bb.2, 4, implicit $eflags
  
  bb.1.BB_604:
    successors: %bb.2(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_604", 1 /* sideeffect attdialect */
    %13:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    $rsi = COPY %13
    $rdx = COPY %12
    CALL64pcrel32 @_ZNSt16allocator_traitsISaIlEE10deallocateERS0_Plm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.2.BB_605:
    INLINEASM &"# LLVM BB: BB_605", 1 /* sideeffect attdialect */
    RET64

...
---
name:            _ZNSt16allocator_traitsISaIlEE10deallocateERS0_Plm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_606:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_606", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %10
    $rdx = COPY %9
    CALL64pcrel32 @_ZNSt15__new_allocatorIlE10deallocateEPlm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt15__new_allocatorIlE10deallocateEPlm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_607:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_607", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZdlPv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKmEE4callB5cxx11ERKS3_S5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_608:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_608", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.4)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.5)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    $rsi = COPY %5
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJmEEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_609:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_609", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_610:
    INLINEASM &"# LLVM BB: BB_610", 1 /* sideeffect attdialect */
    %18:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.3.BB_611 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %10:gr64 = COPY killed $rdx
    %9:gr64 = COPY killed $rax
    %14:gr32 = COPY %10.sub_32bit
    %13:gr64 = COPY %9
    INLINEASM &"# LLVM BB: BB_611", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %14 :: (store (s32) into %ir.8)
    %11:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_612:
    INLINEASM &"# LLVM BB: BB_612", 1 /* sideeffect attdialect */
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJmEEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_613:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_613", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strImEERSoS2_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strImEERSoS2_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_614:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_614", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %10
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl7stridesEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_615:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_615", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %4:gr32 = MOV32ri 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $esi = COPY %4
    CALL64pcrel32 @_ZNK3c1010TensorImpl14matches_policyENS0_18SizesStridesPolicyE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %5:gr8 = COPY $al
    TEST8ri %5, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_616:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_616", 1 /* sideeffect attdialect */
    %23:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    CALL64m %23, 1, $noreg, 72, $noreg, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx :: (load (s64) from %ir.7)
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %20:gr64 = COPY $rax
    %21:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %20 :: (store (s64) into %ir.11)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %21 :: (store (s64) into %ir.13)
    JMP_1 %bb.3
  
  bb.2.BB_617:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_617", 1 /* sideeffect attdialect */
    %14:gr64 = ADD64ri32 %6, 72, implicit-def $eflags
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides16strides_arrayrefEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    %13:gr64 = COPY $rdx
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.18)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %13 :: (store (s64) into %ir.20)
  
  bb.3.BB_618:
    INLINEASM &"# LLVM BB: BB_618", 1 /* sideeffect attdialect */
    %24:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.22)
    %25:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.22 + 8)
    $rax = COPY %24
    $rdx = COPY %25
    RET 0, $rax, $rdx

...
---
name:            _ZNK3c104impl15SizesAndStrides16strides_arrayrefEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_619:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_619", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %2:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides12strides_dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %3:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %5
    $rsi = COPY %3
    $rdx = COPY %4
    CALL64pcrel32 @_ZN3c108ArrayRefIlEC2EPKlm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_620:
    INLINEASM &"# LLVM BB: BB_620", 1 /* sideeffect attdialect */
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.6 + 8)
    $rax = COPY %11
    $rdx = COPY %12
    RET 0, $rax, $rdx
  
  bb.2.BB_621 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %7:gr64 = COPY killed $rdx
    %6:gr64 = COPY killed $rax
    %10:gr32 = COPY %7.sub_32bit
    %9:gr64 = COPY %6
    INLINEASM &"# LLVM BB: BB_621", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZNK3c104impl15SizesAndStrides12strides_dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr8, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_622:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_622", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %5:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides8isInlineEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %4:gr8 = COPY $al
    TEST8ri %4, 1, implicit-def $eflags
    JCC_1 %bb.1, 5, implicit $eflags
    JMP_1 %bb.2
  
  bb.1.BB_623:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_623", 1 /* sideeffect attdialect */
    %17:gr64 = ADD64ri32 %5, 8, implicit-def $eflags
    %15:gr64 = ADD64ri32 %17, 40, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.1)
    JMP_1 %bb.3
  
  bb.2.BB_624:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_624", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %5
    CALL64pcrel32 @_ZNK3c104impl15SizesAndStrides4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    %9:gr64 = SHL64ri %11, 3, implicit-def $eflags
    %10:gr64 = ADD64rr %12, %9, implicit-def $eflags
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.1)
  
  bb.3.BB_625:
    INLINEASM &"# LLVM BB: BB_625", 1 /* sideeffect attdialect */
    %19:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %19
    RET64 implicit $rax

...
---
name:            _ZSt8_DestroyIPllEvT_S1_RSaIT0_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_626:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_626", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    $rsi = COPY %8
    CALL64pcrel32 @_ZSt8_DestroyIPlEvT_S1_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZSt8_DestroyIPlEvT_S1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_627:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_627", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %7
    $rsi = COPY %6
    CALL64pcrel32 @_ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZNSt12_Destroy_auxILb1EE9__destroyIPlEEvT_S3_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_628:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_628", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    RET64

...
---
name:            _ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr64, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr32, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr64, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr64, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr64, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr64, preferred-register: '' }
  - { id: 90, class: gr64, preferred-register: '' }
  - { id: 91, class: gr64, preferred-register: '' }
  - { id: 92, class: gr64, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr64, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr64, preferred-register: '' }
  - { id: 101, class: gr64, preferred-register: '' }
  - { id: 102, class: gr64, preferred-register: '' }
  - { id: 103, class: gr64, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr64, preferred-register: '' }
  - { id: 106, class: gr64, preferred-register: '' }
  - { id: 107, class: gr64, preferred-register: '' }
  - { id: 108, class: gr64, preferred-register: '' }
  - { id: 109, class: gr64, preferred-register: '' }
  - { id: 110, class: gr64, preferred-register: '' }
  - { id: 111, class: gr64, preferred-register: '' }
  - { id: 112, class: gr64, preferred-register: '' }
  - { id: 113, class: gr64, preferred-register: '' }
  - { id: 114, class: gr64, preferred-register: '' }
  - { id: 115, class: gr64, preferred-register: '' }
  - { id: 116, class: gr64, preferred-register: '' }
  - { id: 117, class: gr64, preferred-register: '' }
  - { id: 118, class: gr64, preferred-register: '' }
  - { id: 119, class: gr64, preferred-register: '' }
  - { id: 120, class: gr64, preferred-register: '' }
  - { id: 121, class: gr64, preferred-register: '' }
  - { id: 122, class: gr8, preferred-register: '' }
  - { id: 123, class: gr64, preferred-register: '' }
  - { id: 124, class: gr64, preferred-register: '' }
  - { id: 125, class: gr64, preferred-register: '' }
  - { id: 126, class: gr64, preferred-register: '' }
  - { id: 127, class: gr64, preferred-register: '' }
  - { id: 128, class: gr64, preferred-register: '' }
  - { id: 129, class: gr64, preferred-register: '' }
  - { id: 130, class: gr32, preferred-register: '' }
  - { id: 131, class: gr64, preferred-register: '' }
  - { id: 132, class: gr32, preferred-register: '' }
  - { id: 133, class: gr64, preferred-register: '' }
  - { id: 134, class: gr64, preferred-register: '' }
  - { id: 135, class: gr64, preferred-register: '' }
  - { id: 136, class: gr64, preferred-register: '' }
  - { id: 137, class: gr32, preferred-register: '' }
  - { id: 138, class: gr64, preferred-register: '' }
  - { id: 139, class: gr64, preferred-register: '' }
  - { id: 140, class: gr64, preferred-register: '' }
  - { id: 141, class: gr64, preferred-register: '' }
  - { id: 142, class: gr32, preferred-register: '' }
  - { id: 143, class: gr64, preferred-register: '' }
  - { id: 144, class: gr32, preferred-register: '' }
  - { id: 145, class: gr64, preferred-register: '' }
  - { id: 146, class: gr64, preferred-register: '' }
  - { id: 147, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 32, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_629:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_629", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.14)
    MOV64mr %stack.1, 1, $noreg, 8, $noreg, %2 :: (store (s64) into %ir.15)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store (s8) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %4
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %6
    CALL64pcrel32 @_ZNSaIlEC2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %5
    $rdx = COPY %6
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEC2EmRKS0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_630:
    successors: %bb.4(0x40000000), %bb.15(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_630", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    $rdi = COPY %15
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %16
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = COPY %17
    %18:gr64 = SUB64ri32 %17, 4, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.15
  
  bb.15.BB_630:
    successors: %bb.3(0x40000000), %bb.5(0x40000000)
  
    %19:gr64 = SUB64ri32 %14, 5, implicit-def $eflags
    JCC_1 %bb.3, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.2.BB_631 (landing-pad):
    successors: %bb.14(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %8:gr64 = COPY killed $rdx
    %7:gr64 = COPY killed $rax
    %12:gr32 = COPY %8.sub_32bit
    %11:gr64 = COPY %7
    INLINEASM &"# LLVM BB: BB_631", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.8)
    %9:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 @_ZNSaIlED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.14
  
  bb.3.BB_632:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_632", 1 /* sideeffect attdialect */
    %120:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %120
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %121:gr64 = COPY $rax
    MOV64mi32 %121, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.21)
    %116:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %117:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %116
    $rsi = COPY %117
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %118:gr64 = COPY $rax
    %115:gr64 = MOV64rm %118, 1, $noreg, 0, $noreg :: (load (s64) from %ir.22)
    %112:gr64 = MOV32ri64 4
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %112
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %113:gr64 = COPY $rax
    MOV64mr %113, 1, $noreg, 0, $noreg, %115 :: (store (s64) into %ir.24)
    %108:gr64 = MOV32ri64 4
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %108
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %109:gr64 = COPY $rax
    %107:gr64 = MOV64rm %109, 1, $noreg, 0, $noreg :: (load (s64) from %ir.25)
    %103:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %104:gr64 = MOV32ri64 4
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %103
    $rsi = COPY %104
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %105:gr64 = COPY $rax
    %101:gr64 = IMUL64rm %107, %105, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.27)
    %97:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %97
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %98:gr64 = COPY $rax
    MOV64mr %98, 1, $noreg, 0, $noreg, %101 :: (store (s64) into %ir.30)
    %93:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %93
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %94:gr64 = COPY $rax
    %92:gr64 = MOV64rm %94, 1, $noreg, 0, $noreg :: (load (s64) from %ir.31)
    %88:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %89:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %88
    $rsi = COPY %89
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %90:gr64 = COPY $rax
    %86:gr64 = IMUL64rm %92, %90, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.33)
    %82:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %82
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %83:gr64 = COPY $rax
    MOV64mr %83, 1, $noreg, 0, $noreg, %86 :: (store (s64) into %ir.36)
    %78:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %78
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %79:gr64 = COPY $rax
    %77:gr64 = MOV64rm %79, 1, $noreg, 0, $noreg :: (load (s64) from %ir.37)
    %73:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %74:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %73
    $rsi = COPY %74
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %75:gr64 = COPY $rax
    %71:gr64 = IMUL64rm %77, %75, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.39)
    %66:gr32 = MOV32r0 implicit-def $eflags
    %67:gr64 = SUBREG_TO_REG 0, %66, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %67
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %68:gr64 = COPY $rax
    MOV64mr %68, 1, $noreg, 0, $noreg, %71 :: (store (s64) into %ir.42)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    MOV32mi %stack.6, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
    JMP_1 %bb.10
  
  bb.4.BB_633:
    successors: %bb.10(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_633", 1 /* sideeffect attdialect */
    %61:gr32 = MOV32r0 implicit-def $eflags
    %62:gr64 = SUBREG_TO_REG 0, %61, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %62
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %63:gr64 = COPY $rax
    MOV64mi32 %63, 1, $noreg, 0, $noreg, 1 :: (store (s64) into %ir.43)
    %56:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %57:gr32 = MOV32r0 implicit-def $eflags
    %58:gr64 = SUBREG_TO_REG 0, %57, %subreg.sub_32bit
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %56
    $rsi = COPY %58
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %59:gr64 = COPY $rax
    %55:gr64 = MOV64rm %59, 1, $noreg, 0, $noreg :: (load (s64) from %ir.44)
    %52:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %52
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %53:gr64 = COPY $rax
    MOV64mr %53, 1, $noreg, 0, $noreg, %55 :: (store (s64) into %ir.46)
    %48:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %48
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %49:gr64 = COPY $rax
    %47:gr64 = MOV64rm %49, 1, $noreg, 0, $noreg :: (load (s64) from %ir.47)
    %43:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %44:gr64 = MOV32ri64 3
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %43
    $rsi = COPY %44
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %45:gr64 = COPY $rax
    %41:gr64 = IMUL64rm %47, %45, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.49)
    %37:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %37
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %38:gr64 = COPY $rax
    MOV64mr %38, 1, $noreg, 0, $noreg, %41 :: (store (s64) into %ir.52)
    %33:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %33
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %34:gr64 = COPY $rax
    %32:gr64 = MOV64rm %34, 1, $noreg, 0, $noreg :: (load (s64) from %ir.53)
    %28:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %29:gr64 = MOV32ri64 2
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %28
    $rsi = COPY %29
    CALL64pcrel32 @_ZNK3c108ArrayRefIlEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %30:gr64 = COPY $rax
    %26:gr64 = IMUL64rm %32, %30, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.55)
    %22:gr64 = MOV32ri64 1
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %22
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEEixEm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    MOV64mr %23, 1, $noreg, 0, $noreg, %26 :: (store (s64) into %ir.58)
    MOV8mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    MOV32mi %stack.6, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.9)
    JMP_1 %bb.10
  
  bb.5.BB_634:
    successors: %bb.6(0x40000000), %bb.8(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_634", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %123:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    $rdi = COPY %123
    CALL64pcrel32 @_ZNK3c108ArrayRefIlE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %124:gr64 = COPY $rax
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %124 :: (store (s64) into %ir.11)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %125:gr64 = MOV32ri64 @.str.73
    %126:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    %127:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    $rdi = COPY %126
    $rsi = COPY %125
    $rdx = COPY %127
    CALL64pcrel32 @_ZN3c103strIJA37_cmEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.6
  
  bb.6.BB_635:
    successors: %bb.7(0x40000000), %bb.9(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_635", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %134:gr64 = MOV32ri64 @__func__._ZN3c1028get_channels_last_strides_3dIlEESt6vectorIT_SaIS2_EENS_8ArrayRefIS2_EE
    %135:gr64 = MOV32ri64 @.str.68
    %136:gr64 = MOV32ri64 @.str.72
    %137:gr32 = MOV32ri 108
    %138:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rdi = COPY %134
    $rsi = COPY %135
    $edx = COPY %137
    $rcx = COPY %136
    $r8 = COPY %138
    CALL64pcrel32 target-flags(x86-plt) @_ZN3c106detail23torchInternalAssertFailEPKcS2_jS2_RKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.7
  
  bb.7.BB_636:
    successors: 
  
    INLINEASM &"# LLVM BB: BB_636", 1 /* sideeffect attdialect */
  
  bb.8.BB_637 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %129:gr64 = COPY killed $rdx
    %128:gr64 = COPY killed $rax
    %132:gr32 = COPY %129.sub_32bit
    %131:gr64 = COPY %128
    INLINEASM &"# LLVM BB: BB_637", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %131 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %132 :: (store (s32) into %ir.8)
    JMP_1 %bb.13
  
  bb.9.BB_638 (landing-pad):
    successors: %bb.13(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %140:gr64 = COPY killed $rdx
    %139:gr64 = COPY killed $rax
    %144:gr32 = COPY %140.sub_32bit
    %143:gr64 = COPY %139
    INLINEASM &"# LLVM BB: BB_638", 1 /* sideeffect attdialect */
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %143 :: (store (s64) into %ir.7)
    MOV32mr %stack.5, 1, $noreg, 0, $noreg, %144 :: (store (s32) into %ir.8)
    %141:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %141
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.13
  
  bb.10.BB_639:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_639", 1 /* sideeffect attdialect */
    TEST8mi %stack.2, 1, $noreg, 0, $noreg, 1, implicit-def $eflags :: (load (s8) from %ir.5)
    JCC_1 %bb.12, 5, implicit $eflags
  
  bb.11.BB_640:
    successors: %bb.12(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_640", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.12.BB_641:
    INLINEASM &"# LLVM BB: BB_641", 1 /* sideeffect attdialect */
    $rax = COPY %3
    RET64 implicit $rax
  
  bb.13.BB_642:
    successors: %bb.14(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_642", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 @_ZNSt6vectorIlSaIlEED2Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.14.BB_643:
    INLINEASM &"# LLVM BB: BB_643", 1 /* sideeffect attdialect */
    %147:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %147
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZSt7forwardIN3c1012MemoryFormatEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_644:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_644", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1045trivially_copyable_optimization_optional_baseINS_12MemoryFormatEEC2EOS1_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_645:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_645", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    MOV8mi %11, 1, $noreg, 0, $noreg, 1 :: (store (s8) into %ir.5)
    %10:gr64 = ADD64ri32 %11, 1, implicit-def $eflags
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @_ZN3c1014constexpr_moveIRNS_12MemoryFormatEEEONSt16remove_referenceIT_E4typeEOS4_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %7
    CALL64pcrel32 @_ZN3c1019constexpr_storage_tINS_12MemoryFormatEEC2IJS1_EEEDpOT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c1014constexpr_moveIRNS_12MemoryFormatEEEONSt16remove_referenceIT_E4typeEOS4_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_646:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_646", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c1019constexpr_storage_tINS_12MemoryFormatEEC2IJS1_EEEDpOT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_647:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_647", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    CALL64pcrel32 @_ZN3c1017constexpr_forwardINS_12MemoryFormatEEEOT_RNSt16remove_referenceIS2_E4typeE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %7:gr8 = MOV8rm %9, 1, $noreg, 0, $noreg :: (load (s8) from %ir.7)
    MOV8mr %11, 1, $noreg, 0, $noreg, %7 :: (store (s8) into %ir.5)
    RET64

...
---
name:            _ZN3c1017constexpr_forwardINS_12MemoryFormatEEEOT_RNSt16remove_referenceIS2_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_648:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_648", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c103strIJA76_cNS_8ArrayRefIlEEEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_649:
    liveins: $rdi, $rsi, $rdx
  
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %3:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_649", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.5)
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.6)
    %6:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %4:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %4
    $rdx = COPY %6
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKNS_8ArrayRefIlEEEE4callB5cxx11ERKS3_S7_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN3c106irangeIilLb1ELb1EEENS_13integer_rangeIT0_Lb0ELb1EEET_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr32, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$edi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_650:
    liveins: $edi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr32 = COPY $edi
    %1:gr32 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_650", 1 /* sideeffect attdialect */
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s32) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %4:gr64 = MOVSX64rm32 %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.3)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %5:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %6:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    $rdi = COPY %5
    $rsi = COPY %6
    CALL64pcrel32 @_ZSt3maxIlERKT_S2_S2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    %8:gr64 = MOV64rm %7, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.10)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    $rdi = COPY %9
    $rsi = COPY %4
    $rdx = COPY %8
    CALL64pcrel32 @_ZN3c1013integer_rangeIlLb0ELb1EEC2Ell, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.12)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.12 + 8)
    $rax = COPY %10
    $rdx = COPY %11
    RET 0, $rax, $rdx

...
---
name:            _ZNK3c1013integer_rangeIlLb0ELb1EE5beginEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_651:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_651", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr64 = MOV64rm %6, 1, $noreg, 0, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c1013integer_rangeIlLb0ELb1EE3endEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_652:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_652", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr64 = MOV64rm %6, 1, $noreg, 8, $noreg
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZNK3c106detail16integer_iteratorIlLb0ELi0EEneERKS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr8, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr8, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_653:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_653", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %12
    CALL64pcrel32 @_ZNK3c106detail16integer_iteratorIlLb0ELi0EEeqERKS2_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $al
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr8 = COPY $al
    %8:gr8 = XOR8ri %11, -1, implicit-def $eflags
    %5:gr8 = AND8ri %8, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZNK3c106detail16integer_iteratorIlLb0ELi0EEdeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_654:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_654", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZN3c106detail17torchCheckMsgImplIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcS3_DpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_655:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    %8:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    %7:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.1)
    INLINEASM &"# LLVM BB: BB_655", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.8)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.9)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.10)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.11)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.12)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.13)
    %20:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %19:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %18:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %17:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    %16:gr64 = MOV64rm %fixed-stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14)
    %15:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 8, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %20
    $rdx = COPY %19
    $rcx = COPY %18
    $r8 = COPY %17
    $r9 = COPY %16
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %15 :: (store (s64) into stack)
    CALL64pcrel32 @_ZN3c103strIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcDpRKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 8, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c106detail16integer_iteratorIlLb0ELi0EEppEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_656:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_656", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %6:gr64 = MOV64rm %7, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %5:gr64 = ADD64ri32 %6, 1, implicit-def $eflags
    MOV64mr %7, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.3)
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZSt3maxIlERKT_S2_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_657:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_657", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %9:gr64 = MOV64rm %10, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    CMP64rm %9, %7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.7)
    JCC_1 %bb.2, 13, implicit $eflags
  
  bb.1.BB_658:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_658", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.2)
    JMP_1 %bb.3
  
  bb.2.BB_659:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_659", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.2)
  
  bb.3.BB_660:
    INLINEASM &"# LLVM BB: BB_660", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %16
    RET64 implicit $rax

...
---
name:            _ZN3c1013integer_rangeIlLb0ELb1EEC2Ell
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_661:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_661", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %13:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    $rsi = COPY %13
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = ADD64ri32 %14, 8, implicit-def $eflags
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $rsi = COPY %8
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106detail16integer_iteratorIlLb0ELi0EEC2El
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_662:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_662", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %7, 1, $noreg, 0, $noreg, %6 :: (store (s64) into %ir.5)
    RET64

...
---
name:            _ZNK3c106detail16integer_iteratorIlLb0ELi0EEeqERKS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_663:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_663", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr64 = MOV64rm %14, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    CMP64rm %13, %11, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s64) from %ir.8)
    %7:gr8 = SETCCr 4, implicit $eflags
    %5:gr8 = AND8ri %7, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZN3c103strIJPKcA100_cNS_8ArrayRefIlEEA17_clA13_cEEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_664:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    %7:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    INLINEASM &"# LLVM BB: BB_664", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.9)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.11)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.12)
    %25:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %24:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    MOV64mr %stack.7, 1, $noreg, 0, $noreg, %24 :: (store (s64) into %ir.14)
    %21:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %20:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %20 :: (store (s64) into %ir.15)
    %17:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %16:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    MOV64mr %stack.9, 1, $noreg, 0, $noreg, %16 :: (store (s64) into %ir.16)
    %9:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    %11:gr64 = LEA64r %stack.8, 1, $noreg, 0, $noreg
    %13:gr64 = LEA64r %stack.9, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 8, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %25
    $rdx = COPY %9
    $rcx = COPY %21
    $r8 = COPY %11
    $r9 = COPY %17
    MOV64mr $rsp, 1, $noreg, 0, $noreg, %13 :: (store (s64) into stack)
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJRKPKcS3_RKNS_8ArrayRefIlEES3_RKlS3_EE4callB5cxx11ES5_S5_S9_S5_SB_S5_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 8, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJRKPKcS3_RKNS_8ArrayRefIlEES3_RKlS3_EE4callB5cxx11ES5_S5_S9_S5_SB_S5_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 8, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 9, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_665:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = COPY %0
    %7:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    INLINEASM &"# LLVM BB: BB_665", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.9)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.11)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.12)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rdi = COPY %8
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.8)
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.9)
    %11:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.10)
    %12:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.11)
    %13:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.12)
    %14:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.13)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 8, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rsp
    MOV64mr %15, 1, $noreg, 0, $noreg, killed %14 :: (store (s64) into stack)
    $rdi = COPY %8
    $rsi = COPY %9
    $rdx = COPY %10
    $rcx = COPY %11
    $r8 = COPY %12
    $r9 = COPY %13
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJS3_NS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 8, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %16:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_666:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_666", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %17
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_667:
    INLINEASM &"# LLVM BB: BB_667", 1 /* sideeffect attdialect */
    %27:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %6
    RET64 implicit $rax
  
  bb.3.BB_668 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %19:gr64 = COPY killed $rdx
    %18:gr64 = COPY killed $rax
    %23:gr32 = COPY %19.sub_32bit
    %22:gr64 = COPY %18
    INLINEASM &"# LLVM BB: BB_668", 1 /* sideeffect attdialect */
    MOV64mr %stack.8, 1, $noreg, 0, $noreg, %22 :: (store (s64) into %ir.15)
    MOV32mr %stack.9, 1, $noreg, 0, $noreg, %23 :: (store (s32) into %ir.16)
    %20:gr64 = LEA64r %stack.7, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_669:
    INLINEASM &"# LLVM BB: BB_669", 1 /* sideeffect attdialect */
    %26:gr64 = MOV64rm %stack.8, 1, $noreg, 0, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %26
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJS3_NS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
  - { reg: '$r9', virtual-reg: '%5' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default, 
      isImmutable: false, isAliased: false, callee-saved-register: '', 
      callee-saved-restored: true, debug-info-variable: '', debug-info-expression: '', 
      debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_670:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %5:gr64 = COPY $r9
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %6:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %fixed-stack.0)
    INLINEASM &"# LLVM BB: BB_670", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.8)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.9)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.10)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.11)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.12)
    %24:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %23:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %24
    $rsi = COPY %23
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %22:gr64 = COPY $rax
    %19:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %18:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %17:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    %16:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.12)
    %15:gr64 = MOV64rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %22
    $rsi = COPY %19
    $rdx = COPY %18
    $rcx = COPY %17
    $r8 = COPY %16
    $r9 = COPY %15
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    $rax = COPY %14
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIPKcJNS_8ArrayRefIlEES3_lS3_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
  - { reg: '$r9', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_671:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %10:gr64 = COPY $r9
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    %11:gr64 = COPY killed %10
    INLINEASM &"# LLVM BB: BB_671", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.8)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.9)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.10)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %11 :: (store (s64) into %ir.11)
    %27:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %26:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %27
    $rsi = COPY %26
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %25:gr64 = COPY $rax
    %22:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %21:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %20:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.10)
    %19:gr64 = MOV64rm %stack.5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %25
    $rsi = COPY %22
    $rdx = COPY %21
    $rcx = COPY %20
    $r8 = COPY %19
    CALL64pcrel32 @_ZN3c106detail4_strINS_8ArrayRefIlEEJPKclS5_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %18:gr64 = COPY $rax
    $rax = COPY %18
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strINS_8ArrayRefIlEEJPKclS5_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_672:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    INLINEASM &"# LLVM BB: BB_672", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.9)
    %23:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %22:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    $rsi = COPY %22
    CALL64pcrel32 @_ZN3c106detail4_strINS_8ArrayRefIlEEEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %17:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %16:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %18
    $rdx = COPY %17
    $rcx = COPY %16
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJlS3_EEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    $rax = COPY %15
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIPKcJlS3_EEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_673:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_673", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.7)
    %19:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    $rsi = COPY %18
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZN3c106detail4_strIlJPKcEEERSoS4_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIlJPKcEEERSoS4_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_674:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_674", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIlEERSoS2_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIlEERSoS2_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_675:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_675", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %12
    $rsi = COPY %10
    CALL64pcrel32 target-flags(x86-plt) @_ZNSolsEl, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %8:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZNK3c1010TensorImpl5dtypeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr16, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr16, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_676:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_676", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    %6:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %5:gr16 = MOV16rm %6, 1, $noreg, 176, $noreg
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %5
    %3:gr16 = MOV16rm %stack.0, 1, $noreg, 0, $noreg :: (load (s16) from %ir.7)
    $ax = COPY %3
    RET64 implicit $ax

...
---
name:            _ZN3c103strIJA16_cN6caffe28TypeMetaEA34_cS3_EEEDcDpRKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_677:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %5:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_677", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.9)
    %17:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    MOV64mr %stack.5, 1, $noreg, 0, $noreg, %17 :: (store (s64) into %ir.10)
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %13 :: (store (s64) into %ir.11)
    %10:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    %6:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %8:gr64 = LEA64r %stack.6, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    $rsi = COPY %6
    $rdx = COPY %14
    $rcx = COPY %8
    $r8 = COPY %10
    CALL64pcrel32 @_ZN3c106detail12_str_wrapperIJPKcRKN6caffe28TypeMetaES3_S7_EE4callB5cxx11ERKS3_S7_SA_S7_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN3c106detail12_str_wrapperIJPKcRKN6caffe28TypeMetaES3_S7_EE4callB5cxx11ERKS3_S7_SA_S7_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%1' }
  - { reg: '$rdx', virtual-reg: '%2' }
  - { reg: '$rcx', virtual-reg: '%3' }
  - { reg: '$r8', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 376, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 6, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 7, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_678:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %4:gr64 = COPY $r8
    %3:gr64 = COPY $rcx
    %2:gr64 = COPY $rdx
    %1:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %5:gr64 = COPY %0
    INLINEASM &"# LLVM BB: BB_678", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %4 :: (store (s64) into %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %6:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %6
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEEC1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.6)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.7)
    %9:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.8)
    %10:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.9)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %6
    $rsi = COPY %7
    $rdx = COPY %8
    $rcx = COPY %9
    $r8 = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaES3_S5_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    JMP_1 %bb.1
  
  bb.1.BB_679:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
  
    INLINEASM &"# LLVM BB: BB_679", 1 /* sideeffect attdialect */
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    $rdi = COPY %0
    $rsi = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @_ZNKSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    EH_LABEL <mcsymbol >
    JMP_1 %bb.2
  
  bb.2.BB_680:
    INLINEASM &"# LLVM BB: BB_680", 1 /* sideeffect attdialect */
    %22:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %22
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rax = COPY %5
    RET64 implicit $rax
  
  bb.3.BB_681 (landing-pad):
    successors: %bb.4(0x80000000)
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %14:gr64 = COPY killed $rdx
    %13:gr64 = COPY killed $rax
    %18:gr32 = COPY %14.sub_32bit
    %17:gr64 = COPY %13
    INLINEASM &"# LLVM BB: BB_681", 1 /* sideeffect attdialect */
    MOV64mr %stack.6, 1, $noreg, 0, $noreg, %17 :: (store (s64) into %ir.11)
    MOV32mr %stack.7, 1, $noreg, 0, $noreg, %18 :: (store (s32) into %ir.12)
    %15:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    CALL64pcrel32 target-flags(x86-plt) @_ZNSt7__cxx1119basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  
  bb.4.BB_682:
    INLINEASM &"# LLVM BB: BB_682", 1 /* sideeffect attdialect */
    %21:gr64 = MOV64rm %stack.6, 1, $noreg, 0, $noreg :: (load (s64) from %ir.11)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    CALL64pcrel32 target-flags(x86-plt) @_Unwind_Resume, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZN3c106detail4_strIPKcJN6caffe28TypeMetaES3_S5_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
  - { reg: '$r8', virtual-reg: '%8' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_683:
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %8:gr64 = COPY $r8
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    %9:gr64 = COPY killed %8
    INLINEASM &"# LLVM BB: BB_683", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.7)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.8)
    MOV64mr %stack.4, 1, $noreg, 0, $noreg, %9 :: (store (s64) into %ir.9)
    %23:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    %22:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %23
    $rsi = COPY %22
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %21:gr64 = COPY $rax
    %18:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    %17:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8)
    %16:gr64 = MOV64rm %stack.4, 1, $noreg, 0, $noreg :: (load (s64) from %ir.9)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %21
    $rsi = COPY %18
    $rdx = COPY %17
    $rcx = COPY %16
    CALL64pcrel32 @_ZN3c106detail4_strIN6caffe28TypeMetaEJPKcS3_EEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    $rax = COPY %15
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIN6caffe28TypeMetaEJPKcS3_EEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
  - { reg: '$rcx', virtual-reg: '%6' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_684:
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %6:gr64 = COPY $rcx
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    %7:gr64 = COPY killed %6
    INLINEASM &"# LLVM BB: BB_684", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.5)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.6)
    MOV64mr %stack.3, 1, $noreg, 0, $noreg, %7 :: (store (s64) into %ir.7)
    %19:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %18:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    $rsi = COPY %18
    CALL64pcrel32 @_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6)
    %13:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %14
    $rdx = COPY %13
    CALL64pcrel32 @_ZN3c106detail4_strIPKcJN6caffe28TypeMetaEEEERSoS6_RKT_DpRKT0_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    $rax = COPY %12
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIPKcJN6caffe28TypeMetaEEEERSoS6_RKT_DpRKT0_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_685:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_685", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    CALL64pcrel32 @_ZN3c106detail4_strIPKcEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %13:gr64 = COPY $rax
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %10
    CALL64pcrel32 @_ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZN3c106detail4_strIN6caffe28TypeMetaEEERSoS4_RKT_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr16, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_686:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_686", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %13:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %11:gr16 = MOV16rm %12, 1, $noreg, 0, $noreg
    MOV16mr %stack.2, 1, $noreg, 0, $noreg, %11
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    %8:gr32 = MOVZX32rm16 %stack.2, 1, $noreg, 0, $noreg :: (load (s16) from %ir.9)
    $esi = COPY %8
    CALL64pcrel32 @_ZN6caffe2lsERSoNS_8TypeMetaE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %5
    RET64 implicit $rax

...
---
name:            _ZN6caffe2lsERSoNS_8TypeMetaE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr16, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 2, alignment: 2, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_687:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr16 = COPY %1.sub_16bit
    INLINEASM &"# LLVM BB: BB_687", 1 /* sideeffect attdialect */
    MOV16mr %stack.0, 1, $noreg, 0, $noreg, %2 :: (store (s16) into %ir.5)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.3)
    %17:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %14:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    CALL64pcrel32 @_ZNK6caffe28TypeMeta4nameEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax, implicit-def $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %15:gr64 = COPY $rax
    %16:gr64 = COPY $rdx
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %15 :: (store (s64) into %ir.9)
    MOV64mr %stack.2, 1, $noreg, 8, $noreg, %16 :: (store (s64) into %ir.11)
    %9:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14)
    %8:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.16)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %17
    $rsi = COPY %9
    $rdx = COPY %8
    CALL64pcrel32 @_ZN3c10lsIcEERSt13basic_ostreamIT_St11char_traitsIS2_EES6_NS_17basic_string_viewIS2_EE, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %7:gr64 = COPY $rax
    $rax = COPY %7
    RET64 implicit $rax

...
---
name:            _ZN3c10lsIcEERSt13basic_ostreamIT_St11char_traitsIS2_EES6_NS_17basic_string_viewIS2_EE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_688:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_688", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.7)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.8)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %20:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %18:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %18
    CALL64pcrel32 @_ZNK3c1017basic_string_viewIcE4dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %19:gr64 = COPY $rax
    %16:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %16
    CALL64pcrel32 @_ZNK3c1017basic_string_viewIcE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %17:gr64 = COPY $rax
    %13:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    $rsi = COPY %19
    $rdx = COPY %17
    CALL64pcrel32 @_ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.13)
    %11:gr64 = MOV64rm %stack.2, 1, $noreg, 8, $noreg :: (load (s64) from %ir.15)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $rsi = COPY %12
    $rdx = COPY %11
    CALL64pcrel32 @_ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    $rax = COPY %10
    RET64 implicit $rax

...
---
name:            _ZNK6caffe28TypeMeta4nameEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: vr128, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 16, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_689:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $rdi
  
    %1:gr64 = COPY $rdi
    %2:gr64 = COPY killed %1
    INLINEASM &"# LLVM BB: BB_689", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s64) into %ir.2)
    %3:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.2)
    EH_LABEL <mcsymbol >
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 @_ZNK6caffe28TypeMeta4dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %4:gr64 = COPY $rax
    EH_LABEL <mcsymbol >
    %0:gr64 = COPY %4
    JMP_1 %bb.1
  
  bb.1.BB_690:
    INLINEASM &"# LLVM BB: BB_690", 1 /* sideeffect attdialect */
    %10:vr128 = MOVUPSrm %0, 1, $noreg, 56, $noreg :: (dereferenceable load (s128) from %ir.7, align 8)
    MOVAPSmr %stack.0, 1, $noreg, 0, $noreg, killed %10 :: (store (s128) into %ir.6)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s64) from %ir.8)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 8, $noreg :: (dereferenceable load (s64) from %ir.8 + 8)
    $rax = COPY %11
    $rdx = COPY %12
    RET 0, $rax, $rdx
  
  bb.2.BB_691 (landing-pad):
    liveins: $rax, $rdx
  
    EH_LABEL <mcsymbol >
    %6:gr64 = COPY killed $rdx
    %5:gr64 = COPY killed $rax
    %9:gr32 = COPY %6.sub_32bit
    %8:gr64 = COPY %5
    INLINEASM &"# LLVM BB: BB_691", 1 /* sideeffect attdialect */
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %8
    CALL64pcrel32 @__clang_call_terminate, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

...
---
name:            _ZStlsIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_St17basic_string_viewIS3_S4_E
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 16, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_692:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_692", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.6)
    MOV64mr %stack.0, 1, $noreg, 8, $noreg, %5 :: (store (s64) into %ir.7)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.4)
    %15:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    %13:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %14:gr64 = COPY $rax
    %11:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %11
    CALL64pcrel32 @_ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %12:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    $rsi = COPY %14
    $rdx = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = COPY $rax
    $rax = COPY %10
    RET64 implicit $rax

...
---
name:            _ZNK3c1017basic_string_viewIcE4dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_693:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_693", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK3c1017basic_string_viewIcE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_694:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_694", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNSt17basic_string_viewIcSt11char_traitsIcEEC2EPKcm
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
  - { reg: '$rdx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_695:
    liveins: $rdi, $rsi, $rdx
  
    %4:gr64 = COPY $rdx
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    %5:gr64 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_695", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s64) into %ir.5)
    %11:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %10:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5)
    MOV64mr %11, 1, $noreg, 0, $noreg, %10 :: (store (s64) into %ir.7)
    %8:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %11, 1, $noreg, 8, $noreg, %8 :: (store (s64) into %ir.9)
    RET64

...
---
name:            _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_696:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_696", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 8, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNKSt17basic_string_viewIcSt11char_traitsIcEE4sizeEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_697:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_697", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %5:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    %4:gr64 = MOV64rm %5, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    $rax = COPY %4
    RET64 implicit $rax

...
---
name:            _ZNK6caffe28TypeMeta4dataEv
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr16, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_698:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_698", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %12:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @_ZN6caffe28TypeMeta13typeMetaDatasEv, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %11:gr64 = COPY $rax
    %8:gr32 = MOVZX32rm16 %12, 1, $noreg, 0, $noreg :: (load (s16) from %ir.4)
    %9:gr64 = SUBREG_TO_REG 0, %8, %subreg.sub_32bit
    %5:gr64 = IMUL64rri32 %9, 72, implicit-def $eflags
    %6:gr64 = ADD64rr %11, %5, implicit-def $eflags
    $rax = COPY %6
    RET64 implicit $rax

...
---
name:            _ZSt3maxIiERKT_S2_S2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_699:
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_699", 1 /* sideeffect attdialect */
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV64mr %stack.2, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.4)
    %10:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %9:gr32 = MOV32rm %10, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    %7:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    CMP32rm %9, %7, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.7)
    JCC_1 %bb.2, 13, implicit $eflags
  
  bb.1.BB_700:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_700", 1 /* sideeffect attdialect */
    %14:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %14 :: (store (s64) into %ir.2)
    JMP_1 %bb.3
  
  bb.2.BB_701:
    successors: %bb.3(0x80000000)
  
    INLINEASM &"# LLVM BB: BB_701", 1 /* sideeffect attdialect */
    %12:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %12 :: (store (s64) into %ir.2)
  
  bb.3.BB_702:
    INLINEASM &"# LLVM BB: BB_702", 1 /* sideeffect attdialect */
    %16:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    $rax = COPY %16
    RET64 implicit $rax

...
---
name:            _ZN3c1013integer_rangeIiLb0ELb1EEC2Eii
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
  - { reg: '$edx', virtual-reg: '%4' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_703:
    liveins: $rdi, $esi, $edx
  
    %4:gr32 = COPY $edx
    %2:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr32 = COPY killed %2
    %5:gr32 = COPY killed %4
    INLINEASM &"# LLVM BB: BB_703", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.3)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.4)
    MOV32mr %stack.2, 1, $noreg, 0, $noreg, %5 :: (store (s32) into %ir.5)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    %13:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %14
    $esi = COPY %13
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %10:gr64 = ADD64ri32 %14, 4, implicit-def $eflags
    %8:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %10
    $esi = COPY %8
    CALL64pcrel32 @_ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    RET64

...
---
name:            _ZN3c106detail16integer_iteratorIiLb0ELi0EEC2Ei
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_704:
    liveins: $rdi, $esi
  
    %2:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr32 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_704", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.3)
    %7:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %6:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
    MOV32mr %7, 1, $noreg, 0, $noreg, %6 :: (store (s32) into %ir.5)
    RET64

...
---
name:            _ZNK3c106detail16integer_iteratorIiLb0ELi0EEeqERKS2_
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr8, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$rsi', virtual-reg: '%2' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_705:
    liveins: $rdi, $rsi
  
    %2:gr64 = COPY $rsi
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    %3:gr64 = COPY killed %2
    INLINEASM &"# LLVM BB: BB_705", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.2)
    MOV64mr %stack.1, 1, $noreg, 0, $noreg, %3 :: (store (s64) into %ir.3)
    %14:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr32 = MOV32rm %14, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
    %11:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.3)
    CMP32rm %13, %11, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.8)
    %7:gr8 = SETCCr 4, implicit $eflags
    %5:gr8 = AND8ri %7, 1, implicit-def $eflags
    %6:gr32 = MOVZX32rr8 %5
    $eax = COPY %6
    RET64 implicit $eax

...
---
name:            _ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE12get_call_ptrENS5_10DeviceTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_706:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_706", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s8) into %ir.3)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr8 = MOV8rm %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %11:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE7DEFAULTE, $noreg
    %12:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_N3c108ArrayRefIlEEENS0_26adaptive_max_pool2d_kernelEE7DEFAULTE)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    %8:gr32 = MOVSX32rr8 %13
    $esi = COPY %8
    $rdx = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at6native16DispatchStubImpl12get_call_ptrEN3c1010DeviceTypeEPv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
---
name:            _ZSt7forwardIRKN2at6TensorEEOT_RNSt16remove_referenceIS4_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_707:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_707", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZSt7forwardIRN3c108ArrayRefIlEEEOT_RNSt16remove_referenceIS4_E4typeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_708:
    liveins: $rdi
  
    %0:gr64 = COPY $rdi
    %1:gr64 = COPY killed %0
    INLINEASM &"# LLVM BB: BB_708", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %1 :: (store (s64) into %ir.1)
    %3:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.1)
    $rax = COPY %3
    RET64 implicit $rax

...
---
name:            _ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE12get_call_ptrEN3c1010DeviceTypeE
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr32, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%0' }
  - { reg: '$esi', virtual-reg: '%1' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 1, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_709:
    liveins: $rdi, $esi
  
    %1:gr32 = COPY $esi
    %0:gr64 = COPY $rdi
    %2:gr8 = COPY %1.sub_8bit
    INLINEASM &"# LLVM BB: BB_709", 1 /* sideeffect attdialect */
    MOV64mr %stack.0, 1, $noreg, 0, $noreg, %0 :: (store (s64) into %ir.2)
    MOV8mr %stack.1, 1, $noreg, 0, $noreg, %2 :: (store (s8) into %ir.3)
    %15:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.2)
    %13:gr8 = MOV8rm %stack.1, 1, $noreg, 0, $noreg :: (load (s8) from %ir.3)
    %11:gr64 = MOV64rm $rip, 1, $noreg, target-flags(x86-gotpcrel) @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE7DEFAULTE, $noreg
    %12:gr64 = MOV64rm %11, 1, $noreg, 0, $noreg :: (load (s64) from @_ZN2at6native12DispatchStubIPFvRKNS_6TensorES4_S4_ENS0_35adaptive_max_pool2d_backward_kernelEE7DEFAULTE)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %15
    %8:gr32 = MOVSX32rr8 %13
    $esi = COPY %8
    $rdx = COPY %12
    CALL64pcrel32 target-flags(x86-plt) @_ZN2at6native16DispatchStubImpl12get_call_ptrEN3c1010DeviceTypeEPv, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %9:gr64 = COPY $rax
    $rax = COPY %9
    RET64 implicit $rax

...
