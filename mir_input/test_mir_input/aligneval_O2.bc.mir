--- |
  ; ModuleID = 'aligneval_O2.bc'
  source_filename = "spec_benchmarks/spec/specint2006/456.hmmer/src/aligneval.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-pc-linux-gnu"
  
  @.str = private unnamed_addr constant [59 x i8] c"spec_benchmarks/spec/specint2006/456.hmmer/src/aligneval.c\00", align 1
  
  ; Function Attrs: nounwind uwtable
  define dso_local float @ComparePairAlignments(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3) local_unnamed_addr #0 {
  BB_0:
    %4 = alloca ptr, align 8
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca i32, align 4
    %9 = alloca i32, align 4
    %10 = bitcast ptr %4 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %10) #8
    %11 = bitcast ptr %5 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #8
    %12 = bitcast ptr %6 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #8
    %13 = bitcast ptr %7 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #8
    %14 = bitcast ptr %8 to ptr
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %14) #8
    %15 = bitcast ptr %9 to ptr
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #8
    call fastcc void @make_alilist(ptr noundef %2, ptr noundef %3, ptr noundef nonnull %6, ptr noundef nonnull %8)
    call fastcc void @make_alilist(ptr noundef %3, ptr noundef %2, ptr noundef nonnull %7, ptr noundef nonnull %9)
    call fastcc void @make_alilist(ptr noundef %0, ptr noundef %1, ptr noundef nonnull %4, ptr noundef nonnull %8)
    call fastcc void @make_alilist(ptr noundef %1, ptr noundef %0, ptr noundef nonnull %5, ptr noundef nonnull %9)
    %16 = load ptr, ptr %4, align 8, !tbaa !5
    %17 = load ptr, ptr %5, align 8, !tbaa !5
    %18 = load ptr, ptr %6, align 8, !tbaa !5
    %19 = load ptr, ptr %7, align 8, !tbaa !5
    %20 = load i32, ptr %8, align 4, !tbaa !9
    %21 = load i32, ptr %9, align 4, !tbaa !9
    %22 = icmp sgt i32 %20, 0
    br i1 %22, label %BB_1, label %BB_6
  
  BB_1:                                             ; preds = %BB_0
    %23 = zext i32 %20 to i64
    %24 = and i64 %23, 1
    %25 = icmp eq i32 %20, 1
    br i1 %25, label %BB_4, label %BB_2
  
  BB_2:                                             ; preds = %BB_1
    %26 = and i64 %23, 4294967294
    br label %BB_9
  
  BB_3:                                             ; preds = %BB_9
    %27 = fadd float %61, 1.000000e+00
    br label %BB_4
  
  BB_4:                                             ; preds = %BB_3, %BB_1
    %28 = phi float [ undef, %BB_1 ], [ %61, %BB_3 ]
    %29 = phi float [ undef, %BB_1 ], [ %68, %BB_3 ]
    %30 = phi i64 [ 0, %BB_1 ], [ %69, %BB_3 ]
    %31 = phi float [ 1.000000e+00, %BB_1 ], [ %27, %BB_3 ]
    %32 = phi float [ 0.000000e+00, %BB_1 ], [ %68, %BB_3 ]
    %33 = icmp eq i64 %24, 0
    br i1 %33, label %BB_6, label %BB_5
  
  BB_5:                                             ; preds = %BB_4
    %34 = getelementptr inbounds i32, ptr %18, i64 %30
    %35 = load i32, ptr %34, align 4, !tbaa !9
    %36 = getelementptr inbounds i32, ptr %16, i64 %30
    %37 = load i32, ptr %36, align 4, !tbaa !9
    %38 = icmp eq i32 %35, %37
    %39 = fadd float %32, 1.000000e+00
    %40 = select i1 %38, float %39, float %32
    br label %BB_6
  
  BB_6:                                             ; preds = %BB_5, %BB_4, %BB_0
    %41 = phi float [ 0.000000e+00, %BB_0 ], [ %29, %BB_4 ], [ %40, %BB_5 ]
    %42 = phi float [ 0.000000e+00, %BB_0 ], [ %28, %BB_4 ], [ %31, %BB_5 ]
    %43 = icmp sgt i32 %21, 0
    br i1 %43, label %BB_7, label %BB_13
  
  BB_7:                                             ; preds = %BB_6
    %44 = zext i32 %21 to i64
    %45 = and i64 %44, 1
    %46 = icmp eq i32 %21, 1
    br i1 %46, label %BB_11, label %BB_8
  
  BB_8:                                             ; preds = %BB_7
    %47 = and i64 %44, 4294967294
    br label %BB_10
  
  BB_9:                                             ; preds = %BB_9, %BB_2
    %48 = phi i64 [ 0, %BB_2 ], [ %69, %BB_9 ]
    %49 = phi float [ 0.000000e+00, %BB_2 ], [ %61, %BB_9 ]
    %50 = phi float [ 0.000000e+00, %BB_2 ], [ %68, %BB_9 ]
    %51 = phi i64 [ 0, %BB_2 ], [ %70, %BB_9 ]
    %52 = fadd float %49, 1.000000e+00
    %53 = getelementptr inbounds i32, ptr %18, i64 %48
    %54 = load i32, ptr %53, align 4, !tbaa !9
    %55 = getelementptr inbounds i32, ptr %16, i64 %48
    %56 = load i32, ptr %55, align 4, !tbaa !9
    %57 = icmp eq i32 %54, %56
    %58 = fadd float %50, 1.000000e+00
    %59 = select i1 %57, float %58, float %50
    %60 = or i64 %48, 1
    %61 = fadd float %52, 1.000000e+00
    %62 = getelementptr inbounds i32, ptr %18, i64 %60
    %63 = load i32, ptr %62, align 4, !tbaa !9
    %64 = getelementptr inbounds i32, ptr %16, i64 %60
    %65 = load i32, ptr %64, align 4, !tbaa !9
    %66 = icmp eq i32 %63, %65
    %67 = fadd float %59, 1.000000e+00
    %68 = select i1 %66, float %67, float %59
    %69 = add nuw nsw i64 %48, 2
    %70 = add i64 %51, 2
    %71 = icmp eq i64 %70, %26
    br i1 %71, label %BB_3, label %BB_9
  
  BB_10:                                            ; preds = %BB_10, %BB_8
    %72 = phi i64 [ 0, %BB_8 ], [ %93, %BB_10 ]
    %73 = phi float [ %42, %BB_8 ], [ %85, %BB_10 ]
    %74 = phi float [ %41, %BB_8 ], [ %92, %BB_10 ]
    %75 = phi i64 [ 0, %BB_8 ], [ %94, %BB_10 ]
    %76 = fadd float %73, 1.000000e+00
    %77 = getelementptr inbounds i32, ptr %17, i64 %72
    %78 = load i32, ptr %77, align 4, !tbaa !9
    %79 = getelementptr inbounds i32, ptr %19, i64 %72
    %80 = load i32, ptr %79, align 4, !tbaa !9
    %81 = icmp eq i32 %78, %80
    %82 = fadd float %74, 1.000000e+00
    %83 = select i1 %81, float %82, float %74
    %84 = or i64 %72, 1
    %85 = fadd float %76, 1.000000e+00
    %86 = getelementptr inbounds i32, ptr %17, i64 %84
    %87 = load i32, ptr %86, align 4, !tbaa !9
    %88 = getelementptr inbounds i32, ptr %19, i64 %84
    %89 = load i32, ptr %88, align 4, !tbaa !9
    %90 = icmp eq i32 %87, %89
    %91 = fadd float %83, 1.000000e+00
    %92 = select i1 %90, float %91, float %83
    %93 = add nuw nsw i64 %72, 2
    %94 = add i64 %75, 2
    %95 = icmp eq i64 %94, %47
    br i1 %95, label %BB_11, label %BB_10
  
  BB_11:                                            ; preds = %BB_10, %BB_7
    %96 = phi float [ undef, %BB_7 ], [ %85, %BB_10 ]
    %97 = phi float [ undef, %BB_7 ], [ %92, %BB_10 ]
    %98 = phi i64 [ 0, %BB_7 ], [ %93, %BB_10 ]
    %99 = phi float [ %42, %BB_7 ], [ %85, %BB_10 ]
    %100 = phi float [ %41, %BB_7 ], [ %92, %BB_10 ]
    %101 = icmp eq i64 %45, 0
    br i1 %101, label %BB_13, label %BB_12
  
  BB_12:                                            ; preds = %BB_11
    %102 = fadd float %99, 1.000000e+00
    %103 = getelementptr inbounds i32, ptr %17, i64 %98
    %104 = load i32, ptr %103, align 4, !tbaa !9
    %105 = getelementptr inbounds i32, ptr %19, i64 %98
    %106 = load i32, ptr %105, align 4, !tbaa !9
    %107 = icmp eq i32 %104, %106
    %108 = fadd float %100, 1.000000e+00
    %109 = select i1 %107, float %108, float %100
    br label %BB_13
  
  BB_13:                                            ; preds = %BB_12, %BB_11, %BB_6
    %110 = phi float [ %41, %BB_6 ], [ %97, %BB_11 ], [ %109, %BB_12 ]
    %111 = phi float [ %42, %BB_6 ], [ %96, %BB_11 ], [ %102, %BB_12 ]
    %112 = bitcast ptr %19 to ptr
    %113 = bitcast ptr %18 to ptr
    %114 = bitcast ptr %17 to ptr
    %115 = bitcast ptr %16 to ptr
    %116 = fdiv float %110, %111
    tail call void @free(ptr noundef %115) #8
    tail call void @free(ptr noundef %114) #8
    tail call void @free(ptr noundef %113) #8
    tail call void @free(ptr noundef %112) #8
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #8
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %14) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %10) #8
    ret float %116
  }
  
  ; Function Attrs: nounwind uwtable
  define internal fastcc void @make_alilist(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef writeonly %2, ptr nocapture noundef writeonly %3) unnamed_addr #0 {
  BB_14:
    %4 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %0) #9
    %5 = shl i64 %4, 2
    %6 = tail call ptr @sre_malloc(ptr noundef @.str, i32 noundef 179, i64 noundef %5) #8
    %7 = bitcast ptr %6 to ptr
    br label %BB_15
  
  BB_15:                                            ; preds = %BB_21, %BB_14
    %8 = phi i64 [ %26, %BB_21 ], [ 0, %BB_14 ]
    %9 = phi i32 [ %21, %BB_21 ], [ 0, %BB_14 ]
    %10 = phi i32 [ %25, %BB_21 ], [ 0, %BB_14 ]
    %11 = getelementptr inbounds i8, ptr %0, i64 %8
    %12 = load i8, ptr %11, align 1, !tbaa !11
    switch i8 %12, label %BB_16 [
      i8 0, label %BB_22
      i8 32, label %BB_19
      i8 46, label %BB_19
      i8 95, label %BB_19
      i8 45, label %BB_19
      i8 126, label %BB_19
    ]
  
  BB_16:                                            ; preds = %BB_15
    %13 = getelementptr inbounds i8, ptr %1, i64 %8
    %14 = load i8, ptr %13, align 1, !tbaa !11
    switch i8 %14, label %BB_17 [
      i8 32, label %BB_18
      i8 46, label %BB_18
      i8 95, label %BB_18
      i8 45, label %BB_18
    ]
  
  BB_17:                                            ; preds = %BB_16
    %15 = icmp eq i8 %14, 126
    %16 = select i1 %15, i32 -1, i32 %10
    br label %BB_18
  
  BB_18:                                            ; preds = %BB_17, %BB_16, %BB_16, %BB_16, %BB_16
    %17 = phi i32 [ -1, %BB_16 ], [ %16, %BB_17 ], [ -1, %BB_16 ], [ -1, %BB_16 ], [ -1, %BB_16 ]
    %18 = sext i32 %9 to i64
    %19 = getelementptr inbounds i32, ptr %7, i64 %18
    store i32 %17, ptr %19, align 4, !tbaa !9
    %20 = add nsw i32 %9, 1
    br label %BB_19
  
  BB_19:                                            ; preds = %BB_18, %BB_15, %BB_15, %BB_15, %BB_15, %BB_15
    %21 = phi i32 [ %20, %BB_18 ], [ %9, %BB_15 ], [ %9, %BB_15 ], [ %9, %BB_15 ], [ %9, %BB_15 ], [ %9, %BB_15 ]
    %22 = getelementptr inbounds i8, ptr %1, i64 %8
    %23 = load i8, ptr %22, align 1, !tbaa !11
    switch i8 %23, label %BB_20 [
      i8 32, label %BB_21
      i8 46, label %BB_21
      i8 95, label %BB_21
      i8 45, label %BB_21
      i8 126, label %BB_21
    ]
  
  BB_20:                                            ; preds = %BB_19
    %24 = add nsw i32 %10, 1
    br label %BB_21
  
  BB_21:                                            ; preds = %BB_20, %BB_19, %BB_19, %BB_19, %BB_19, %BB_19
    %25 = phi i32 [ %10, %BB_19 ], [ %24, %BB_20 ], [ %10, %BB_19 ], [ %10, %BB_19 ], [ %10, %BB_19 ], [ %10, %BB_19 ]
    %26 = add nuw i64 %8, 1
    br label %BB_15
  
  BB_22:                                            ; preds = %BB_15
    store i32 %9, ptr %3, align 4, !tbaa !9
    %27 = bitcast ptr %2 to ptr
    store ptr %6, ptr %27, align 8, !tbaa !5
    ret void
  }
  
  ; Function Attrs: mustprogress nounwind willreturn memory(argmem: readwrite, inaccessiblemem: readwrite)
  declare void @free(ptr nocapture noundef) local_unnamed_addr #1
  
  ; Function Attrs: nounwind uwtable
  define dso_local float @CompareRefPairAlignments(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef readonly %4) local_unnamed_addr #0 {
  BB_23:
    %5 = alloca ptr, align 8
    %6 = alloca ptr, align 8
    %7 = alloca ptr, align 8
    %8 = alloca ptr, align 8
    %9 = alloca i32, align 4
    %10 = alloca i32, align 4
    %11 = bitcast ptr %5 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %11) #8
    %12 = bitcast ptr %6 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %12) #8
    %13 = bitcast ptr %7 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %13) #8
    %14 = bitcast ptr %8 to ptr
    call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %14) #8
    %15 = bitcast ptr %9 to ptr
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %15) #8
    %16 = bitcast ptr %10 to ptr
    call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %16) #8
    call fastcc void @make_ref_alilist(ptr noundef %0, ptr noundef %1, ptr noundef %3, ptr noundef %4, ptr noundef nonnull %7, ptr noundef nonnull %9)
    call fastcc void @make_ref_alilist(ptr noundef %0, ptr noundef %2, ptr noundef %4, ptr noundef %3, ptr noundef nonnull %8, ptr noundef nonnull %10)
    call fastcc void @make_ref_alilist(ptr noundef %0, ptr noundef %1, ptr noundef %1, ptr noundef %2, ptr noundef nonnull %5, ptr noundef nonnull %9)
    call fastcc void @make_ref_alilist(ptr noundef %0, ptr noundef %2, ptr noundef %2, ptr noundef %1, ptr noundef nonnull %6, ptr noundef nonnull %10)
    %17 = load ptr, ptr %5, align 8, !tbaa !5
    %18 = load ptr, ptr %6, align 8, !tbaa !5
    %19 = load ptr, ptr %7, align 8, !tbaa !5
    %20 = load ptr, ptr %8, align 8, !tbaa !5
    %21 = load i32, ptr %9, align 4, !tbaa !9
    %22 = load i32, ptr %10, align 4, !tbaa !9
    %23 = icmp sgt i32 %21, 0
    br i1 %23, label %BB_24, label %BB_29
  
  BB_24:                                            ; preds = %BB_23
    %24 = zext i32 %21 to i64
    %25 = and i64 %24, 1
    %26 = icmp eq i32 %21, 1
    br i1 %26, label %BB_27, label %BB_25
  
  BB_25:                                            ; preds = %BB_24
    %27 = and i64 %24, 4294967294
    br label %BB_32
  
  BB_26:                                            ; preds = %BB_32
    %28 = fadd float %62, 1.000000e+00
    br label %BB_27
  
  BB_27:                                            ; preds = %BB_26, %BB_24
    %29 = phi float [ undef, %BB_24 ], [ %62, %BB_26 ]
    %30 = phi float [ undef, %BB_24 ], [ %69, %BB_26 ]
    %31 = phi i64 [ 0, %BB_24 ], [ %70, %BB_26 ]
    %32 = phi float [ 1.000000e+00, %BB_24 ], [ %28, %BB_26 ]
    %33 = phi float [ 0.000000e+00, %BB_24 ], [ %69, %BB_26 ]
    %34 = icmp eq i64 %25, 0
    br i1 %34, label %BB_29, label %BB_28
  
  BB_28:                                            ; preds = %BB_27
    %35 = getelementptr inbounds i32, ptr %19, i64 %31
    %36 = load i32, ptr %35, align 4, !tbaa !9
    %37 = getelementptr inbounds i32, ptr %17, i64 %31
    %38 = load i32, ptr %37, align 4, !tbaa !9
    %39 = icmp eq i32 %36, %38
    %40 = fadd float %33, 1.000000e+00
    %41 = select i1 %39, float %40, float %33
    br label %BB_29
  
  BB_29:                                            ; preds = %BB_28, %BB_27, %BB_23
    %42 = phi float [ 0.000000e+00, %BB_23 ], [ %30, %BB_27 ], [ %41, %BB_28 ]
    %43 = phi float [ 0.000000e+00, %BB_23 ], [ %29, %BB_27 ], [ %32, %BB_28 ]
    %44 = icmp sgt i32 %22, 0
    br i1 %44, label %BB_30, label %BB_36
  
  BB_30:                                            ; preds = %BB_29
    %45 = zext i32 %22 to i64
    %46 = and i64 %45, 1
    %47 = icmp eq i32 %22, 1
    br i1 %47, label %BB_34, label %BB_31
  
  BB_31:                                            ; preds = %BB_30
    %48 = and i64 %45, 4294967294
    br label %BB_33
  
  BB_32:                                            ; preds = %BB_32, %BB_25
    %49 = phi i64 [ 0, %BB_25 ], [ %70, %BB_32 ]
    %50 = phi float [ 0.000000e+00, %BB_25 ], [ %62, %BB_32 ]
    %51 = phi float [ 0.000000e+00, %BB_25 ], [ %69, %BB_32 ]
    %52 = phi i64 [ 0, %BB_25 ], [ %71, %BB_32 ]
    %53 = fadd float %50, 1.000000e+00
    %54 = getelementptr inbounds i32, ptr %19, i64 %49
    %55 = load i32, ptr %54, align 4, !tbaa !9
    %56 = getelementptr inbounds i32, ptr %17, i64 %49
    %57 = load i32, ptr %56, align 4, !tbaa !9
    %58 = icmp eq i32 %55, %57
    %59 = fadd float %51, 1.000000e+00
    %60 = select i1 %58, float %59, float %51
    %61 = or i64 %49, 1
    %62 = fadd float %53, 1.000000e+00
    %63 = getelementptr inbounds i32, ptr %19, i64 %61
    %64 = load i32, ptr %63, align 4, !tbaa !9
    %65 = getelementptr inbounds i32, ptr %17, i64 %61
    %66 = load i32, ptr %65, align 4, !tbaa !9
    %67 = icmp eq i32 %64, %66
    %68 = fadd float %60, 1.000000e+00
    %69 = select i1 %67, float %68, float %60
    %70 = add nuw nsw i64 %49, 2
    %71 = add i64 %52, 2
    %72 = icmp eq i64 %71, %27
    br i1 %72, label %BB_26, label %BB_32
  
  BB_33:                                            ; preds = %BB_33, %BB_31
    %73 = phi i64 [ 0, %BB_31 ], [ %94, %BB_33 ]
    %74 = phi float [ %43, %BB_31 ], [ %86, %BB_33 ]
    %75 = phi float [ %42, %BB_31 ], [ %93, %BB_33 ]
    %76 = phi i64 [ 0, %BB_31 ], [ %95, %BB_33 ]
    %77 = fadd float %74, 1.000000e+00
    %78 = getelementptr inbounds i32, ptr %18, i64 %73
    %79 = load i32, ptr %78, align 4, !tbaa !9
    %80 = getelementptr inbounds i32, ptr %20, i64 %73
    %81 = load i32, ptr %80, align 4, !tbaa !9
    %82 = icmp eq i32 %79, %81
    %83 = fadd float %75, 1.000000e+00
    %84 = select i1 %82, float %83, float %75
    %85 = or i64 %73, 1
    %86 = fadd float %77, 1.000000e+00
    %87 = getelementptr inbounds i32, ptr %18, i64 %85
    %88 = load i32, ptr %87, align 4, !tbaa !9
    %89 = getelementptr inbounds i32, ptr %20, i64 %85
    %90 = load i32, ptr %89, align 4, !tbaa !9
    %91 = icmp eq i32 %88, %90
    %92 = fadd float %84, 1.000000e+00
    %93 = select i1 %91, float %92, float %84
    %94 = add nuw nsw i64 %73, 2
    %95 = add i64 %76, 2
    %96 = icmp eq i64 %95, %48
    br i1 %96, label %BB_34, label %BB_33
  
  BB_34:                                            ; preds = %BB_33, %BB_30
    %97 = phi float [ undef, %BB_30 ], [ %86, %BB_33 ]
    %98 = phi float [ undef, %BB_30 ], [ %93, %BB_33 ]
    %99 = phi i64 [ 0, %BB_30 ], [ %94, %BB_33 ]
    %100 = phi float [ %43, %BB_30 ], [ %86, %BB_33 ]
    %101 = phi float [ %42, %BB_30 ], [ %93, %BB_33 ]
    %102 = icmp eq i64 %46, 0
    br i1 %102, label %BB_36, label %BB_35
  
  BB_35:                                            ; preds = %BB_34
    %103 = fadd float %100, 1.000000e+00
    %104 = getelementptr inbounds i32, ptr %18, i64 %99
    %105 = load i32, ptr %104, align 4, !tbaa !9
    %106 = getelementptr inbounds i32, ptr %20, i64 %99
    %107 = load i32, ptr %106, align 4, !tbaa !9
    %108 = icmp eq i32 %105, %107
    %109 = fadd float %101, 1.000000e+00
    %110 = select i1 %108, float %109, float %101
    br label %BB_36
  
  BB_36:                                            ; preds = %BB_35, %BB_34, %BB_29
    %111 = phi float [ %42, %BB_29 ], [ %98, %BB_34 ], [ %110, %BB_35 ]
    %112 = phi float [ %43, %BB_29 ], [ %97, %BB_34 ], [ %103, %BB_35 ]
    %113 = bitcast ptr %20 to ptr
    %114 = bitcast ptr %19 to ptr
    %115 = bitcast ptr %18 to ptr
    %116 = bitcast ptr %17 to ptr
    %117 = fdiv float %111, %112
    tail call void @free(ptr noundef %116) #8
    tail call void @free(ptr noundef %115) #8
    tail call void @free(ptr noundef %114) #8
    tail call void @free(ptr noundef %113) #8
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %16) #8
    call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %15) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %14) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %13) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %12) #8
    call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %11) #8
    ret float %117
  }
  
  ; Function Attrs: nounwind uwtable
  define internal fastcc void @make_ref_alilist(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef writeonly %5) unnamed_addr #0 {
  BB_37:
    %6 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #9
    %7 = shl i64 %6, 2
    %8 = tail call ptr @sre_malloc(ptr noundef @.str, i32 noundef 236, i64 noundef %7) #8
    %9 = tail call i64 @strlen(ptr noundef nonnull dereferenceable(1) %2) #9
    %10 = shl i64 %9, 2
    %11 = tail call ptr @sre_malloc(ptr noundef @.str, i32 noundef 237, i64 noundef %10) #8
    %12 = bitcast ptr %11 to ptr
    br label %BB_38
  
  BB_38:                                            ; preds = %BB_41, %BB_37
    %13 = phi i64 [ %26, %BB_41 ], [ 0, %BB_37 ]
    %14 = phi i32 [ %25, %BB_41 ], [ 0, %BB_37 ]
    %15 = getelementptr inbounds i8, ptr %1, i64 %13
    %16 = load i8, ptr %15, align 1, !tbaa !11
    switch i8 %16, label %BB_40 [
      i8 0, label %BB_39
      i8 32, label %BB_41
      i8 46, label %BB_41
      i8 95, label %BB_41
      i8 45, label %BB_41
      i8 126, label %BB_41
    ]
  
  BB_39:                                            ; preds = %BB_38
    %17 = bitcast ptr %8 to ptr
    br label %BB_42
  
  BB_40:                                            ; preds = %BB_38
    %18 = getelementptr inbounds i32, ptr %0, i64 %13
    %19 = load i32, ptr %18, align 4, !tbaa !9
    %20 = icmp ne i32 %19, 0
    %21 = zext i1 %20 to i32
    %22 = sext i32 %14 to i64
    %23 = getelementptr inbounds i32, ptr %12, i64 %22
    store i32 %21, ptr %23, align 4, !tbaa !9
    %24 = add nsw i32 %14, 1
    br label %BB_41
  
  BB_41:                                            ; preds = %BB_40, %BB_38, %BB_38, %BB_38, %BB_38, %BB_38
    %25 = phi i32 [ %24, %BB_40 ], [ %14, %BB_38 ], [ %14, %BB_38 ], [ %14, %BB_38 ], [ %14, %BB_38 ], [ %14, %BB_38 ]
    %26 = add nuw i64 %13, 1
    br label %BB_38
  
  BB_42:                                            ; preds = %BB_51, %BB_39
    %27 = phi i64 [ 0, %BB_39 ], [ %54, %BB_51 ]
    %28 = phi i32 [ 0, %BB_39 ], [ %49, %BB_51 ]
    %29 = phi i32 [ 0, %BB_39 ], [ %53, %BB_51 ]
    %30 = phi i32 [ 0, %BB_39 ], [ %47, %BB_51 ]
    %31 = getelementptr inbounds i8, ptr %2, i64 %27
    %32 = load i8, ptr %31, align 1, !tbaa !11
    switch i8 %32, label %BB_43 [
      i8 0, label %BB_52
      i8 32, label %BB_47
      i8 46, label %BB_47
      i8 95, label %BB_47
      i8 45, label %BB_47
      i8 126, label %BB_47
    ]
  
  BB_43:                                            ; preds = %BB_42
    %33 = sext i32 %28 to i64
    %34 = getelementptr inbounds i32, ptr %12, i64 %33
    %35 = load i32, ptr %34, align 4, !tbaa !9
    %36 = icmp eq i32 %35, 0
    br i1 %36, label %BB_47, label %BB_44
  
  BB_44:                                            ; preds = %BB_43
    %37 = getelementptr inbounds i8, ptr %3, i64 %27
    %38 = load i8, ptr %37, align 1, !tbaa !11
    switch i8 %38, label %BB_45 [
      i8 32, label %BB_46
      i8 46, label %BB_46
      i8 95, label %BB_46
      i8 45, label %BB_46
    ]
  
  BB_45:                                            ; preds = %BB_44
    %39 = icmp eq i8 %38, 126
    %40 = select i1 %39, i32 -1, i32 %29
    br label %BB_46
  
  BB_46:                                            ; preds = %BB_45, %BB_44, %BB_44, %BB_44, %BB_44
    %41 = phi i32 [ -1, %BB_44 ], [ %40, %BB_45 ], [ -1, %BB_44 ], [ -1, %BB_44 ], [ -1, %BB_44 ]
    %42 = sext i32 %30 to i64
    %43 = getelementptr inbounds i32, ptr %17, i64 %42
    store i32 %41, ptr %43, align 4, !tbaa !9
    %44 = add nsw i32 %30, 1
    %45 = load i8, ptr %31, align 1, !tbaa !11
    br label %BB_47
  
  BB_47:                                            ; preds = %BB_46, %BB_43, %BB_42, %BB_42, %BB_42, %BB_42, %BB_42
    %46 = phi i8 [ %32, %BB_42 ], [ %32, %BB_42 ], [ %32, %BB_42 ], [ %32, %BB_42 ], [ %32, %BB_42 ], [ %32, %BB_43 ], [ %45, %BB_46 ]
    %47 = phi i32 [ %30, %BB_42 ], [ %30, %BB_42 ], [ %30, %BB_42 ], [ %30, %BB_42 ], [ %30, %BB_42 ], [ %30, %BB_43 ], [ %44, %BB_46 ]
    switch i8 %46, label %BB_48 [
      i8 32, label %BB_49
      i8 46, label %BB_49
      i8 95, label %BB_49
      i8 45, label %BB_49
      i8 126, label %BB_49
    ]
  
  BB_48:                                            ; preds = %BB_47
    %48 = add nsw i32 %28, 1
    br label %BB_49
  
  BB_49:                                            ; preds = %BB_48, %BB_47, %BB_47, %BB_47, %BB_47, %BB_47
    %49 = phi i32 [ %28, %BB_47 ], [ %48, %BB_48 ], [ %28, %BB_47 ], [ %28, %BB_47 ], [ %28, %BB_47 ], [ %28, %BB_47 ]
    %50 = getelementptr inbounds i8, ptr %3, i64 %27
    %51 = load i8, ptr %50, align 1, !tbaa !11
    switch i8 %51, label %BB_50 [
      i8 32, label %BB_51
      i8 46, label %BB_51
      i8 95, label %BB_51
      i8 45, label %BB_51
      i8 126, label %BB_51
    ]
  
  BB_50:                                            ; preds = %BB_49
    %52 = add nsw i32 %29, 1
    br label %BB_51
  
  BB_51:                                            ; preds = %BB_50, %BB_49, %BB_49, %BB_49, %BB_49, %BB_49
    %53 = phi i32 [ %29, %BB_49 ], [ %52, %BB_50 ], [ %29, %BB_49 ], [ %29, %BB_49 ], [ %29, %BB_49 ], [ %29, %BB_49 ]
    %54 = add nuw i64 %27, 1
    br label %BB_42
  
  BB_52:                                            ; preds = %BB_42
    tail call void @free(ptr noundef %11) #8
    store i32 %30, ptr %5, align 4, !tbaa !9
    %55 = bitcast ptr %4 to ptr
    store ptr %8, ptr %55, align 8, !tbaa !5
    ret void
  }
  
  ; Function Attrs: nounwind uwtable
  define dso_local float @CompareMultAlignments(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, i32 noundef %2) local_unnamed_addr #0 {
  BB_53:
    %3 = icmp sgt i32 %2, 0
    br i1 %3, label %BB_54, label %BB_60
  
  BB_54:                                            ; preds = %BB_53
    %4 = zext i32 %2 to i64
    %5 = zext i32 %2 to i64
    br label %BB_56
  
  BB_55:                                            ; preds = %BB_59, %BB_56
    %6 = phi float [ %11, %BB_56 ], [ %26, %BB_59 ]
    %7 = add nuw nsw i64 %10, 1
    %8 = icmp eq i64 %12, %5
    br i1 %8, label %BB_60, label %BB_56
  
  BB_56:                                            ; preds = %BB_55, %BB_54
    %9 = phi i64 [ 0, %BB_54 ], [ %12, %BB_55 ]
    %10 = phi i64 [ 1, %BB_54 ], [ %7, %BB_55 ]
    %11 = phi float [ 0.000000e+00, %BB_54 ], [ %6, %BB_55 ]
    %12 = add nuw nsw i64 %9, 1
    %13 = icmp ult i64 %12, %4
    br i1 %13, label %BB_57, label %BB_55
  
  BB_57:                                            ; preds = %BB_56
    %14 = getelementptr inbounds ptr, ptr %0, i64 %9
    %15 = getelementptr inbounds ptr, ptr %1, i64 %9
    br label %BB_58
  
  BB_58:                                            ; preds = %BB_59, %BB_57
    %16 = phi i64 [ %10, %BB_57 ], [ %27, %BB_59 ]
    %17 = phi float [ %11, %BB_57 ], [ %26, %BB_59 ]
    %18 = load ptr, ptr %14, align 8, !tbaa !5
    %19 = getelementptr inbounds ptr, ptr %0, i64 %16
    %20 = load ptr, ptr %19, align 8, !tbaa !5
    %21 = load ptr, ptr %15, align 8, !tbaa !5
    %22 = getelementptr inbounds ptr, ptr %1, i64 %16
    %23 = load ptr, ptr %22, align 8, !tbaa !5
    %24 = tail call float @ComparePairAlignments(ptr noundef %18, ptr noundef %20, ptr noundef %21, ptr noundef %23)
    %25 = fcmp olt float %24, 0.000000e+00
    br i1 %25, label %BB_61, label %BB_59
  
  BB_59:                                            ; preds = %BB_58
    %26 = fadd float %17, %24
    %27 = add nuw nsw i64 %16, 1
    %28 = icmp eq i64 %27, %5
    br i1 %28, label %BB_55, label %BB_58
  
  BB_60:                                            ; preds = %BB_55, %BB_53
    %29 = phi float [ 0.000000e+00, %BB_53 ], [ %6, %BB_55 ]
    %30 = fpext float %29 to double
    %31 = fmul double %30, 2.000000e+00
    %32 = sitofp i32 %2 to float
    %33 = fpext float %32 to double
    %34 = fadd double %33, -1.000000e+00
    %35 = fmul double %34, %33
    %36 = fdiv double %31, %35
    %37 = fptrunc double %36 to float
    br label %BB_61
  
  BB_61:                                            ; preds = %BB_60, %BB_58
    %38 = phi float [ %37, %BB_60 ], [ -1.000000e+00, %BB_58 ]
    ret float %38
  }
  
  ; Function Attrs: nounwind uwtable
  define dso_local float @CompareRefMultAlignments(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2, i32 noundef %3) local_unnamed_addr #0 {
  BB_62:
    %4 = icmp sgt i32 %3, 0
    br i1 %4, label %BB_63, label %BB_69
  
  BB_63:                                            ; preds = %BB_62
    %5 = zext i32 %3 to i64
    %6 = zext i32 %3 to i64
    br label %BB_65
  
  BB_64:                                            ; preds = %BB_68, %BB_65
    %7 = phi float [ %12, %BB_65 ], [ %27, %BB_68 ]
    %8 = add nuw nsw i64 %11, 1
    %9 = icmp eq i64 %13, %6
    br i1 %9, label %BB_69, label %BB_65
  
  BB_65:                                            ; preds = %BB_64, %BB_63
    %10 = phi i64 [ 0, %BB_63 ], [ %13, %BB_64 ]
    %11 = phi i64 [ 1, %BB_63 ], [ %8, %BB_64 ]
    %12 = phi float [ 0.000000e+00, %BB_63 ], [ %7, %BB_64 ]
    %13 = add nuw nsw i64 %10, 1
    %14 = icmp ult i64 %13, %5
    br i1 %14, label %BB_66, label %BB_64
  
  BB_66:                                            ; preds = %BB_65
    %15 = getelementptr inbounds ptr, ptr %1, i64 %10
    %16 = getelementptr inbounds ptr, ptr %2, i64 %10
    br label %BB_67
  
  BB_67:                                            ; preds = %BB_68, %BB_66
    %17 = phi i64 [ %11, %BB_66 ], [ %28, %BB_68 ]
    %18 = phi float [ %12, %BB_66 ], [ %27, %BB_68 ]
    %19 = load ptr, ptr %15, align 8, !tbaa !5
    %20 = getelementptr inbounds ptr, ptr %1, i64 %17
    %21 = load ptr, ptr %20, align 8, !tbaa !5
    %22 = load ptr, ptr %16, align 8, !tbaa !5
    %23 = getelementptr inbounds ptr, ptr %2, i64 %17
    %24 = load ptr, ptr %23, align 8, !tbaa !5
    %25 = tail call float @CompareRefPairAlignments(ptr noundef %0, ptr noundef %19, ptr noundef %21, ptr noundef %22, ptr noundef %24)
    %26 = fcmp olt float %25, 0.000000e+00
    br i1 %26, label %BB_70, label %BB_68
  
  BB_68:                                            ; preds = %BB_67
    %27 = fadd float %18, %25
    %28 = add nuw nsw i64 %17, 1
    %29 = icmp eq i64 %28, %6
    br i1 %29, label %BB_64, label %BB_67
  
  BB_69:                                            ; preds = %BB_64, %BB_62
    %30 = phi float [ 0.000000e+00, %BB_62 ], [ %7, %BB_64 ]
    %31 = fpext float %30 to double
    %32 = fmul double %31, 2.000000e+00
    %33 = sitofp i32 %3 to float
    %34 = fpext float %33 to double
    %35 = fadd double %34, -1.000000e+00
    %36 = fmul double %35, %34
    %37 = fdiv double %32, %36
    %38 = fptrunc double %37 to float
    br label %BB_70
  
  BB_70:                                            ; preds = %BB_69, %BB_67
    %39 = phi float [ %38, %BB_69 ], [ -1.000000e+00, %BB_67 ]
    ret float %39
  }
  
  ; Function Attrs: nofree norecurse nosync nounwind memory(read) uwtable
  define dso_local float @PairwiseIdentity(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #2 {
  BB_71:
    %2 = load i8, ptr %0, align 1, !tbaa !11
    %3 = icmp eq i8 %2, 0
    br i1 %3, label %BB_78, label %BB_72
  
  BB_72:                                            ; preds = %BB_77, %BB_71
    %4 = phi i64 [ %20, %BB_77 ], [ 0, %BB_71 ]
    %5 = phi i8 [ %22, %BB_77 ], [ %2, %BB_71 ]
    %6 = phi i32 [ %19, %BB_77 ], [ 0, %BB_71 ]
    %7 = phi i32 [ %17, %BB_77 ], [ 0, %BB_71 ]
    %8 = phi i32 [ %16, %BB_77 ], [ 0, %BB_71 ]
    %9 = getelementptr inbounds i8, ptr %1, i64 %4
    %10 = load i8, ptr %9, align 1, !tbaa !11
    %11 = icmp eq i8 %10, 0
    br i1 %11, label %BB_78, label %BB_73
  
  BB_73:                                            ; preds = %BB_72
    switch i8 %5, label %BB_74 [
      i8 32, label %BB_75
      i8 46, label %BB_75
      i8 95, label %BB_75
      i8 45, label %BB_75
      i8 126, label %BB_75
    ]
  
  BB_74:                                            ; preds = %BB_73
    %12 = add nsw i32 %7, 1
    %13 = icmp eq i8 %5, %10
    %14 = zext i1 %13 to i32
    %15 = add nsw i32 %8, %14
    br label %BB_75
  
  BB_75:                                            ; preds = %BB_74, %BB_73, %BB_73, %BB_73, %BB_73, %BB_73
    %16 = phi i32 [ %8, %BB_73 ], [ %8, %BB_73 ], [ %8, %BB_73 ], [ %8, %BB_73 ], [ %8, %BB_73 ], [ %15, %BB_74 ]
    %17 = phi i32 [ %7, %BB_73 ], [ %7, %BB_73 ], [ %7, %BB_73 ], [ %7, %BB_73 ], [ %7, %BB_73 ], [ %12, %BB_74 ]
    switch i8 %10, label %BB_76 [
      i8 32, label %BB_77
      i8 46, label %BB_77
      i8 95, label %BB_77
      i8 45, label %BB_77
      i8 126, label %BB_77
    ]
  
  BB_76:                                            ; preds = %BB_75
    %18 = add nsw i32 %6, 1
    br label %BB_77
  
  BB_77:                                            ; preds = %BB_76, %BB_75, %BB_75, %BB_75, %BB_75, %BB_75
    %19 = phi i32 [ %6, %BB_75 ], [ %18, %BB_76 ], [ %6, %BB_75 ], [ %6, %BB_75 ], [ %6, %BB_75 ], [ %6, %BB_75 ]
    %20 = add nuw i64 %4, 1
    %21 = getelementptr inbounds i8, ptr %0, i64 %20
    %22 = load i8, ptr %21, align 1, !tbaa !11
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %BB_78, label %BB_72
  
  BB_78:                                            ; preds = %BB_77, %BB_72, %BB_71
    %24 = phi i32 [ 0, %BB_71 ], [ %16, %BB_77 ], [ %8, %BB_72 ]
    %25 = phi i32 [ 0, %BB_71 ], [ %17, %BB_77 ], [ %7, %BB_72 ]
    %26 = phi i32 [ 0, %BB_71 ], [ %19, %BB_77 ], [ %6, %BB_72 ]
    %27 = icmp slt i32 %26, %25
    %28 = select i1 %27, i32 %26, i32 %25
    %29 = icmp eq i32 %28, 0
    br i1 %29, label %BB_80, label %BB_79
  
  BB_79:                                            ; preds = %BB_78
    %30 = sitofp i32 %24 to float
    %31 = sitofp i32 %28 to float
    %32 = fdiv float %30, %31
    br label %BB_80
  
  BB_80:                                            ; preds = %BB_79, %BB_78
    %33 = phi float [ %32, %BB_79 ], [ 0.000000e+00, %BB_78 ]
    ret float %33
  }
  
  ; Function Attrs: nounwind uwtable
  define dso_local float @AlignmentIdentityBySampling(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2, i32 noundef %3) local_unnamed_addr #0 {
  BB_81:
    %4 = icmp slt i32 %2, 2
    br i1 %4, label %BB_97, label %BB_82
  
  BB_82:                                            ; preds = %BB_81
    %5 = icmp sgt i32 %3, 0
    br i1 %5, label %BB_83, label %BB_96
  
  BB_83:                                            ; preds = %BB_82
    %6 = sitofp i32 %2 to double
    br label %BB_84
  
  BB_84:                                            ; preds = %BB_95, %BB_83
    %7 = phi float [ 0.000000e+00, %BB_83 ], [ %54, %BB_95 ]
    %8 = phi i32 [ 0, %BB_83 ], [ %55, %BB_95 ]
    %9 = tail call double @sre_random() #8
    %10 = fmul double %9, %6
    %11 = fptosi double %10 to i32
    br label %BB_85
  
  BB_85:                                            ; preds = %BB_85, %BB_84
    %12 = tail call double @sre_random() #8
    %13 = fmul double %12, %6
    %14 = fptosi double %13 to i32
    %15 = icmp eq i32 %14, %11
    br i1 %15, label %BB_85, label %BB_86
  
  BB_86:                                            ; preds = %BB_85
    %16 = sext i32 %11 to i64
    %17 = getelementptr inbounds ptr, ptr %0, i64 %16
    %18 = load ptr, ptr %17, align 8, !tbaa !5
    %19 = sext i32 %14 to i64
    %20 = getelementptr inbounds ptr, ptr %0, i64 %19
    %21 = load ptr, ptr %20, align 8, !tbaa !5
    %22 = load i8, ptr %18, align 1, !tbaa !11
    %23 = icmp eq i8 %22, 0
    br i1 %23, label %BB_93, label %BB_87
  
  BB_87:                                            ; preds = %BB_92, %BB_86
    %24 = phi i64 [ %40, %BB_92 ], [ 0, %BB_86 ]
    %25 = phi i8 [ %42, %BB_92 ], [ %22, %BB_86 ]
    %26 = phi i32 [ %39, %BB_92 ], [ 0, %BB_86 ]
    %27 = phi i32 [ %37, %BB_92 ], [ 0, %BB_86 ]
    %28 = phi i32 [ %36, %BB_92 ], [ 0, %BB_86 ]
    %29 = getelementptr inbounds i8, ptr %21, i64 %24
    %30 = load i8, ptr %29, align 1, !tbaa !11
    %31 = icmp eq i8 %30, 0
    br i1 %31, label %BB_93, label %BB_88
  
  BB_88:                                            ; preds = %BB_87
    switch i8 %25, label %BB_89 [
      i8 32, label %BB_90
      i8 46, label %BB_90
      i8 95, label %BB_90
      i8 45, label %BB_90
      i8 126, label %BB_90
    ]
  
  BB_89:                                            ; preds = %BB_88
    %32 = add nsw i32 %27, 1
    %33 = icmp eq i8 %25, %30
    %34 = zext i1 %33 to i32
    %35 = add nsw i32 %28, %34
    br label %BB_90
  
  BB_90:                                            ; preds = %BB_89, %BB_88, %BB_88, %BB_88, %BB_88, %BB_88
    %36 = phi i32 [ %28, %BB_88 ], [ %28, %BB_88 ], [ %28, %BB_88 ], [ %28, %BB_88 ], [ %28, %BB_88 ], [ %35, %BB_89 ]
    %37 = phi i32 [ %27, %BB_88 ], [ %27, %BB_88 ], [ %27, %BB_88 ], [ %27, %BB_88 ], [ %27, %BB_88 ], [ %32, %BB_89 ]
    switch i8 %30, label %BB_91 [
      i8 32, label %BB_92
      i8 46, label %BB_92
      i8 95, label %BB_92
      i8 45, label %BB_92
      i8 126, label %BB_92
    ]
  
  BB_91:                                            ; preds = %BB_90
    %38 = add nsw i32 %26, 1
    br label %BB_92
  
  BB_92:                                            ; preds = %BB_91, %BB_90, %BB_90, %BB_90, %BB_90, %BB_90
    %39 = phi i32 [ %26, %BB_90 ], [ %38, %BB_91 ], [ %26, %BB_90 ], [ %26, %BB_90 ], [ %26, %BB_90 ], [ %26, %BB_90 ]
    %40 = add nuw i64 %24, 1
    %41 = getelementptr inbounds i8, ptr %18, i64 %40
    %42 = load i8, ptr %41, align 1, !tbaa !11
    %43 = icmp eq i8 %42, 0
    br i1 %43, label %BB_93, label %BB_87
  
  BB_93:                                            ; preds = %BB_92, %BB_87, %BB_86
    %44 = phi i32 [ 0, %BB_86 ], [ %28, %BB_87 ], [ %36, %BB_92 ]
    %45 = phi i32 [ 0, %BB_86 ], [ %27, %BB_87 ], [ %37, %BB_92 ]
    %46 = phi i32 [ 0, %BB_86 ], [ %26, %BB_87 ], [ %39, %BB_92 ]
    %47 = icmp slt i32 %46, %45
    %48 = select i1 %47, i32 %46, i32 %45
    %49 = icmp eq i32 %48, 0
    br i1 %49, label %BB_95, label %BB_94
  
  BB_94:                                            ; preds = %BB_93
    %50 = sitofp i32 %44 to float
    %51 = sitofp i32 %48 to float
    %52 = fdiv float %50, %51
    br label %BB_95
  
  BB_95:                                            ; preds = %BB_94, %BB_93
    %53 = phi float [ %52, %BB_94 ], [ 0.000000e+00, %BB_93 ]
    %54 = fadd float %7, %53
    %55 = add nuw nsw i32 %8, 1
    %56 = icmp eq i32 %55, %3
    br i1 %56, label %BB_96, label %BB_84
  
  BB_96:                                            ; preds = %BB_95, %BB_82
    %57 = phi float [ 0.000000e+00, %BB_82 ], [ %54, %BB_95 ]
    %58 = sitofp i32 %3 to float
    %59 = fdiv float %57, %58
    br label %BB_97
  
  BB_97:                                            ; preds = %BB_96, %BB_81
    %60 = phi float [ %59, %BB_96 ], [ 1.000000e+00, %BB_81 ]
    ret float %60
  }
  
  declare double @sre_random() local_unnamed_addr #3
  
  ; Function Attrs: nounwind uwtable
  define dso_local ptr @MajorityRuleConsensus(ptr nocapture noundef readonly %0, i32 noundef %1, i32 noundef %2) local_unnamed_addr #0 {
  BB_98:
    %3 = alloca [27 x i32], align 16
    %4 = bitcast ptr %3 to ptr
    call void @llvm.lifetime.start.p0(i64 108, ptr nonnull %4) #8
    %5 = add nsw i32 %2, 1
    %6 = sext i32 %5 to i64
    %7 = tail call ptr @sre_malloc(ptr noundef @.str, i32 noundef 485, i64 noundef %6) #8
    %8 = icmp sgt i32 %2, 0
    br i1 %8, label %BB_99, label %BB_110
  
  BB_99:                                            ; preds = %BB_98
    %9 = icmp sgt i32 %1, 0
    %10 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 26
    %11 = sitofp i32 %1 to float
    %12 = zext i32 %2 to i64
    %13 = zext i32 %1 to i64
    %14 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 0
    %15 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 1
    %16 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 2
    %17 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 3
    %18 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 4
    %19 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 5
    %20 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 6
    %21 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 7
    %22 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 8
    %23 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 9
    %24 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 10
    %25 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 11
    %26 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 12
    %27 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 13
    %28 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 14
    %29 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 15
    %30 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 16
    %31 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 17
    %32 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 18
    %33 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 19
    %34 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 20
    %35 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 21
    %36 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 22
    %37 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 23
    %38 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 24
    %39 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 25
    br label %BB_100
  
  BB_100:                                           ; preds = %BB_109, %BB_99
    %40 = phi i64 [ 0, %BB_99 ], [ %179, %BB_109 ]
    %41 = phi i32 [ 0, %BB_99 ], [ %178, %BB_109 ]
    call void @llvm.memset.p0.i64(ptr noundef nonnull align 16 dereferenceable(108) %4, i8 0, i64 108, i1 false), !tbaa !9
    br i1 %9, label %BB_101, label %BB_107
  
  BB_101:                                           ; preds = %BB_100
    %42 = tail call ptr @__ctype_b_loc() #10
    %43 = load ptr, ptr %42, align 8, !tbaa !5
    br label %BB_102
  
  BB_102:                                           ; preds = %BB_105, %BB_101
    %44 = phi i64 [ 0, %BB_101 ], [ %65, %BB_105 ]
    %45 = getelementptr inbounds ptr, ptr %0, i64 %44
    %46 = load ptr, ptr %45, align 8, !tbaa !5
    %47 = getelementptr inbounds i8, ptr %46, i64 %40
    %48 = load i8, ptr %47, align 1, !tbaa !11
    %49 = sext i8 %48 to i64
    %50 = getelementptr inbounds i16, ptr %43, i64 %49
    %51 = load i16, ptr %50, align 2, !tbaa !12
    %52 = and i16 %51, 1024
    %53 = icmp eq i16 %52, 0
    br i1 %53, label %BB_104, label %BB_103
  
  BB_103:                                           ; preds = %BB_102
    %54 = tail call ptr @__ctype_toupper_loc() #10
    %55 = load ptr, ptr %54, align 8, !tbaa !5
    %56 = getelementptr inbounds i32, ptr %55, i64 %49
    %57 = load i32, ptr %56, align 4, !tbaa !9
    %58 = add nsw i32 %57, -65
    %59 = sext i32 %58 to i64
    %60 = getelementptr inbounds [27 x i32], ptr %3, i64 0, i64 %59
    %61 = load i32, ptr %60, align 4, !tbaa !9
    %62 = add nsw i32 %61, 1
    store i32 %62, ptr %60, align 4, !tbaa !9
    br label %BB_105
  
  BB_104:                                           ; preds = %BB_102
    %63 = load i32, ptr %10, align 8, !tbaa !9
    %64 = add nsw i32 %63, 1
    store i32 %64, ptr %10, align 8, !tbaa !9
    br label %BB_105
  
  BB_105:                                           ; preds = %BB_104, %BB_103
    %65 = add nuw nsw i64 %44, 1
    %66 = icmp eq i64 %65, %13
    br i1 %66, label %BB_106, label %BB_102
  
  BB_106:                                           ; preds = %BB_105
    %67 = load i32, ptr %10, align 8, !tbaa !9
    br label %BB_107
  
  BB_107:                                           ; preds = %BB_106, %BB_100
    %68 = phi i32 [ %67, %BB_106 ], [ 0, %BB_100 ]
    %69 = sitofp i32 %68 to float
    %70 = fdiv float %69, %11
    %71 = fcmp ugt float %70, 5.000000e-01
    br i1 %71, label %BB_109, label %BB_108
  
  BB_108:                                           ; preds = %BB_107
    %72 = load i32, ptr %14, align 16, !tbaa !9
    %73 = icmp sgt i32 %72, -1
    %74 = select i1 %73, i32 %72, i32 -1
    %75 = load i32, ptr %15, align 4, !tbaa !9
    %76 = icmp sgt i32 %75, %74
    %77 = select i1 %76, i32 %75, i32 %74
    %78 = load i32, ptr %16, align 8, !tbaa !9
    %79 = icmp sgt i32 %78, %77
    %80 = select i1 %79, i32 %78, i32 %77
    %81 = load i32, ptr %17, align 4, !tbaa !9
    %82 = icmp sgt i32 %81, %80
    %83 = select i1 %82, i32 %81, i32 %80
    %84 = load i32, ptr %18, align 16, !tbaa !9
    %85 = icmp sgt i32 %84, %83
    %86 = select i1 %85, i32 %84, i32 %83
    %87 = load i32, ptr %19, align 4, !tbaa !9
    %88 = icmp sgt i32 %87, %86
    %89 = select i1 %88, i32 %87, i32 %86
    %90 = load i32, ptr %20, align 8, !tbaa !9
    %91 = icmp sgt i32 %90, %89
    %92 = select i1 %91, i32 %90, i32 %89
    %93 = load i32, ptr %21, align 4, !tbaa !9
    %94 = icmp sgt i32 %93, %92
    %95 = select i1 %94, i32 %93, i32 %92
    %96 = load i32, ptr %22, align 16, !tbaa !9
    %97 = icmp sgt i32 %96, %95
    %98 = select i1 %97, i32 %96, i32 %95
    %99 = load i32, ptr %23, align 4, !tbaa !9
    %100 = icmp sgt i32 %99, %98
    %101 = select i1 %100, i32 %99, i32 %98
    %102 = load i32, ptr %24, align 8, !tbaa !9
    %103 = icmp sgt i32 %102, %101
    %104 = select i1 %103, i32 %102, i32 %101
    %105 = load i32, ptr %25, align 4, !tbaa !9
    %106 = icmp sgt i32 %105, %104
    %107 = select i1 %106, i32 %105, i32 %104
    %108 = load i32, ptr %26, align 16, !tbaa !9
    %109 = icmp sgt i32 %108, %107
    %110 = select i1 %109, i32 %108, i32 %107
    %111 = load i32, ptr %27, align 4, !tbaa !9
    %112 = icmp sgt i32 %111, %110
    %113 = select i1 %112, i32 %111, i32 %110
    %114 = load i32, ptr %28, align 8, !tbaa !9
    %115 = icmp sgt i32 %114, %113
    %116 = select i1 %115, i32 %114, i32 %113
    %117 = load i32, ptr %29, align 4, !tbaa !9
    %118 = icmp sgt i32 %117, %116
    %119 = select i1 %118, i32 %117, i32 %116
    %120 = load i32, ptr %30, align 16, !tbaa !9
    %121 = icmp sgt i32 %120, %119
    %122 = select i1 %121, i32 %120, i32 %119
    %123 = load i32, ptr %31, align 4, !tbaa !9
    %124 = icmp sgt i32 %123, %122
    %125 = select i1 %124, i32 %123, i32 %122
    %126 = load i32, ptr %32, align 8, !tbaa !9
    %127 = icmp sgt i32 %126, %125
    %128 = select i1 %127, i32 %126, i32 %125
    %129 = load i32, ptr %33, align 4, !tbaa !9
    %130 = icmp sgt i32 %129, %128
    %131 = select i1 %130, i32 %129, i32 %128
    %132 = load i32, ptr %34, align 16, !tbaa !9
    %133 = icmp sgt i32 %132, %131
    %134 = select i1 %133, i32 %132, i32 %131
    %135 = load i32, ptr %35, align 4, !tbaa !9
    %136 = icmp sgt i32 %135, %134
    %137 = select i1 %136, i32 %135, i32 %134
    %138 = load i32, ptr %36, align 8, !tbaa !9
    %139 = icmp sgt i32 %138, %137
    %140 = select i1 %139, i32 %138, i32 %137
    %141 = load i32, ptr %37, align 4, !tbaa !9
    %142 = icmp sgt i32 %141, %140
    %143 = select i1 %142, i32 %141, i32 %140
    %144 = load i32, ptr %38, align 16, !tbaa !9
    %145 = icmp sgt i32 %144, %143
    %146 = select i1 %145, i32 %144, i32 %143
    %147 = load i32, ptr %39, align 4, !tbaa !9
    %148 = icmp sgt i32 %147, %146
    %149 = select i1 %73, i8 65, i8 64
    %150 = select i1 %76, i8 66, i8 %149
    %151 = select i1 %79, i8 67, i8 %150
    %152 = select i1 %82, i8 68, i8 %151
    %153 = select i1 %85, i8 69, i8 %152
    %154 = select i1 %88, i8 70, i8 %153
    %155 = select i1 %91, i8 71, i8 %154
    %156 = select i1 %94, i8 72, i8 %155
    %157 = select i1 %97, i8 73, i8 %156
    %158 = select i1 %100, i8 74, i8 %157
    %159 = select i1 %103, i8 75, i8 %158
    %160 = select i1 %106, i8 76, i8 %159
    %161 = select i1 %109, i8 77, i8 %160
    %162 = select i1 %112, i8 78, i8 %161
    %163 = select i1 %115, i8 79, i8 %162
    %164 = select i1 %118, i8 80, i8 %163
    %165 = select i1 %121, i8 81, i8 %164
    %166 = select i1 %124, i8 82, i8 %165
    %167 = select i1 %127, i8 83, i8 %166
    %168 = select i1 %130, i8 84, i8 %167
    %169 = select i1 %133, i8 85, i8 %168
    %170 = select i1 %136, i8 86, i8 %169
    %171 = select i1 %139, i8 87, i8 %170
    %172 = select i1 %142, i8 88, i8 %171
    %173 = select i1 %145, i8 89, i8 %172
    %174 = select i1 %148, i8 90, i8 %173
    %175 = add nsw i32 %41, 1
    %176 = sext i32 %41 to i64
    %177 = getelementptr inbounds i8, ptr %7, i64 %176
    store i8 %174, ptr %177, align 1, !tbaa !11
    br label %BB_109
  
  BB_109:                                           ; preds = %BB_108, %BB_107
    %178 = phi i32 [ %175, %BB_108 ], [ %41, %BB_107 ]
    %179 = add nuw nsw i64 %40, 1
    %180 = icmp eq i64 %179, %12
    br i1 %180, label %BB_110, label %BB_100
  
  BB_110:                                           ; preds = %BB_109, %BB_98
    %181 = phi i32 [ 0, %BB_98 ], [ %178, %BB_109 ]
    %182 = sext i32 %181 to i64
    %183 = getelementptr inbounds i8, ptr %7, i64 %182
    store i8 0, ptr %183, align 1, !tbaa !11
    call void @llvm.lifetime.end.p0(i64 108, ptr nonnull %4) #8
    ret ptr %7
  }
  
  declare ptr @sre_malloc(ptr noundef, i32 noundef, i64 noundef) local_unnamed_addr #3
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
  declare ptr @__ctype_b_loc() local_unnamed_addr #4
  
  ; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
  declare ptr @__ctype_toupper_loc() local_unnamed_addr #4
  
  ; Function Attrs: mustprogress nofree nounwind willreturn memory(argmem: read)
  declare i64 @strlen(ptr nocapture noundef) local_unnamed_addr #5
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #6
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #6
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: write)
  declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #7
  
  attributes #0 = { nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { mustprogress nounwind willreturn memory(argmem: readwrite, inaccessiblemem: readwrite) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nofree norecurse nosync nounwind memory(read) uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #3 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #4 = { mustprogress nofree nosync nounwind willreturn memory(none) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #5 = { mustprogress nofree nounwind willreturn memory(argmem: read) "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #6 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #7 = { nocallback nofree nounwind willreturn memory(argmem: write) }
  attributes #8 = { nounwind }
  attributes #9 = { nounwind willreturn memory(read) }
  attributes #10 = { nounwind willreturn memory(none) }
  
  !llvm.module.flags = !{!0, !1, !2, !3}
  !llvm.ident = !{!4}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 8, !"PIC Level", i32 2}
  !2 = !{i32 7, !"PIE Level", i32 2}
  !3 = !{i32 7, !"uwtable", i32 1}
  !4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
  !5 = !{!6, !6, i64 0}
  !6 = !{!"any pointer", !7, i64 0}
  !7 = !{!"omnipotent char", !8, i64 0}
  !8 = !{!"Simple C/C++ TBAA"}
  !9 = !{!10, !10, i64 0}
  !10 = !{!"int", !7, i64 0}
  !11 = !{!7, !7, i64 0}
  !12 = !{!13, !13, i64 0}
  !13 = !{!"short", !7, i64 0}

...
---
name:            ComparePairAlignments
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: fr32, preferred-register: '' }
  - { id: 16, class: fr32, preferred-register: '' }
  - { id: 17, class: fr32, preferred-register: '' }
  - { id: 18, class: gr64_nosp, preferred-register: '' }
  - { id: 19, class: fr32, preferred-register: '' }
  - { id: 20, class: fr32, preferred-register: '' }
  - { id: 21, class: fr32, preferred-register: '' }
  - { id: 22, class: fr32, preferred-register: '' }
  - { id: 23, class: fr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64_nosp, preferred-register: '' }
  - { id: 28, class: fr32, preferred-register: '' }
  - { id: 29, class: fr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: fr32, preferred-register: '' }
  - { id: 32, class: fr32, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64_nosp, preferred-register: '' }
  - { id: 36, class: fr32, preferred-register: '' }
  - { id: 37, class: fr32, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: fr32, preferred-register: '' }
  - { id: 40, class: fr32, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: fr32, preferred-register: '' }
  - { id: 44, class: fr32, preferred-register: '' }
  - { id: 45, class: gr64_nosp, preferred-register: '' }
  - { id: 46, class: fr32, preferred-register: '' }
  - { id: 47, class: fr32, preferred-register: '' }
  - { id: 48, class: fr32, preferred-register: '' }
  - { id: 49, class: fr32, preferred-register: '' }
  - { id: 50, class: fr32, preferred-register: '' }
  - { id: 51, class: fr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: fr32, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: fr32, preferred-register: '' }
  - { id: 82, class: gr32, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: fr32, preferred-register: '' }
  - { id: 85, class: fr32, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr32, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr32, preferred-register: '' }
  - { id: 90, class: gr64, preferred-register: '' }
  - { id: 91, class: fr32, preferred-register: '' }
  - { id: 92, class: gr64, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr32, preferred-register: '' }
  - { id: 97, class: gr32, preferred-register: '' }
  - { id: 98, class: fr32, preferred-register: '' }
  - { id: 99, class: fr32, preferred-register: '' }
  - { id: 100, class: fr32, preferred-register: '' }
  - { id: 101, class: fr32, preferred-register: '' }
  - { id: 102, class: fr32, preferred-register: '' }
  - { id: 103, class: gr64_nosp, preferred-register: '' }
  - { id: 104, class: gr32, preferred-register: '' }
  - { id: 105, class: gr32, preferred-register: '' }
  - { id: 106, class: fr32, preferred-register: '' }
  - { id: 107, class: fr32, preferred-register: '' }
  - { id: 108, class: fr32, preferred-register: '' }
  - { id: 109, class: gr64_nosp, preferred-register: '' }
  - { id: 110, class: gr32, preferred-register: '' }
  - { id: 111, class: gr32, preferred-register: '' }
  - { id: 112, class: fr32, preferred-register: '' }
  - { id: 113, class: fr32, preferred-register: '' }
  - { id: 114, class: fr32, preferred-register: '' }
  - { id: 115, class: fr32, preferred-register: '' }
  - { id: 116, class: gr32, preferred-register: '' }
  - { id: 117, class: gr32, preferred-register: '' }
  - { id: 118, class: fr32, preferred-register: '' }
  - { id: 119, class: fr32, preferred-register: '' }
  - { id: 120, class: fr32, preferred-register: '' }
  - { id: 121, class: fr32, preferred-register: '' }
  - { id: 122, class: gr32, preferred-register: '' }
  - { id: 123, class: gr32, preferred-register: '' }
  - { id: 124, class: fr32, preferred-register: '' }
  - { id: 125, class: fr32, preferred-register: '' }
  - { id: 126, class: fr32, preferred-register: '' }
  - { id: 127, class: fr32, preferred-register: '' }
  - { id: 128, class: gr32, preferred-register: '' }
  - { id: 129, class: gr32, preferred-register: '' }
  - { id: 130, class: fr32, preferred-register: '' }
  - { id: 131, class: gr32, preferred-register: '' }
  - { id: 132, class: gr64, preferred-register: '' }
  - { id: 133, class: gr64, preferred-register: '' }
  - { id: 134, class: gr32, preferred-register: '' }
  - { id: 135, class: gr64, preferred-register: '' }
  - { id: 136, class: gr32, preferred-register: '' }
  - { id: 137, class: gr64, preferred-register: '' }
  - { id: 138, class: gr64, preferred-register: '' }
  - { id: 139, class: gr64, preferred-register: '' }
  - { id: 140, class: gr64, preferred-register: '' }
  - { id: 141, class: gr64, preferred-register: '' }
  - { id: 142, class: gr32, preferred-register: '' }
  - { id: 143, class: gr32, preferred-register: '' }
  - { id: 144, class: fr32, preferred-register: '' }
  - { id: 145, class: fr32, preferred-register: '' }
  - { id: 146, class: fr32, preferred-register: '' }
  - { id: 147, class: fr32, preferred-register: '' }
  - { id: 148, class: fr32, preferred-register: '' }
  - { id: 149, class: gr64_nosp, preferred-register: '' }
  - { id: 150, class: gr32, preferred-register: '' }
  - { id: 151, class: gr32, preferred-register: '' }
  - { id: 152, class: fr32, preferred-register: '' }
  - { id: 153, class: fr32, preferred-register: '' }
  - { id: 154, class: fr32, preferred-register: '' }
  - { id: 155, class: gr64_nosp, preferred-register: '' }
  - { id: 156, class: gr32, preferred-register: '' }
  - { id: 157, class: gr32, preferred-register: '' }
  - { id: 158, class: fr32, preferred-register: '' }
  - { id: 159, class: fr32, preferred-register: '' }
  - { id: 160, class: fr32, preferred-register: '' }
  - { id: 161, class: fr32, preferred-register: '' }
  - { id: 162, class: gr32, preferred-register: '' }
  - { id: 163, class: gr32, preferred-register: '' }
  - { id: 164, class: fr32, preferred-register: '' }
  - { id: 165, class: fr32, preferred-register: '' }
  - { id: 166, class: gr32, preferred-register: '' }
  - { id: 167, class: gr32, preferred-register: '' }
  - { id: 168, class: fr32, preferred-register: '' }
  - { id: 169, class: fr32, preferred-register: '' }
  - { id: 170, class: fr32, preferred-register: '' }
  - { id: 171, class: fr32, preferred-register: '' }
  - { id: 172, class: gr32, preferred-register: '' }
  - { id: 173, class: gr32, preferred-register: '' }
  - { id: 174, class: fr32, preferred-register: '' }
  - { id: 175, class: fr32, preferred-register: '' }
  - { id: 176, class: fr32, preferred-register: '' }
  - { id: 177, class: gr64, preferred-register: '' }
  - { id: 178, class: gr64, preferred-register: '' }
  - { id: 179, class: gr64, preferred-register: '' }
  - { id: 180, class: gr64, preferred-register: '' }
  - { id: 181, class: fr32, preferred-register: '' }
  - { id: 182, class: fr32, preferred-register: '' }
  - { id: 183, class: fr32, preferred-register: '' }
  - { id: 184, class: gr64_nosp, preferred-register: '' }
  - { id: 185, class: fr32, preferred-register: '' }
  - { id: 186, class: fr32, preferred-register: '' }
  - { id: 187, class: fr32, preferred-register: '' }
  - { id: 188, class: fr32, preferred-register: '' }
  - { id: 189, class: fr32, preferred-register: '' }
  - { id: 190, class: gr64_nosp, preferred-register: '' }
  - { id: 191, class: fr32, preferred-register: '' }
  - { id: 192, class: fr32, preferred-register: '' }
  - { id: 193, class: gr64, preferred-register: '' }
  - { id: 194, class: fr32, preferred-register: '' }
  - { id: 195, class: fr32, preferred-register: '' }
  - { id: 196, class: gr64_nosp, preferred-register: '' }
  - { id: 197, class: fr32, preferred-register: '' }
  - { id: 198, class: fr32, preferred-register: '' }
  - { id: 199, class: gr64, preferred-register: '' }
  - { id: 200, class: fr32, preferred-register: '' }
  - { id: 201, class: fr32, preferred-register: '' }
  - { id: 202, class: fr32, preferred-register: '' }
  - { id: 203, class: fr32, preferred-register: '' }
  - { id: 204, class: gr64_nosp, preferred-register: '' }
  - { id: 205, class: fr32, preferred-register: '' }
  - { id: 206, class: fr32, preferred-register: '' }
  - { id: 207, class: fr32, preferred-register: '' }
  - { id: 208, class: fr32, preferred-register: '' }
  - { id: 209, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%52' }
  - { reg: '$rsi', virtual-reg: '%54' }
  - { reg: '$rdx', virtual-reg: '%56' }
  - { reg: '$rcx', virtual-reg: '%58' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_0:
    successors: %bb.6(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %58:gr64 = COPY $rcx
    %56:gr64 = COPY $rdx
    %54:gr64 = COPY $rsi
    %52:gr64 = COPY $rdi
    %53:gr64 = COPY killed %52
    %55:gr64 = COPY killed %54
    %57:gr64 = COPY killed %56
    %59:gr64 = COPY killed %58
    %80:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %79:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %78:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    %77:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %76:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %75:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %73:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    %74:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %57
    $rsi = COPY %59
    $rdx = COPY %73
    $rcx = COPY %74
    CALL64pcrel32 @make_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %71:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %72:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %59
    $rsi = COPY %57
    $rdx = COPY %71
    $rcx = COPY %72
    CALL64pcrel32 @make_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %69:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %70:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    $rsi = COPY %55
    $rdx = COPY %69
    $rcx = COPY %70
    CALL64pcrel32 @make_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %67:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %68:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %55
    $rsi = COPY %53
    $rdx = COPY %67
    $rcx = COPY %68
    CALL64pcrel32 @make_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %66:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.4, !tbaa !5)
    %65:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5, !tbaa !5)
    %64:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6, !tbaa !5)
    %63:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7, !tbaa !5)
    %62:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.8, !tbaa !9)
    %61:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9, !tbaa !9)
    %60:fr32 = FsFLD0SS
    CMP32ri %62, 0, implicit-def $eflags
    %188:fr32 = COPY %60
    %189:fr32 = COPY %60
    JCC_1 %bb.6, 14, implicit $eflags
  
  bb.1.BB_1:
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    %87:gr32 = MOV32rr %62
    %88:gr64 = SUBREG_TO_REG 0, %87, %subreg.sub_32bit
    %86:gr64 = AND64ri32 %88, 1, implicit-def $eflags
    %82:gr32 = MOV32r0 implicit-def $eflags
    %83:gr64 = SUBREG_TO_REG 0, %82, %subreg.sub_32bit
    %84:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %85:fr32 = FsFLD0SS
    CMP32ri %62, 1, implicit-def $eflags
    %182:fr32 = IMPLICIT_DEF
    %183:fr32 = IMPLICIT_DEF
    %184:gr64_nosp = COPY %83
    %185:fr32 = COPY %84
    %186:fr32 = COPY %85
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.2.BB_2:
    successors: %bb.9(0x80000000)
  
    %92:gr64 = MOV64ri 4294967294
    %93:gr64 = AND64rr %88, %92, implicit-def $eflags
    %89:gr32 = MOV32r0 implicit-def $eflags
    %90:gr64 = SUBREG_TO_REG 0, %89, %subreg.sub_32bit
    %91:fr32 = FsFLD0SS
    %190:gr64_nosp = COPY %90
    %191:fr32 = COPY %91
    %192:fr32 = COPY %91
    %193:gr64 = COPY %90
    JMP_1 %bb.9
  
  bb.3.BB_3:
    successors: %bb.4(0x80000000)
  
    %120:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %121:fr32 = ADDSSrr %108, %120, implicit $mxcsr
    %182:fr32 = COPY %108
    %183:fr32 = COPY %100
    %184:gr64_nosp = COPY %95
    %185:fr32 = COPY %121
    %186:fr32 = COPY %100
  
  bb.4.BB_4:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    %20:fr32 = COPY %186
    %19:fr32 = COPY %185
    %18:gr64_nosp = COPY %184
    %17:fr32 = COPY %183
    %16:fr32 = COPY %182
    CMP64ri32 %86, 0, implicit-def $eflags
    %188:fr32 = COPY %17
    %189:fr32 = COPY %16
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.BB_5:
    successors: %bb.14(0x40000000), %bb.15(0x40000000)
  
    %129:gr32 = MOV32rm %64, 4, %18, 0, $noreg :: (load (s32) from %ir.34, !tbaa !9)
    %128:gr32 = MOV32rm %66, 4, %18, 0, $noreg :: (load (s32) from %ir.36, !tbaa !9)
    %126:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %127:fr32 = ADDSSrr %20, %126, implicit $mxcsr
    CMP32rr %129, %128, implicit-def $eflags
    %187:fr32 = COPY %127
    JCC_1 %bb.15, 4, implicit $eflags
  
  bb.14.BB_5:
    successors: %bb.15(0x80000000)
  
    %187:fr32 = COPY %20
  
  bb.15.BB_5:
    successors: %bb.6(0x80000000)
  
    %125:fr32 = COPY %187
    %188:fr32 = COPY %125
    %189:fr32 = COPY %19
  
  bb.6.BB_6:
    successors: %bb.13(0x40000000), %bb.7(0x40000000)
  
    %23:fr32 = COPY %189
    %22:fr32 = COPY %188
    CMP32ri %61, 0, implicit-def $eflags
    %208:fr32 = COPY %22
    %209:fr32 = COPY %23
    JCC_1 %bb.13, 14, implicit $eflags
  
  bb.7.BB_7:
    successors: %bb.11(0x40000000), %bb.8(0x40000000)
  
    %134:gr32 = MOV32rr %61
    %135:gr64 = SUBREG_TO_REG 0, %134, %subreg.sub_32bit
    %133:gr64 = AND64ri32 %135, 1, implicit-def $eflags
    %131:gr32 = MOV32r0 implicit-def $eflags
    %132:gr64 = SUBREG_TO_REG 0, %131, %subreg.sub_32bit
    CMP32ri %61, 1, implicit-def $eflags
    %202:fr32 = IMPLICIT_DEF
    %203:fr32 = IMPLICIT_DEF
    %204:gr64_nosp = COPY %132
    %205:fr32 = COPY %23
    %206:fr32 = COPY %22
    JCC_1 %bb.11, 4, implicit $eflags
  
  bb.8.BB_8:
    successors: %bb.10(0x80000000)
  
    %138:gr64 = MOV64ri 4294967294
    %139:gr64 = AND64rr %135, %138, implicit-def $eflags
    %136:gr32 = MOV32r0 implicit-def $eflags
    %137:gr64 = SUBREG_TO_REG 0, %136, %subreg.sub_32bit
    %196:gr64_nosp = COPY %137
    %197:fr32 = COPY %23
    %198:fr32 = COPY %22
    %199:gr64 = COPY %137
    JMP_1 %bb.10
  
  bb.9.BB_9:
    successors: %bb.16(0x40000000), %bb.17(0x40000000)
  
    %30:gr64 = COPY %193
    %29:fr32 = COPY %192
    %28:fr32 = COPY %191
    %27:gr64_nosp = COPY %190
    %118:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %119:fr32 = ADDSSrr %28, %118, implicit $mxcsr
    %117:gr32 = MOV32rm %64, 4, %27, 0, $noreg :: (load (s32) from %ir.53, !tbaa !9)
    %116:gr32 = MOV32rm %66, 4, %27, 0, $noreg :: (load (s32) from %ir.55, !tbaa !9)
    %114:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %115:fr32 = ADDSSrr %29, %114, implicit $mxcsr
    CMP32rr %117, %116, implicit-def $eflags
    %194:fr32 = COPY %115
    JCC_1 %bb.17, 4, implicit $eflags
  
  bb.16.BB_9:
    successors: %bb.17(0x80000000)
  
    %194:fr32 = COPY %29
  
  bb.17.BB_9:
    successors: %bb.18(0x40000000), %bb.19(0x40000000)
  
    %113:fr32 = COPY %194
    %109:gr64_nosp = OR64ri32 %27, 1, implicit-def $eflags
    %107:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %108:fr32 = ADDSSrr %119, %107, implicit $mxcsr
    %105:gr32 = MOV32rm %64, 4, %109, 0, $noreg :: (load (s32) from %ir.62, !tbaa !9)
    %104:gr32 = MOV32rm %66, 4, %109, 0, $noreg :: (load (s32) from %ir.64, !tbaa !9)
    %101:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %102:fr32 = ADDSSrr %113, %101, implicit $mxcsr
    CMP32rr %105, %104, implicit-def $eflags
    %195:fr32 = COPY %102
    JCC_1 %bb.19, 4, implicit $eflags
  
  bb.18.BB_9:
    successors: %bb.19(0x80000000)
  
    %195:fr32 = COPY %113
  
  bb.19.BB_9:
    successors: %bb.3(0x40000000), %bb.9(0x40000000)
  
    %100:fr32 = COPY %195
    %95:gr64 = ADD64ri32 %27, 2, implicit-def $eflags
    %94:gr64 = ADD64ri32 %30, 2, implicit-def $eflags
    CMP64rr %94, %93, implicit-def $eflags
    %190:gr64_nosp = COPY %95
    %191:fr32 = COPY %108
    %192:fr32 = COPY %100
    %193:gr64 = COPY %94
    JCC_1 %bb.3, 4, implicit $eflags
    JMP_1 %bb.9
  
  bb.10.BB_10:
    successors: %bb.20(0x40000000), %bb.21(0x40000000)
  
    %38:gr64 = COPY %199
    %37:fr32 = COPY %198
    %36:fr32 = COPY %197
    %35:gr64_nosp = COPY %196
    %164:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %165:fr32 = ADDSSrr %36, %164, implicit $mxcsr
    %163:gr32 = MOV32rm %65, 4, %35, 0, $noreg :: (load (s32) from %ir.77, !tbaa !9)
    %162:gr32 = MOV32rm %63, 4, %35, 0, $noreg :: (load (s32) from %ir.79, !tbaa !9)
    %160:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %161:fr32 = ADDSSrr %37, %160, implicit $mxcsr
    CMP32rr %163, %162, implicit-def $eflags
    %200:fr32 = COPY %161
    JCC_1 %bb.21, 4, implicit $eflags
  
  bb.20.BB_10:
    successors: %bb.21(0x80000000)
  
    %200:fr32 = COPY %37
  
  bb.21.BB_10:
    successors: %bb.22(0x40000000), %bb.23(0x40000000)
  
    %159:fr32 = COPY %200
    %155:gr64_nosp = OR64ri32 %35, 1, implicit-def $eflags
    %153:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %154:fr32 = ADDSSrr %165, %153, implicit $mxcsr
    %151:gr32 = MOV32rm %65, 4, %155, 0, $noreg :: (load (s32) from %ir.86, !tbaa !9)
    %150:gr32 = MOV32rm %63, 4, %155, 0, $noreg :: (load (s32) from %ir.88, !tbaa !9)
    %147:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %148:fr32 = ADDSSrr %159, %147, implicit $mxcsr
    CMP32rr %151, %150, implicit-def $eflags
    %201:fr32 = COPY %148
    JCC_1 %bb.23, 4, implicit $eflags
  
  bb.22.BB_10:
    successors: %bb.23(0x80000000)
  
    %201:fr32 = COPY %159
  
  bb.23.BB_10:
    successors: %bb.10(0x40000000), %bb.11(0x40000000)
  
    %146:fr32 = COPY %201
    %141:gr64 = ADD64ri32 %35, 2, implicit-def $eflags
    %140:gr64 = ADD64ri32 %38, 2, implicit-def $eflags
    CMP64rr %140, %139, implicit-def $eflags
    %196:gr64_nosp = COPY %141
    %197:fr32 = COPY %154
    %198:fr32 = COPY %146
    %199:gr64 = COPY %140
    %202:fr32 = COPY %154
    %203:fr32 = COPY %146
    %204:gr64_nosp = COPY %141
    %205:fr32 = COPY %154
    %206:fr32 = COPY %146
    JCC_1 %bb.10, 5, implicit $eflags
  
  bb.11.BB_11:
    successors: %bb.13(0x40000000), %bb.12(0x40000000)
  
    %47:fr32 = COPY %206
    %46:fr32 = COPY %205
    %45:gr64_nosp = COPY %204
    %44:fr32 = COPY %203
    %43:fr32 = COPY %202
    CMP64ri32 %133, 0, implicit-def $eflags
    %208:fr32 = COPY %44
    %209:fr32 = COPY %43
    JCC_1 %bb.13, 4, implicit $eflags
  
  bb.12.BB_12:
    successors: %bb.24(0x40000000), %bb.25(0x40000000)
  
    %174:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %175:fr32 = ADDSSrr %46, %174, implicit $mxcsr
    %173:gr32 = MOV32rm %65, 4, %45, 0, $noreg :: (load (s32) from %ir.103, !tbaa !9)
    %172:gr32 = MOV32rm %63, 4, %45, 0, $noreg :: (load (s32) from %ir.105, !tbaa !9)
    %170:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %171:fr32 = ADDSSrr %47, %170, implicit $mxcsr
    CMP32rr %173, %172, implicit-def $eflags
    %207:fr32 = COPY %171
    JCC_1 %bb.25, 4, implicit $eflags
  
  bb.24.BB_12:
    successors: %bb.25(0x80000000)
  
    %207:fr32 = COPY %47
  
  bb.25.BB_12:
    successors: %bb.13(0x80000000)
  
    %169:fr32 = COPY %207
    %208:fr32 = COPY %169
    %209:fr32 = COPY %175
  
  bb.13.BB_13:
    %51:fr32 = COPY %209
    %50:fr32 = COPY %208
    %181:fr32 = DIVSSrr %50, %51, implicit $mxcsr
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %66
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %65
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %64
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %63
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $xmm0 = COPY %181
    RET64 implicit $xmm0

...
---
name:            make_alilist
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64_nosp, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr8, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr8, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr8, preferred-register: '' }
  - { id: 36, class: gr8, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr64_nosp, preferred-register: '' }
  - { id: 43, class: gr64_nosp, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
  - { id: 45, class: gr8, preferred-register: '' }
  - { id: 46, class: gr8, preferred-register: '' }
  - { id: 47, class: gr8, preferred-register: '' }
  - { id: 48, class: gr8, preferred-register: '' }
  - { id: 49, class: gr8, preferred-register: '' }
  - { id: 50, class: gr32, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: gr64_nosp, preferred-register: '' }
  - { id: 53, class: gr32, preferred-register: '' }
  - { id: 54, class: gr32, preferred-register: '' }
  - { id: 55, class: gr32, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%13' }
  - { reg: '$rsi', virtual-reg: '%14' }
  - { reg: '$rdx', virtual-reg: '%15' }
  - { reg: '$rcx', virtual-reg: '%16' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_14:
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi, $rdx, $rcx
  
    %16:gr64 = COPY $rcx
    %15:gr64 = COPY $rdx
    %14:gr64 = COPY $rsi
    %13:gr64 = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %13
    CALL64pcrel32 target-flags(x86-plt) @strlen, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %26:gr64 = COPY $rax
    %24:gr64 = COPY %26
    %25:gr64 = SHL64ri %24, 2, implicit-def $eflags
    %20:gr64 = MOV64ri @.str
    %21:gr32 = MOV32ri 179
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %20
    $esi = COPY %21
    $rdx = COPY %25
    CALL64pcrel32 target-flags(x86-plt) @sre_malloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %23:gr64 = COPY $rax
    %17:gr32 = MOV32r0 implicit-def $eflags
    %18:gr64 = SUBREG_TO_REG 0, %17, %subreg.sub_32bit
    %19:gr32 = MOV32r0 implicit-def $eflags
    %52:gr64_nosp = COPY %18
    %53:gr32 = COPY %19
    %54:gr32 = COPY %19
  
  bb.1.BB_15:
    successors: %bb.8(0x40000000), %bb.9(0x40000000)
  
    %4:gr32 = COPY %54
    %3:gr32 = COPY %53
    %2:gr64_nosp = COPY %52
    %27:gr8 = MOV8rm %13, 1, %2, 0, $noreg :: (load (s8) from %ir.11, !tbaa !11)
    TEST8rr %27, %27, implicit-def $eflags
    JCC_1 %bb.8, 4, implicit $eflags
    JMP_1 %bb.9
  
  bb.9.BB_15:
    successors: %bb.5(0x40000000), %bb.10(0x40000000)
  
    %28:gr8 = SUB8ri %27, 32, implicit-def $eflags
    %56:gr32 = COPY %3
    JCC_1 %bb.5, 4, implicit $eflags
    JMP_1 %bb.10
  
  bb.10.BB_15:
    successors: %bb.5(0x40000000), %bb.11(0x40000000)
  
    %29:gr8 = ADD8ri %27, -45, implicit-def dead $eflags
    %30:gr8 = SUB8ri %29, 2, implicit-def $eflags
    %56:gr32 = COPY %3
    JCC_1 %bb.5, 2, implicit $eflags
    JMP_1 %bb.11
  
  bb.11.BB_15:
    successors: %bb.5(0x40000000), %bb.12(0x40000000)
  
    %31:gr8 = SUB8ri %27, 95, implicit-def $eflags
    %56:gr32 = COPY %3
    JCC_1 %bb.5, 4, implicit $eflags
    JMP_1 %bb.12
  
  bb.12.BB_15:
    successors: %bb.5(0x40000000), %bb.2(0x40000000)
  
    %32:gr8 = SUB8ri %27, 126, implicit-def $eflags
    %56:gr32 = COPY %3
    JCC_1 %bb.5, 4, implicit $eflags
    JMP_1 %bb.2
  
  bb.2.BB_16:
    successors: %bb.4(0x40000000), %bb.13(0x40000000)
  
    %5:gr8 = MOV8rm %14, 1, %2, 0, $noreg :: (load (s8) from %ir.13, !tbaa !11)
    %34:gr32 = MOV32ri -1
    %35:gr8 = SUB8ri %5, 32, implicit-def $eflags
    %55:gr32 = COPY %34
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.13
  
  bb.13.BB_16:
    successors: %bb.4(0x40000000), %bb.14(0x40000000)
  
    %36:gr8 = ADD8ri %5, -45, implicit-def dead $eflags
    %37:gr8 = SUB8ri %36, 2, implicit-def $eflags
    %55:gr32 = COPY %34
    JCC_1 %bb.4, 2, implicit $eflags
    JMP_1 %bb.14
  
  bb.14.BB_16:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    %38:gr8 = SUB8ri %5, 95, implicit-def $eflags
    %55:gr32 = COPY %34
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.3
  
  bb.3.BB_17:
    successors: %bb.4(0x80000000)
  
    %39:gr32 = MOV32ri 4294967295
    CMP8ri %5, 126, implicit-def $eflags
    %40:gr32 = CMOV32rr %4, %39, 4, implicit $eflags
    %55:gr32 = COPY %40
  
  bb.4.BB_18:
    successors: %bb.5(0x80000000)
  
    %7:gr32 = COPY %55
    %43:gr64_nosp = MOVSX64rr32 %3
    MOV32mr %23, 4, %43, 0, $noreg, %7 :: (store (s32) into %ir.19, !tbaa !9)
    %41:gr32 = ADD32ri %3, 1, implicit-def $eflags
    %56:gr32 = COPY %41
  
  bb.5.BB_19:
    successors: %bb.7(0x40000000), %bb.15(0x40000000)
  
    %9:gr32 = COPY %56
    %44:gr8 = MOV8rm %14, 1, %2, 0, $noreg :: (load (s8) from %ir.22, !tbaa !11)
    %45:gr8 = SUB8ri %44, 32, implicit-def $eflags
    %57:gr32 = COPY %4
    JCC_1 %bb.7, 4, implicit $eflags
    JMP_1 %bb.15
  
  bb.15.BB_19:
    successors: %bb.7(0x40000000), %bb.16(0x40000000)
  
    %46:gr8 = ADD8ri %44, -45, implicit-def dead $eflags
    %47:gr8 = SUB8ri %46, 2, implicit-def $eflags
    %57:gr32 = COPY %4
    JCC_1 %bb.7, 2, implicit $eflags
    JMP_1 %bb.16
  
  bb.16.BB_19:
    successors: %bb.7(0x40000000), %bb.17(0x40000000)
  
    %48:gr8 = SUB8ri %44, 95, implicit-def $eflags
    %57:gr32 = COPY %4
    JCC_1 %bb.7, 4, implicit $eflags
    JMP_1 %bb.17
  
  bb.17.BB_19:
    successors: %bb.7(0x40000000), %bb.6(0x40000000)
  
    %49:gr8 = SUB8ri %44, 126, implicit-def $eflags
    %57:gr32 = COPY %4
    JCC_1 %bb.7, 4, implicit $eflags
    JMP_1 %bb.6
  
  bb.6.BB_20:
    successors: %bb.7(0x80000000)
  
    %50:gr32 = ADD32ri %4, 1, implicit-def $eflags
    %57:gr32 = COPY %50
  
  bb.7.BB_21:
    successors: %bb.1(0x80000000)
  
    %11:gr32 = COPY %57
    %51:gr64 = ADD64ri32 %2, 1, implicit-def $eflags
    %52:gr64_nosp = COPY %51
    %53:gr32 = COPY %9
    %54:gr32 = COPY %11
    JMP_1 %bb.1
  
  bb.8.BB_22:
    MOV32mr %16, 1, $noreg, 0, $noreg, %3 :: (store (s32) into %ir.3, !tbaa !9)
    MOV64mr %15, 1, $noreg, 0, $noreg, %23 :: (store (s64) into %ir.27, !tbaa !5)
    RET64

...
---
name:            CompareRefPairAlignments
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: fr32, preferred-register: '' }
  - { id: 16, class: fr32, preferred-register: '' }
  - { id: 17, class: fr32, preferred-register: '' }
  - { id: 18, class: gr64_nosp, preferred-register: '' }
  - { id: 19, class: fr32, preferred-register: '' }
  - { id: 20, class: fr32, preferred-register: '' }
  - { id: 21, class: fr32, preferred-register: '' }
  - { id: 22, class: fr32, preferred-register: '' }
  - { id: 23, class: fr32, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64_nosp, preferred-register: '' }
  - { id: 28, class: fr32, preferred-register: '' }
  - { id: 29, class: fr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: fr32, preferred-register: '' }
  - { id: 32, class: fr32, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64_nosp, preferred-register: '' }
  - { id: 36, class: fr32, preferred-register: '' }
  - { id: 37, class: fr32, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: fr32, preferred-register: '' }
  - { id: 40, class: fr32, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: fr32, preferred-register: '' }
  - { id: 44, class: fr32, preferred-register: '' }
  - { id: 45, class: gr64_nosp, preferred-register: '' }
  - { id: 46, class: fr32, preferred-register: '' }
  - { id: 47, class: fr32, preferred-register: '' }
  - { id: 48, class: fr32, preferred-register: '' }
  - { id: 49, class: fr32, preferred-register: '' }
  - { id: 50, class: fr32, preferred-register: '' }
  - { id: 51, class: fr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr64, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr64, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: fr32, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr64, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: fr32, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: fr32, preferred-register: '' }
  - { id: 87, class: fr32, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr32, preferred-register: '' }
  - { id: 90, class: gr64, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr64, preferred-register: '' }
  - { id: 93, class: fr32, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr32, preferred-register: '' }
  - { id: 99, class: gr32, preferred-register: '' }
  - { id: 100, class: fr32, preferred-register: '' }
  - { id: 101, class: fr32, preferred-register: '' }
  - { id: 102, class: fr32, preferred-register: '' }
  - { id: 103, class: fr32, preferred-register: '' }
  - { id: 104, class: fr32, preferred-register: '' }
  - { id: 105, class: gr64_nosp, preferred-register: '' }
  - { id: 106, class: gr32, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: fr32, preferred-register: '' }
  - { id: 109, class: fr32, preferred-register: '' }
  - { id: 110, class: fr32, preferred-register: '' }
  - { id: 111, class: gr64_nosp, preferred-register: '' }
  - { id: 112, class: gr32, preferred-register: '' }
  - { id: 113, class: gr32, preferred-register: '' }
  - { id: 114, class: fr32, preferred-register: '' }
  - { id: 115, class: fr32, preferred-register: '' }
  - { id: 116, class: fr32, preferred-register: '' }
  - { id: 117, class: fr32, preferred-register: '' }
  - { id: 118, class: gr32, preferred-register: '' }
  - { id: 119, class: gr32, preferred-register: '' }
  - { id: 120, class: fr32, preferred-register: '' }
  - { id: 121, class: fr32, preferred-register: '' }
  - { id: 122, class: fr32, preferred-register: '' }
  - { id: 123, class: fr32, preferred-register: '' }
  - { id: 124, class: gr32, preferred-register: '' }
  - { id: 125, class: gr32, preferred-register: '' }
  - { id: 126, class: fr32, preferred-register: '' }
  - { id: 127, class: fr32, preferred-register: '' }
  - { id: 128, class: fr32, preferred-register: '' }
  - { id: 129, class: fr32, preferred-register: '' }
  - { id: 130, class: gr32, preferred-register: '' }
  - { id: 131, class: gr32, preferred-register: '' }
  - { id: 132, class: fr32, preferred-register: '' }
  - { id: 133, class: gr32, preferred-register: '' }
  - { id: 134, class: gr64, preferred-register: '' }
  - { id: 135, class: gr64, preferred-register: '' }
  - { id: 136, class: gr32, preferred-register: '' }
  - { id: 137, class: gr64, preferred-register: '' }
  - { id: 138, class: gr32, preferred-register: '' }
  - { id: 139, class: gr64, preferred-register: '' }
  - { id: 140, class: gr64, preferred-register: '' }
  - { id: 141, class: gr64, preferred-register: '' }
  - { id: 142, class: gr64, preferred-register: '' }
  - { id: 143, class: gr64, preferred-register: '' }
  - { id: 144, class: gr32, preferred-register: '' }
  - { id: 145, class: gr32, preferred-register: '' }
  - { id: 146, class: fr32, preferred-register: '' }
  - { id: 147, class: fr32, preferred-register: '' }
  - { id: 148, class: fr32, preferred-register: '' }
  - { id: 149, class: fr32, preferred-register: '' }
  - { id: 150, class: fr32, preferred-register: '' }
  - { id: 151, class: gr64_nosp, preferred-register: '' }
  - { id: 152, class: gr32, preferred-register: '' }
  - { id: 153, class: gr32, preferred-register: '' }
  - { id: 154, class: fr32, preferred-register: '' }
  - { id: 155, class: fr32, preferred-register: '' }
  - { id: 156, class: fr32, preferred-register: '' }
  - { id: 157, class: gr64_nosp, preferred-register: '' }
  - { id: 158, class: gr32, preferred-register: '' }
  - { id: 159, class: gr32, preferred-register: '' }
  - { id: 160, class: fr32, preferred-register: '' }
  - { id: 161, class: fr32, preferred-register: '' }
  - { id: 162, class: fr32, preferred-register: '' }
  - { id: 163, class: fr32, preferred-register: '' }
  - { id: 164, class: gr32, preferred-register: '' }
  - { id: 165, class: gr32, preferred-register: '' }
  - { id: 166, class: fr32, preferred-register: '' }
  - { id: 167, class: fr32, preferred-register: '' }
  - { id: 168, class: gr32, preferred-register: '' }
  - { id: 169, class: gr32, preferred-register: '' }
  - { id: 170, class: fr32, preferred-register: '' }
  - { id: 171, class: fr32, preferred-register: '' }
  - { id: 172, class: fr32, preferred-register: '' }
  - { id: 173, class: fr32, preferred-register: '' }
  - { id: 174, class: gr32, preferred-register: '' }
  - { id: 175, class: gr32, preferred-register: '' }
  - { id: 176, class: fr32, preferred-register: '' }
  - { id: 177, class: fr32, preferred-register: '' }
  - { id: 178, class: fr32, preferred-register: '' }
  - { id: 179, class: gr64, preferred-register: '' }
  - { id: 180, class: gr64, preferred-register: '' }
  - { id: 181, class: gr64, preferred-register: '' }
  - { id: 182, class: gr64, preferred-register: '' }
  - { id: 183, class: fr32, preferred-register: '' }
  - { id: 184, class: fr32, preferred-register: '' }
  - { id: 185, class: fr32, preferred-register: '' }
  - { id: 186, class: gr64_nosp, preferred-register: '' }
  - { id: 187, class: fr32, preferred-register: '' }
  - { id: 188, class: fr32, preferred-register: '' }
  - { id: 189, class: fr32, preferred-register: '' }
  - { id: 190, class: fr32, preferred-register: '' }
  - { id: 191, class: fr32, preferred-register: '' }
  - { id: 192, class: gr64_nosp, preferred-register: '' }
  - { id: 193, class: fr32, preferred-register: '' }
  - { id: 194, class: fr32, preferred-register: '' }
  - { id: 195, class: gr64, preferred-register: '' }
  - { id: 196, class: fr32, preferred-register: '' }
  - { id: 197, class: fr32, preferred-register: '' }
  - { id: 198, class: gr64_nosp, preferred-register: '' }
  - { id: 199, class: fr32, preferred-register: '' }
  - { id: 200, class: fr32, preferred-register: '' }
  - { id: 201, class: gr64, preferred-register: '' }
  - { id: 202, class: fr32, preferred-register: '' }
  - { id: 203, class: fr32, preferred-register: '' }
  - { id: 204, class: fr32, preferred-register: '' }
  - { id: 205, class: fr32, preferred-register: '' }
  - { id: 206, class: gr64_nosp, preferred-register: '' }
  - { id: 207, class: fr32, preferred-register: '' }
  - { id: 208, class: fr32, preferred-register: '' }
  - { id: 209, class: fr32, preferred-register: '' }
  - { id: 210, class: fr32, preferred-register: '' }
  - { id: 211, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%52' }
  - { reg: '$rsi', virtual-reg: '%54' }
  - { reg: '$rdx', virtual-reg: '%56' }
  - { reg: '$rcx', virtual-reg: '%58' }
  - { reg: '$r8', virtual-reg: '%60' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    8
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, name: '', type: default, offset: 0, size: 8, alignment: 8, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 5, name: '', type: default, offset: 0, size: 4, alignment: 4, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_23:
    successors: %bb.6(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $rcx, $r8
  
    %60:gr64 = COPY $r8
    %58:gr64 = COPY $rcx
    %56:gr64 = COPY $rdx
    %54:gr64 = COPY $rsi
    %52:gr64 = COPY $rdi
    %53:gr64 = COPY killed %52
    %55:gr64 = COPY killed %54
    %57:gr64 = COPY killed %56
    %59:gr64 = COPY killed %58
    %61:gr64 = COPY killed %60
    %82:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %81:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %80:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    %79:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %78:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    %77:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    %75:gr64 = LEA64r %stack.2, 1, $noreg, 0, $noreg
    %76:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    $rsi = COPY %55
    $rdx = COPY %59
    $rcx = COPY %61
    $r8 = COPY %75
    $r9 = COPY %76
    CALL64pcrel32 @make_ref_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %73:gr64 = LEA64r %stack.3, 1, $noreg, 0, $noreg
    %74:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    $rsi = COPY %57
    $rdx = COPY %61
    $rcx = COPY %59
    $r8 = COPY %73
    $r9 = COPY %74
    CALL64pcrel32 @make_ref_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %71:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %72:gr64 = LEA64r %stack.4, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    $rsi = COPY %55
    $rdx = COPY %55
    $rcx = COPY %57
    $r8 = COPY %71
    $r9 = COPY %72
    CALL64pcrel32 @make_ref_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %69:gr64 = LEA64r %stack.1, 1, $noreg, 0, $noreg
    %70:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %53
    $rsi = COPY %57
    $rdx = COPY %57
    $rcx = COPY %55
    $r8 = COPY %69
    $r9 = COPY %70
    CALL64pcrel32 @make_ref_alilist, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %68:gr64 = MOV64rm %stack.0, 1, $noreg, 0, $noreg :: (load (s64) from %ir.5, !tbaa !5)
    %67:gr64 = MOV64rm %stack.1, 1, $noreg, 0, $noreg :: (load (s64) from %ir.6, !tbaa !5)
    %66:gr64 = MOV64rm %stack.2, 1, $noreg, 0, $noreg :: (load (s64) from %ir.7, !tbaa !5)
    %65:gr64 = MOV64rm %stack.3, 1, $noreg, 0, $noreg :: (load (s64) from %ir.8, !tbaa !5)
    %64:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.9, !tbaa !9)
    %63:gr32 = MOV32rm %stack.5, 1, $noreg, 0, $noreg :: (load (s32) from %ir.10, !tbaa !9)
    %62:fr32 = FsFLD0SS
    CMP32ri %64, 0, implicit-def $eflags
    %190:fr32 = COPY %62
    %191:fr32 = COPY %62
    JCC_1 %bb.6, 14, implicit $eflags
  
  bb.1.BB_24:
    successors: %bb.4(0x40000000), %bb.2(0x40000000)
  
    %89:gr32 = MOV32rr %64
    %90:gr64 = SUBREG_TO_REG 0, %89, %subreg.sub_32bit
    %88:gr64 = AND64ri32 %90, 1, implicit-def $eflags
    %84:gr32 = MOV32r0 implicit-def $eflags
    %85:gr64 = SUBREG_TO_REG 0, %84, %subreg.sub_32bit
    %86:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %87:fr32 = FsFLD0SS
    CMP32ri %64, 1, implicit-def $eflags
    %184:fr32 = IMPLICIT_DEF
    %185:fr32 = IMPLICIT_DEF
    %186:gr64_nosp = COPY %85
    %187:fr32 = COPY %86
    %188:fr32 = COPY %87
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.2.BB_25:
    successors: %bb.9(0x80000000)
  
    %94:gr64 = MOV64ri 4294967294
    %95:gr64 = AND64rr %90, %94, implicit-def $eflags
    %91:gr32 = MOV32r0 implicit-def $eflags
    %92:gr64 = SUBREG_TO_REG 0, %91, %subreg.sub_32bit
    %93:fr32 = FsFLD0SS
    %192:gr64_nosp = COPY %92
    %193:fr32 = COPY %93
    %194:fr32 = COPY %93
    %195:gr64 = COPY %92
    JMP_1 %bb.9
  
  bb.3.BB_26:
    successors: %bb.4(0x80000000)
  
    %122:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %123:fr32 = ADDSSrr %110, %122, implicit $mxcsr
    %184:fr32 = COPY %110
    %185:fr32 = COPY %102
    %186:gr64_nosp = COPY %97
    %187:fr32 = COPY %123
    %188:fr32 = COPY %102
  
  bb.4.BB_27:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    %20:fr32 = COPY %188
    %19:fr32 = COPY %187
    %18:gr64_nosp = COPY %186
    %17:fr32 = COPY %185
    %16:fr32 = COPY %184
    CMP64ri32 %88, 0, implicit-def $eflags
    %190:fr32 = COPY %17
    %191:fr32 = COPY %16
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.BB_28:
    successors: %bb.14(0x40000000), %bb.15(0x40000000)
  
    %131:gr32 = MOV32rm %66, 4, %18, 0, $noreg :: (load (s32) from %ir.35, !tbaa !9)
    %130:gr32 = MOV32rm %68, 4, %18, 0, $noreg :: (load (s32) from %ir.37, !tbaa !9)
    %128:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %129:fr32 = ADDSSrr %20, %128, implicit $mxcsr
    CMP32rr %131, %130, implicit-def $eflags
    %189:fr32 = COPY %129
    JCC_1 %bb.15, 4, implicit $eflags
  
  bb.14.BB_28:
    successors: %bb.15(0x80000000)
  
    %189:fr32 = COPY %20
  
  bb.15.BB_28:
    successors: %bb.6(0x80000000)
  
    %127:fr32 = COPY %189
    %190:fr32 = COPY %127
    %191:fr32 = COPY %19
  
  bb.6.BB_29:
    successors: %bb.13(0x40000000), %bb.7(0x40000000)
  
    %23:fr32 = COPY %191
    %22:fr32 = COPY %190
    CMP32ri %63, 0, implicit-def $eflags
    %210:fr32 = COPY %22
    %211:fr32 = COPY %23
    JCC_1 %bb.13, 14, implicit $eflags
  
  bb.7.BB_30:
    successors: %bb.11(0x40000000), %bb.8(0x40000000)
  
    %136:gr32 = MOV32rr %63
    %137:gr64 = SUBREG_TO_REG 0, %136, %subreg.sub_32bit
    %135:gr64 = AND64ri32 %137, 1, implicit-def $eflags
    %133:gr32 = MOV32r0 implicit-def $eflags
    %134:gr64 = SUBREG_TO_REG 0, %133, %subreg.sub_32bit
    CMP32ri %63, 1, implicit-def $eflags
    %204:fr32 = IMPLICIT_DEF
    %205:fr32 = IMPLICIT_DEF
    %206:gr64_nosp = COPY %134
    %207:fr32 = COPY %23
    %208:fr32 = COPY %22
    JCC_1 %bb.11, 4, implicit $eflags
  
  bb.8.BB_31:
    successors: %bb.10(0x80000000)
  
    %140:gr64 = MOV64ri 4294967294
    %141:gr64 = AND64rr %137, %140, implicit-def $eflags
    %138:gr32 = MOV32r0 implicit-def $eflags
    %139:gr64 = SUBREG_TO_REG 0, %138, %subreg.sub_32bit
    %198:gr64_nosp = COPY %139
    %199:fr32 = COPY %23
    %200:fr32 = COPY %22
    %201:gr64 = COPY %139
    JMP_1 %bb.10
  
  bb.9.BB_32:
    successors: %bb.16(0x40000000), %bb.17(0x40000000)
  
    %30:gr64 = COPY %195
    %29:fr32 = COPY %194
    %28:fr32 = COPY %193
    %27:gr64_nosp = COPY %192
    %120:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %121:fr32 = ADDSSrr %28, %120, implicit $mxcsr
    %119:gr32 = MOV32rm %66, 4, %27, 0, $noreg :: (load (s32) from %ir.54, !tbaa !9)
    %118:gr32 = MOV32rm %68, 4, %27, 0, $noreg :: (load (s32) from %ir.56, !tbaa !9)
    %116:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %117:fr32 = ADDSSrr %29, %116, implicit $mxcsr
    CMP32rr %119, %118, implicit-def $eflags
    %196:fr32 = COPY %117
    JCC_1 %bb.17, 4, implicit $eflags
  
  bb.16.BB_32:
    successors: %bb.17(0x80000000)
  
    %196:fr32 = COPY %29
  
  bb.17.BB_32:
    successors: %bb.18(0x40000000), %bb.19(0x40000000)
  
    %115:fr32 = COPY %196
    %111:gr64_nosp = OR64ri32 %27, 1, implicit-def $eflags
    %109:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %110:fr32 = ADDSSrr %121, %109, implicit $mxcsr
    %107:gr32 = MOV32rm %66, 4, %111, 0, $noreg :: (load (s32) from %ir.63, !tbaa !9)
    %106:gr32 = MOV32rm %68, 4, %111, 0, $noreg :: (load (s32) from %ir.65, !tbaa !9)
    %103:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %104:fr32 = ADDSSrr %115, %103, implicit $mxcsr
    CMP32rr %107, %106, implicit-def $eflags
    %197:fr32 = COPY %104
    JCC_1 %bb.19, 4, implicit $eflags
  
  bb.18.BB_32:
    successors: %bb.19(0x80000000)
  
    %197:fr32 = COPY %115
  
  bb.19.BB_32:
    successors: %bb.3(0x40000000), %bb.9(0x40000000)
  
    %102:fr32 = COPY %197
    %97:gr64 = ADD64ri32 %27, 2, implicit-def $eflags
    %96:gr64 = ADD64ri32 %30, 2, implicit-def $eflags
    CMP64rr %96, %95, implicit-def $eflags
    %192:gr64_nosp = COPY %97
    %193:fr32 = COPY %110
    %194:fr32 = COPY %102
    %195:gr64 = COPY %96
    JCC_1 %bb.3, 4, implicit $eflags
    JMP_1 %bb.9
  
  bb.10.BB_33:
    successors: %bb.20(0x40000000), %bb.21(0x40000000)
  
    %38:gr64 = COPY %201
    %37:fr32 = COPY %200
    %36:fr32 = COPY %199
    %35:gr64_nosp = COPY %198
    %166:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %167:fr32 = ADDSSrr %36, %166, implicit $mxcsr
    %165:gr32 = MOV32rm %67, 4, %35, 0, $noreg :: (load (s32) from %ir.78, !tbaa !9)
    %164:gr32 = MOV32rm %65, 4, %35, 0, $noreg :: (load (s32) from %ir.80, !tbaa !9)
    %162:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %163:fr32 = ADDSSrr %37, %162, implicit $mxcsr
    CMP32rr %165, %164, implicit-def $eflags
    %202:fr32 = COPY %163
    JCC_1 %bb.21, 4, implicit $eflags
  
  bb.20.BB_33:
    successors: %bb.21(0x80000000)
  
    %202:fr32 = COPY %37
  
  bb.21.BB_33:
    successors: %bb.22(0x40000000), %bb.23(0x40000000)
  
    %161:fr32 = COPY %202
    %157:gr64_nosp = OR64ri32 %35, 1, implicit-def $eflags
    %155:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %156:fr32 = ADDSSrr %167, %155, implicit $mxcsr
    %153:gr32 = MOV32rm %67, 4, %157, 0, $noreg :: (load (s32) from %ir.87, !tbaa !9)
    %152:gr32 = MOV32rm %65, 4, %157, 0, $noreg :: (load (s32) from %ir.89, !tbaa !9)
    %149:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %150:fr32 = ADDSSrr %161, %149, implicit $mxcsr
    CMP32rr %153, %152, implicit-def $eflags
    %203:fr32 = COPY %150
    JCC_1 %bb.23, 4, implicit $eflags
  
  bb.22.BB_33:
    successors: %bb.23(0x80000000)
  
    %203:fr32 = COPY %161
  
  bb.23.BB_33:
    successors: %bb.10(0x40000000), %bb.11(0x40000000)
  
    %148:fr32 = COPY %203
    %143:gr64 = ADD64ri32 %35, 2, implicit-def $eflags
    %142:gr64 = ADD64ri32 %38, 2, implicit-def $eflags
    CMP64rr %142, %141, implicit-def $eflags
    %198:gr64_nosp = COPY %143
    %199:fr32 = COPY %156
    %200:fr32 = COPY %148
    %201:gr64 = COPY %142
    %204:fr32 = COPY %156
    %205:fr32 = COPY %148
    %206:gr64_nosp = COPY %143
    %207:fr32 = COPY %156
    %208:fr32 = COPY %148
    JCC_1 %bb.10, 5, implicit $eflags
  
  bb.11.BB_34:
    successors: %bb.13(0x40000000), %bb.12(0x40000000)
  
    %47:fr32 = COPY %208
    %46:fr32 = COPY %207
    %45:gr64_nosp = COPY %206
    %44:fr32 = COPY %205
    %43:fr32 = COPY %204
    CMP64ri32 %135, 0, implicit-def $eflags
    %210:fr32 = COPY %44
    %211:fr32 = COPY %43
    JCC_1 %bb.13, 4, implicit $eflags
  
  bb.12.BB_35:
    successors: %bb.24(0x40000000), %bb.25(0x40000000)
  
    %176:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %177:fr32 = ADDSSrr %46, %176, implicit $mxcsr
    %175:gr32 = MOV32rm %67, 4, %45, 0, $noreg :: (load (s32) from %ir.104, !tbaa !9)
    %174:gr32 = MOV32rm %65, 4, %45, 0, $noreg :: (load (s32) from %ir.106, !tbaa !9)
    %172:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %173:fr32 = ADDSSrr %47, %172, implicit $mxcsr
    CMP32rr %175, %174, implicit-def $eflags
    %209:fr32 = COPY %173
    JCC_1 %bb.25, 4, implicit $eflags
  
  bb.24.BB_35:
    successors: %bb.25(0x80000000)
  
    %209:fr32 = COPY %47
  
  bb.25.BB_35:
    successors: %bb.13(0x80000000)
  
    %171:fr32 = COPY %209
    %210:fr32 = COPY %171
    %211:fr32 = COPY %177
  
  bb.13.BB_36:
    %51:fr32 = COPY %211
    %50:fr32 = COPY %210
    %183:fr32 = DIVSSrr %50, %51, implicit $mxcsr
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %68
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %67
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %66
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %65
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $xmm0 = COPY %183
    RET64 implicit $xmm0

...
---
name:            make_ref_alilist
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64_nosp, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr32, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64_nosp, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr8, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr8, preferred-register: '' }
  - { id: 20, class: gr8, preferred-register: '' }
  - { id: 21, class: gr32, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr8, preferred-register: '' }
  - { id: 51, class: gr8, preferred-register: '' }
  - { id: 52, class: gr8, preferred-register: '' }
  - { id: 53, class: gr8, preferred-register: '' }
  - { id: 54, class: gr8, preferred-register: '' }
  - { id: 55, class: gr8, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr8, preferred-register: '' }
  - { id: 60, class: gr8, preferred-register: '' }
  - { id: 61, class: gr8, preferred-register: '' }
  - { id: 62, class: gr8, preferred-register: '' }
  - { id: 63, class: gr8, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr64_nosp, preferred-register: '' }
  - { id: 66, class: gr64_nosp, preferred-register: '' }
  - { id: 67, class: gr32, preferred-register: '' }
  - { id: 68, class: gr32, preferred-register: '' }
  - { id: 69, class: gr8, preferred-register: '' }
  - { id: 70, class: gr8, preferred-register: '' }
  - { id: 71, class: gr8, preferred-register: '' }
  - { id: 72, class: gr8, preferred-register: '' }
  - { id: 73, class: gr32, preferred-register: '' }
  - { id: 74, class: gr32, preferred-register: '' }
  - { id: 75, class: gr8, preferred-register: '' }
  - { id: 76, class: gr32, preferred-register: '' }
  - { id: 77, class: gr64_nosp, preferred-register: '' }
  - { id: 78, class: gr64_nosp, preferred-register: '' }
  - { id: 79, class: gr8, preferred-register: '' }
  - { id: 80, class: gr8, preferred-register: '' }
  - { id: 81, class: gr8, preferred-register: '' }
  - { id: 82, class: gr8, preferred-register: '' }
  - { id: 83, class: gr8, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr8, preferred-register: '' }
  - { id: 86, class: gr8, preferred-register: '' }
  - { id: 87, class: gr8, preferred-register: '' }
  - { id: 88, class: gr8, preferred-register: '' }
  - { id: 89, class: gr8, preferred-register: '' }
  - { id: 90, class: gr8, preferred-register: '' }
  - { id: 91, class: gr32, preferred-register: '' }
  - { id: 92, class: gr64, preferred-register: '' }
  - { id: 93, class: gr32, preferred-register: '' }
  - { id: 94, class: gr64_nosp, preferred-register: '' }
  - { id: 95, class: gr32, preferred-register: '' }
  - { id: 96, class: gr64_nosp, preferred-register: '' }
  - { id: 97, class: gr8, preferred-register: '' }
  - { id: 98, class: gr8, preferred-register: '' }
  - { id: 99, class: gr32, preferred-register: '' }
  - { id: 100, class: gr8, preferred-register: '' }
  - { id: 101, class: gr32, preferred-register: '' }
  - { id: 102, class: gr64, preferred-register: '' }
  - { id: 103, class: gr64_nosp, preferred-register: '' }
  - { id: 104, class: gr32, preferred-register: '' }
  - { id: 105, class: gr32, preferred-register: '' }
  - { id: 106, class: gr64_nosp, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: gr32, preferred-register: '' }
  - { id: 109, class: gr32, preferred-register: '' }
  - { id: 110, class: gr32, preferred-register: '' }
  - { id: 111, class: gr8, preferred-register: '' }
  - { id: 112, class: gr32, preferred-register: '' }
  - { id: 113, class: gr32, preferred-register: '' }
  - { id: 114, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%27' }
  - { reg: '$rsi', virtual-reg: '%28' }
  - { reg: '$rdx', virtual-reg: '%29' }
  - { reg: '$rcx', virtual-reg: '%30' }
  - { reg: '$r8', virtual-reg: '%31' }
  - { reg: '$r9', virtual-reg: '%32' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_37:
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi, $rdx, $rcx, $r8, $r9
  
    %32:gr64 = COPY $r9
    %31:gr64 = COPY $r8
    %30:gr64 = COPY $rcx
    %29:gr64 = COPY $rdx
    %28:gr64 = COPY $rsi
    %27:gr64 = COPY $rdi
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %29
    CALL64pcrel32 target-flags(x86-plt) @strlen, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %49:gr64 = COPY $rax
    %47:gr64 = COPY %49
    %48:gr64 = SHL64ri %47, 2, implicit-def $eflags
    %43:gr64 = MOV64ri @.str
    %44:gr32 = MOV32ri 236
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %43
    $esi = COPY %44
    $rdx = COPY %48
    CALL64pcrel32 target-flags(x86-plt) @sre_malloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %46:gr64 = COPY $rax
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %29
    CALL64pcrel32 target-flags(x86-plt) @strlen, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    %42:gr64 = COPY $rax
    %40:gr64 = COPY %42
    %41:gr64 = SHL64ri %40, 2, implicit-def $eflags
    %36:gr64 = MOV64ri @.str
    %37:gr32 = MOV32ri 237
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %36
    $esi = COPY %37
    $rdx = COPY %41
    CALL64pcrel32 target-flags(x86-plt) @sre_malloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %39:gr64 = COPY $rax
    %33:gr32 = MOV32r0 implicit-def $eflags
    %34:gr64 = SUBREG_TO_REG 0, %33, %subreg.sub_32bit
    %35:gr32 = MOV32r0 implicit-def $eflags
    %103:gr64_nosp = COPY %34
    %104:gr32 = COPY %35
  
  bb.1.BB_38:
    successors: %bb.2(0x40000000), %bb.16(0x40000000)
  
    %4:gr32 = COPY %104
    %3:gr64_nosp = COPY %103
    %50:gr8 = MOV8rm %28, 1, %3, 0, $noreg :: (load (s8) from %ir.15, !tbaa !11)
    TEST8rr %50, %50, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit $eflags
    JMP_1 %bb.16
  
  bb.16.BB_38:
    successors: %bb.4(0x40000000), %bb.17(0x40000000)
  
    %51:gr8 = SUB8ri %50, 32, implicit-def $eflags
    %105:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.17
  
  bb.17.BB_38:
    successors: %bb.4(0x40000000), %bb.18(0x40000000)
  
    %52:gr8 = ADD8ri %50, -45, implicit-def dead $eflags
    %53:gr8 = SUB8ri %52, 2, implicit-def $eflags
    %105:gr32 = COPY %4
    JCC_1 %bb.4, 2, implicit $eflags
    JMP_1 %bb.18
  
  bb.18.BB_38:
    successors: %bb.4(0x40000000), %bb.19(0x40000000)
  
    %54:gr8 = SUB8ri %50, 95, implicit-def $eflags
    %105:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.19
  
  bb.19.BB_38:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    %55:gr8 = SUB8ri %50, 126, implicit-def $eflags
    %105:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.3
  
  bb.2.BB_39:
    successors: %bb.5(0x80000000)
  
    %56:gr32 = MOV32r0 implicit-def $eflags
    %57:gr64 = SUBREG_TO_REG 0, %56, %subreg.sub_32bit
    %58:gr32 = MOV32r0 implicit-def $eflags
    %106:gr64_nosp = COPY %57
    %107:gr32 = COPY %58
    %108:gr32 = COPY %58
    %109:gr32 = COPY %58
    JMP_1 %bb.5
  
  bb.3.BB_40:
    successors: %bb.4(0x80000000)
  
    CMP32mi %27, 4, %3, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.18, !tbaa !9)
    %100:gr8 = SETCCr 5, implicit $eflags
    %98:gr8 = AND8ri %100, 1, implicit-def $eflags
    %99:gr32 = MOVZX32rr8 %98
    %96:gr64_nosp = MOVSX64rr32 %4
    MOV32mr %39, 4, %96, 0, $noreg, %99 :: (store (s32) into %ir.23, !tbaa !9)
    %93:gr32 = ADD32ri %4, 1, implicit-def $eflags
    %105:gr32 = COPY %93
  
  bb.4.BB_41:
    successors: %bb.1(0x80000000)
  
    %7:gr32 = COPY %105
    %102:gr64 = ADD64ri32 %3, 1, implicit-def $eflags
    %103:gr64_nosp = COPY %102
    %104:gr32 = COPY %7
    JMP_1 %bb.1
  
  bb.5.BB_42:
    successors: %bb.15(0x40000000), %bb.20(0x40000000)
  
    %12:gr32 = COPY %109
    %11:gr32 = COPY %108
    %10:gr32 = COPY %107
    %9:gr64_nosp = COPY %106
    %13:gr64 = ADD64rr %29, %9, implicit-def dead $eflags
    %14:gr8 = MOV8rm %29, 1, %9, 0, $noreg :: (load (s8) from %ir.31, !tbaa !11)
    TEST8rr %14, %14, implicit-def $eflags
    JCC_1 %bb.15, 4, implicit $eflags
    JMP_1 %bb.20
  
  bb.20.BB_42:
    successors: %bb.10(0x40000000), %bb.21(0x40000000)
  
    %59:gr8 = SUB8ri %14, 32, implicit-def $eflags
    %111:gr8 = COPY %14
    %112:gr32 = COPY %12
    JCC_1 %bb.10, 4, implicit $eflags
    JMP_1 %bb.21
  
  bb.21.BB_42:
    successors: %bb.10(0x40000000), %bb.22(0x40000000)
  
    %60:gr8 = ADD8ri %14, -45, implicit-def dead $eflags
    %61:gr8 = SUB8ri %60, 2, implicit-def $eflags
    %111:gr8 = COPY %14
    %112:gr32 = COPY %12
    JCC_1 %bb.10, 2, implicit $eflags
    JMP_1 %bb.22
  
  bb.22.BB_42:
    successors: %bb.10(0x40000000), %bb.23(0x40000000)
  
    %62:gr8 = SUB8ri %14, 95, implicit-def $eflags
    %111:gr8 = COPY %14
    %112:gr32 = COPY %12
    JCC_1 %bb.10, 4, implicit $eflags
    JMP_1 %bb.23
  
  bb.23.BB_42:
    successors: %bb.10(0x40000000), %bb.6(0x40000000)
  
    %63:gr8 = SUB8ri %14, 126, implicit-def $eflags
    %111:gr8 = COPY %14
    %112:gr32 = COPY %12
    JCC_1 %bb.10, 4, implicit $eflags
    JMP_1 %bb.6
  
  bb.6.BB_43:
    successors: %bb.10(0x40000000), %bb.7(0x40000000)
  
    %66:gr64_nosp = MOVSX64rr32 %10
    CMP32mi %39, 4, %66, 0, $noreg, 0, implicit-def $eflags :: (load (s32) from %ir.34, !tbaa !9)
    %111:gr8 = COPY %14
    %112:gr32 = COPY %12
    JCC_1 %bb.10, 4, implicit $eflags
  
  bb.7.BB_44:
    successors: %bb.9(0x40000000), %bb.24(0x40000000)
  
    %15:gr8 = MOV8rm %30, 1, %9, 0, $noreg :: (load (s8) from %ir.37, !tbaa !11)
    %68:gr32 = MOV32ri -1
    %69:gr8 = SUB8ri %15, 32, implicit-def $eflags
    %110:gr32 = COPY %68
    JCC_1 %bb.9, 4, implicit $eflags
    JMP_1 %bb.24
  
  bb.24.BB_44:
    successors: %bb.9(0x40000000), %bb.25(0x40000000)
  
    %70:gr8 = ADD8ri %15, -45, implicit-def dead $eflags
    %71:gr8 = SUB8ri %70, 2, implicit-def $eflags
    %110:gr32 = COPY %68
    JCC_1 %bb.9, 2, implicit $eflags
    JMP_1 %bb.25
  
  bb.25.BB_44:
    successors: %bb.9(0x40000000), %bb.8(0x40000000)
  
    %72:gr8 = SUB8ri %15, 95, implicit-def $eflags
    %110:gr32 = COPY %68
    JCC_1 %bb.9, 4, implicit $eflags
    JMP_1 %bb.8
  
  bb.8.BB_45:
    successors: %bb.9(0x80000000)
  
    %73:gr32 = MOV32ri 4294967295
    CMP8ri %15, 126, implicit-def $eflags
    %74:gr32 = CMOV32rr %11, %73, 4, implicit $eflags
    %110:gr32 = COPY %74
  
  bb.9.BB_46:
    successors: %bb.10(0x80000000)
  
    %17:gr32 = COPY %110
    %78:gr64_nosp = MOVSX64rr32 %12
    MOV32mr %46, 4, %78, 0, $noreg, %17 :: (store (s32) into %ir.43, !tbaa !9)
    %76:gr32 = ADD32ri %12, 1, implicit-def $eflags
    %75:gr8 = MOV8rm %13, 1, $noreg, 0, $noreg :: (load (s8) from %ir.31, !tbaa !11)
    %111:gr8 = COPY %75
    %112:gr32 = COPY %76
  
  bb.10.BB_47:
    successors: %bb.12(0x40000000), %bb.26(0x40000000)
  
    %21:gr32 = COPY %112
    %20:gr8 = COPY %111
    %79:gr8 = SUB8ri %20, 32, implicit-def $eflags
    %113:gr32 = COPY %10
    JCC_1 %bb.12, 4, implicit $eflags
    JMP_1 %bb.26
  
  bb.26.BB_47:
    successors: %bb.12(0x40000000), %bb.27(0x40000000)
  
    %80:gr8 = ADD8ri %20, -45, implicit-def dead $eflags
    %81:gr8 = SUB8ri %80, 2, implicit-def $eflags
    %113:gr32 = COPY %10
    JCC_1 %bb.12, 2, implicit $eflags
    JMP_1 %bb.27
  
  bb.27.BB_47:
    successors: %bb.12(0x40000000), %bb.28(0x40000000)
  
    %82:gr8 = SUB8ri %20, 95, implicit-def $eflags
    %113:gr32 = COPY %10
    JCC_1 %bb.12, 4, implicit $eflags
    JMP_1 %bb.28
  
  bb.28.BB_47:
    successors: %bb.12(0x40000000), %bb.11(0x40000000)
  
    %83:gr8 = SUB8ri %20, 126, implicit-def $eflags
    %113:gr32 = COPY %10
    JCC_1 %bb.12, 4, implicit $eflags
    JMP_1 %bb.11
  
  bb.11.BB_48:
    successors: %bb.12(0x80000000)
  
    %84:gr32 = ADD32ri %10, 1, implicit-def $eflags
    %113:gr32 = COPY %84
  
  bb.12.BB_49:
    successors: %bb.14(0x40000000), %bb.29(0x40000000)
  
    %23:gr32 = COPY %113
    %85:gr8 = MOV8rm %30, 1, %9, 0, $noreg :: (load (s8) from %ir.50, !tbaa !11)
    %86:gr8 = SUB8ri %85, 32, implicit-def $eflags
    %114:gr32 = COPY %11
    JCC_1 %bb.14, 4, implicit $eflags
    JMP_1 %bb.29
  
  bb.29.BB_49:
    successors: %bb.14(0x40000000), %bb.30(0x40000000)
  
    %87:gr8 = ADD8ri %85, -45, implicit-def dead $eflags
    %88:gr8 = SUB8ri %87, 2, implicit-def $eflags
    %114:gr32 = COPY %11
    JCC_1 %bb.14, 2, implicit $eflags
    JMP_1 %bb.30
  
  bb.30.BB_49:
    successors: %bb.14(0x40000000), %bb.31(0x40000000)
  
    %89:gr8 = SUB8ri %85, 95, implicit-def $eflags
    %114:gr32 = COPY %11
    JCC_1 %bb.14, 4, implicit $eflags
    JMP_1 %bb.31
  
  bb.31.BB_49:
    successors: %bb.14(0x40000000), %bb.13(0x40000000)
  
    %90:gr8 = SUB8ri %85, 126, implicit-def $eflags
    %114:gr32 = COPY %11
    JCC_1 %bb.14, 4, implicit $eflags
    JMP_1 %bb.13
  
  bb.13.BB_50:
    successors: %bb.14(0x80000000)
  
    %91:gr32 = ADD32ri %11, 1, implicit-def $eflags
    %114:gr32 = COPY %91
  
  bb.14.BB_51:
    successors: %bb.5(0x80000000)
  
    %25:gr32 = COPY %114
    %92:gr64 = ADD64ri32 %9, 1, implicit-def $eflags
    %106:gr64_nosp = COPY %92
    %107:gr32 = COPY %23
    %108:gr32 = COPY %25
    %109:gr32 = COPY %21
    JMP_1 %bb.5
  
  bb.15.BB_52:
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %39
    CALL64pcrel32 target-flags(x86-plt) @free, csr_64, implicit $rsp, implicit $ssp, implicit $rdi
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    MOV32mr %32, 1, $noreg, 0, $noreg, %12 :: (store (s32) into %ir.5, !tbaa !9)
    MOV64mr %31, 1, $noreg, 0, $noreg, %46 :: (store (s64) into %ir.55, !tbaa !5)
    RET64

...
---
name:            CompareMultAlignments
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: fr32, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: fr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64_nosp, preferred-register: '' }
  - { id: 11, class: fr32, preferred-register: '' }
  - { id: 12, class: fr32, preferred-register: '' }
  - { id: 13, class: fr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: fr32, preferred-register: '' }
  - { id: 16, class: fr32, preferred-register: '' }
  - { id: 17, class: fr32, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: fr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: fr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: fr32, preferred-register: '' }
  - { id: 39, class: fr32, preferred-register: '' }
  - { id: 40, class: gr64, preferred-register: '' }
  - { id: 41, class: gr64, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: fr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: fr32, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: fr64, preferred-register: '' }
  - { id: 53, class: fr32, preferred-register: '' }
  - { id: 54, class: fr64, preferred-register: '' }
  - { id: 55, class: fr64, preferred-register: '' }
  - { id: 56, class: fr64, preferred-register: '' }
  - { id: 57, class: fr64, preferred-register: '' }
  - { id: 58, class: fr64, preferred-register: '' }
  - { id: 59, class: fr64, preferred-register: '' }
  - { id: 60, class: fr64, preferred-register: '' }
  - { id: 61, class: fr64, preferred-register: '' }
  - { id: 62, class: fr32, preferred-register: '' }
  - { id: 63, class: fr64, preferred-register: '' }
  - { id: 64, class: fr32, preferred-register: '' }
  - { id: 65, class: fr64, preferred-register: '' }
  - { id: 66, class: fr64, preferred-register: '' }
  - { id: 67, class: fr64, preferred-register: '' }
  - { id: 68, class: fr64, preferred-register: '' }
  - { id: 69, class: fr32, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: fr32, preferred-register: '' }
  - { id: 73, class: gr64_nosp, preferred-register: '' }
  - { id: 74, class: fr32, preferred-register: '' }
  - { id: 75, class: fr32, preferred-register: '' }
  - { id: 76, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%18' }
  - { reg: '$rsi', virtual-reg: '%20' }
  - { reg: '$edx', virtual-reg: '%22' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'float -1.000000e+00'
    alignment:       4
    isTargetSpecific: false
  - id:              1
    value:           'double -1.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 2.000000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_53:
    successors: %bb.7(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $edx
  
    %22:gr32 = COPY $edx
    %20:gr64 = COPY $rsi
    %18:gr64 = COPY $rdi
    %19:gr64 = COPY killed %18
    %21:gr64 = COPY killed %20
    %23:gr32 = COPY killed %22
    %24:fr32 = FsFLD0SS
    CMP32ri %23, 0, implicit-def $eflags
    %75:fr32 = COPY %24
    JCC_1 %bb.7, 14, implicit $eflags
  
  bb.1.BB_54:
    successors: %bb.3(0x80000000)
  
    %31:gr32 = MOV32rr %23
    %32:gr64 = SUBREG_TO_REG 0, %31, %subreg.sub_32bit
    %29:gr32 = MOV32rr %23
    %30:gr64 = SUBREG_TO_REG 0, %29, %subreg.sub_32bit
    %25:gr32 = MOV32r0 implicit-def $eflags
    %26:gr64 = SUBREG_TO_REG 0, %25, %subreg.sub_32bit
    %27:gr64 = MOV32ri64 1
    %28:fr32 = FsFLD0SS
    %70:gr64 = COPY %26
    %71:gr64 = COPY %27
    %72:fr32 = COPY %28
    JMP_1 %bb.3
  
  bb.2.BB_55:
    successors: %bb.7(0x40000000), %bb.3(0x40000000)
  
    %2:fr32 = COPY %69
    %51:gr64 = ADD64ri32 %5, 1, implicit-def $eflags
    CMP64rr %33, %30, implicit-def $eflags
    %70:gr64 = COPY %33
    %71:gr64 = COPY %51
    %72:fr32 = COPY %2
    %75:fr32 = COPY %2
    JCC_1 %bb.7, 4, implicit $eflags
  
  bb.3.BB_56:
    successors: %bb.2(0x40000000), %bb.4(0x40000000)
  
    %6:fr32 = COPY %72
    %5:gr64 = COPY %71
    %4:gr64 = COPY %70
    %33:gr64 = ADD64ri32 %4, 1, implicit-def $eflags
    CMP64rr %33, %32, implicit-def $eflags
    %69:fr32 = COPY %6
    JCC_1 %bb.2, 3, implicit $eflags
  
  bb.4.BB_57:
    successors: %bb.5(0x80000000)
  
    %36:gr64 = SHL64ri %4, 3, implicit-def $eflags
    %37:gr64 = ADD64rr %19, %36, implicit-def $eflags
    %34:gr64 = SHL64ri %4, 3, implicit-def $eflags
    %35:gr64 = ADD64rr %21, %34, implicit-def $eflags
    %73:gr64_nosp = COPY %5
    %74:fr32 = COPY %6
  
  bb.5.BB_58:
    successors: %bb.8(0x40000000), %bb.6(0x40000000)
  
    %11:fr32 = COPY %74
    %10:gr64_nosp = COPY %73
    %48:gr64 = MOV64rm %37, 1, $noreg, 0, $noreg :: (load (s64) from %ir.14, !tbaa !5)
    %47:gr64 = MOV64rm %19, 8, %10, 0, $noreg :: (load (s64) from %ir.19, !tbaa !5)
    %46:gr64 = MOV64rm %35, 1, $noreg, 0, $noreg :: (load (s64) from %ir.15, !tbaa !5)
    %45:gr64 = MOV64rm %21, 8, %10, 0, $noreg :: (load (s64) from %ir.22, !tbaa !5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %48
    $rsi = COPY %47
    $rdx = COPY %46
    $rcx = COPY %45
    CALL64pcrel32 @ComparePairAlignments, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %44:fr32 = COPY $xmm0
    %38:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %39:fr32 = FsFLD0SS
    UCOMISSrr %39, %44, implicit-def $eflags, implicit $mxcsr
    %76:fr32 = COPY %38
    JCC_1 %bb.8, 7, implicit $eflags
  
  bb.6.BB_59:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    %50:fr32 = ADDSSrr %11, %44, implicit $mxcsr
    %49:gr64 = ADD64ri32 %10, 1, implicit-def $eflags
    CMP64rr %49, %30, implicit-def $eflags
    %69:fr32 = COPY %50
    %73:gr64_nosp = COPY %49
    %74:fr32 = COPY %50
    JCC_1 %bb.2, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.7.BB_60:
    successors: %bb.8(0x80000000)
  
    %15:fr32 = COPY %75
    %68:fr64 = CVTSS2SDrr %15, implicit $mxcsr
    %66:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    %67:fr64 = MULSDrr %68, %66, implicit $mxcsr
    %64:fr32 = CVTSI2SSrr %23, implicit $mxcsr
    %63:fr64 = CVTSS2SDrr %64, implicit $mxcsr
    %60:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
    %61:fr64 = ADDSDrr %63, %60, implicit $mxcsr
    %59:fr64 = MULSDrr %61, %63, implicit $mxcsr
    %56:fr64 = DIVSDrr %67, %59, implicit $mxcsr
    %53:fr32 = CVTSD2SSrr %56, implicit $mxcsr
    %76:fr32 = COPY %53
  
  bb.8.BB_61:
    %17:fr32 = COPY %76
    $xmm0 = COPY %17
    RET64 implicit $xmm0

...
---
name:            CompareRefMultAlignments
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: fr32, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: fr32, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64_nosp, preferred-register: '' }
  - { id: 11, class: fr32, preferred-register: '' }
  - { id: 12, class: fr32, preferred-register: '' }
  - { id: 13, class: fr32, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: fr32, preferred-register: '' }
  - { id: 16, class: fr32, preferred-register: '' }
  - { id: 17, class: fr32, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: fr32, preferred-register: '' }
  - { id: 27, class: gr32, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: fr32, preferred-register: '' }
  - { id: 31, class: gr32, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr32, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64, preferred-register: '' }
  - { id: 37, class: gr64, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr64, preferred-register: '' }
  - { id: 40, class: fr32, preferred-register: '' }
  - { id: 41, class: fr32, preferred-register: '' }
  - { id: 42, class: gr64, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr64, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: fr32, preferred-register: '' }
  - { id: 47, class: gr64, preferred-register: '' }
  - { id: 48, class: gr64, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: gr64, preferred-register: '' }
  - { id: 51, class: gr64, preferred-register: '' }
  - { id: 52, class: fr32, preferred-register: '' }
  - { id: 53, class: gr64, preferred-register: '' }
  - { id: 54, class: fr64, preferred-register: '' }
  - { id: 55, class: fr32, preferred-register: '' }
  - { id: 56, class: fr64, preferred-register: '' }
  - { id: 57, class: fr64, preferred-register: '' }
  - { id: 58, class: fr64, preferred-register: '' }
  - { id: 59, class: fr64, preferred-register: '' }
  - { id: 60, class: fr64, preferred-register: '' }
  - { id: 61, class: fr64, preferred-register: '' }
  - { id: 62, class: fr64, preferred-register: '' }
  - { id: 63, class: fr64, preferred-register: '' }
  - { id: 64, class: fr32, preferred-register: '' }
  - { id: 65, class: fr64, preferred-register: '' }
  - { id: 66, class: fr32, preferred-register: '' }
  - { id: 67, class: fr64, preferred-register: '' }
  - { id: 68, class: fr64, preferred-register: '' }
  - { id: 69, class: fr64, preferred-register: '' }
  - { id: 70, class: fr64, preferred-register: '' }
  - { id: 71, class: fr32, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: fr32, preferred-register: '' }
  - { id: 75, class: gr64_nosp, preferred-register: '' }
  - { id: 76, class: fr32, preferred-register: '' }
  - { id: 77, class: fr32, preferred-register: '' }
  - { id: 78, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%18' }
  - { reg: '$rsi', virtual-reg: '%20' }
  - { reg: '$rdx', virtual-reg: '%22' }
  - { reg: '$ecx', virtual-reg: '%24' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'float -1.000000e+00'
    alignment:       4
    isTargetSpecific: false
  - id:              1
    value:           'double -1.000000e+00'
    alignment:       8
    isTargetSpecific: false
  - id:              2
    value:           'double 2.000000e+00'
    alignment:       8
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_62:
    successors: %bb.7(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi, $rdx, $ecx
  
    %24:gr32 = COPY $ecx
    %22:gr64 = COPY $rdx
    %20:gr64 = COPY $rsi
    %18:gr64 = COPY $rdi
    %19:gr64 = COPY killed %18
    %21:gr64 = COPY killed %20
    %23:gr64 = COPY killed %22
    %25:gr32 = COPY killed %24
    %26:fr32 = FsFLD0SS
    CMP32ri %25, 0, implicit-def $eflags
    %77:fr32 = COPY %26
    JCC_1 %bb.7, 14, implicit $eflags
  
  bb.1.BB_63:
    successors: %bb.3(0x80000000)
  
    %33:gr32 = MOV32rr %25
    %34:gr64 = SUBREG_TO_REG 0, %33, %subreg.sub_32bit
    %31:gr32 = MOV32rr %25
    %32:gr64 = SUBREG_TO_REG 0, %31, %subreg.sub_32bit
    %27:gr32 = MOV32r0 implicit-def $eflags
    %28:gr64 = SUBREG_TO_REG 0, %27, %subreg.sub_32bit
    %29:gr64 = MOV32ri64 1
    %30:fr32 = FsFLD0SS
    %72:gr64 = COPY %28
    %73:gr64 = COPY %29
    %74:fr32 = COPY %30
    JMP_1 %bb.3
  
  bb.2.BB_64:
    successors: %bb.7(0x40000000), %bb.3(0x40000000)
  
    %2:fr32 = COPY %71
    %53:gr64 = ADD64ri32 %5, 1, implicit-def $eflags
    CMP64rr %35, %32, implicit-def $eflags
    %72:gr64 = COPY %35
    %73:gr64 = COPY %53
    %74:fr32 = COPY %2
    %77:fr32 = COPY %2
    JCC_1 %bb.7, 4, implicit $eflags
  
  bb.3.BB_65:
    successors: %bb.2(0x40000000), %bb.4(0x40000000)
  
    %6:fr32 = COPY %74
    %5:gr64 = COPY %73
    %4:gr64 = COPY %72
    %35:gr64 = ADD64ri32 %4, 1, implicit-def $eflags
    CMP64rr %35, %34, implicit-def $eflags
    %71:fr32 = COPY %6
    JCC_1 %bb.2, 3, implicit $eflags
  
  bb.4.BB_66:
    successors: %bb.5(0x80000000)
  
    %38:gr64 = SHL64ri %4, 3, implicit-def $eflags
    %39:gr64 = ADD64rr %21, %38, implicit-def $eflags
    %36:gr64 = SHL64ri %4, 3, implicit-def $eflags
    %37:gr64 = ADD64rr %23, %36, implicit-def $eflags
    %75:gr64_nosp = COPY %5
    %76:fr32 = COPY %6
  
  bb.5.BB_67:
    successors: %bb.8(0x40000000), %bb.6(0x40000000)
  
    %11:fr32 = COPY %76
    %10:gr64_nosp = COPY %75
    %50:gr64 = MOV64rm %39, 1, $noreg, 0, $noreg :: (load (s64) from %ir.15, !tbaa !5)
    %49:gr64 = MOV64rm %21, 8, %10, 0, $noreg :: (load (s64) from %ir.20, !tbaa !5)
    %48:gr64 = MOV64rm %37, 1, $noreg, 0, $noreg :: (load (s64) from %ir.16, !tbaa !5)
    %47:gr64 = MOV64rm %23, 8, %10, 0, $noreg :: (load (s64) from %ir.23, !tbaa !5)
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %19
    $rsi = COPY %50
    $rdx = COPY %49
    $rcx = COPY %48
    $r8 = COPY %47
    CALL64pcrel32 @CompareRefPairAlignments, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %46:fr32 = COPY $xmm0
    %40:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    %41:fr32 = FsFLD0SS
    UCOMISSrr %41, %46, implicit-def $eflags, implicit $mxcsr
    %78:fr32 = COPY %40
    JCC_1 %bb.8, 7, implicit $eflags
  
  bb.6.BB_68:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    %52:fr32 = ADDSSrr %11, %46, implicit $mxcsr
    %51:gr64 = ADD64ri32 %10, 1, implicit-def $eflags
    CMP64rr %51, %32, implicit-def $eflags
    %71:fr32 = COPY %52
    %75:gr64_nosp = COPY %51
    %76:fr32 = COPY %52
    JCC_1 %bb.2, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.7.BB_69:
    successors: %bb.8(0x80000000)
  
    %15:fr32 = COPY %77
    %70:fr64 = CVTSS2SDrr %15, implicit $mxcsr
    %68:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.2, $noreg
    %69:fr64 = MULSDrr %70, %68, implicit $mxcsr
    %66:fr32 = CVTSI2SSrr %25, implicit $mxcsr
    %65:fr64 = CVTSS2SDrr %66, implicit $mxcsr
    %62:fr64 = MOVSDrm_alt $rip, 1, $noreg, %const.1, $noreg
    %63:fr64 = ADDSDrr %65, %62, implicit $mxcsr
    %61:fr64 = MULSDrr %63, %65, implicit $mxcsr
    %58:fr64 = DIVSDrr %69, %61, implicit $mxcsr
    %55:fr32 = CVTSD2SSrr %58, implicit $mxcsr
    %78:fr32 = COPY %55
  
  bb.8.BB_70:
    %17:fr32 = COPY %78
    $xmm0 = COPY %17
    RET64 implicit $xmm0

...
---
name:            PairwiseIdentity
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr8, preferred-register: '' }
  - { id: 1, class: gr64_nosp, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr32, preferred-register: '' }
  - { id: 6, class: gr8, preferred-register: '' }
  - { id: 7, class: gr32, preferred-register: '' }
  - { id: 8, class: gr32, preferred-register: '' }
  - { id: 9, class: gr32, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr8, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: fr32, preferred-register: '' }
  - { id: 20, class: fr32, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: gr32, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr8, preferred-register: '' }
  - { id: 29, class: gr8, preferred-register: '' }
  - { id: 30, class: gr8, preferred-register: '' }
  - { id: 31, class: gr8, preferred-register: '' }
  - { id: 32, class: gr8, preferred-register: '' }
  - { id: 33, class: gr8, preferred-register: '' }
  - { id: 34, class: gr8, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr8, preferred-register: '' }
  - { id: 38, class: gr8, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr8, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr8, preferred-register: '' }
  - { id: 43, class: gr8, preferred-register: '' }
  - { id: 44, class: gr8, preferred-register: '' }
  - { id: 45, class: gr8, preferred-register: '' }
  - { id: 46, class: gr8, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr8, preferred-register: '' }
  - { id: 49, class: gr64, preferred-register: '' }
  - { id: 50, class: fr32, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: fr32, preferred-register: '' }
  - { id: 53, class: fr32, preferred-register: '' }
  - { id: 54, class: fr32, preferred-register: '' }
  - { id: 55, class: fr32, preferred-register: '' }
  - { id: 56, class: fr32, preferred-register: '' }
  - { id: 57, class: gr64_nosp, preferred-register: '' }
  - { id: 58, class: gr8, preferred-register: '' }
  - { id: 59, class: gr32, preferred-register: '' }
  - { id: 60, class: gr32, preferred-register: '' }
  - { id: 61, class: gr32, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr32, preferred-register: '' }
  - { id: 64, class: gr32, preferred-register: '' }
  - { id: 65, class: gr32, preferred-register: '' }
  - { id: 66, class: gr32, preferred-register: '' }
  - { id: 67, class: gr32, preferred-register: '' }
  - { id: 68, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%21' }
  - { reg: '$rsi', virtual-reg: '%23' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.BB_71:
    successors: %bb.7(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $rsi
  
    %23:gr64 = COPY $rsi
    %21:gr64 = COPY $rdi
    %22:gr64 = COPY killed %21
    %24:gr64 = COPY killed %23
    %28:gr8 = MOV8rm %22, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0, !tbaa !11)
    %25:gr32 = MOV32r0 implicit-def $eflags
    %26:gr32 = MOV32r0 implicit-def $eflags
    %27:gr64 = SUBREG_TO_REG 0, %26, %subreg.sub_32bit
    CMP8ri %28, 0, implicit-def $eflags
    %57:gr64_nosp = COPY %27
    %58:gr8 = COPY %28
    %59:gr32 = COPY %25
    %60:gr32 = COPY %25
    %61:gr32 = COPY %25
    %65:gr32 = COPY %25
    %66:gr32 = COPY %25
    %67:gr32 = COPY %25
    JCC_1 %bb.7, 4, implicit $eflags
  
  bb.1.BB_72:
    successors: %bb.7(0x40000000), %bb.2(0x40000000)
  
    %5:gr32 = COPY %61
    %4:gr32 = COPY %60
    %3:gr32 = COPY %59
    %2:gr8 = COPY %58
    %1:gr64_nosp = COPY %57
    %29:gr8 = MOV8rm %24, 1, %1, 0, $noreg :: (load (s8) from %ir.9, !tbaa !11)
    CMP8ri %29, 0, implicit-def $eflags
    %65:gr32 = COPY %5
    %66:gr32 = COPY %4
    %67:gr32 = COPY %3
    JCC_1 %bb.7, 4, implicit $eflags
  
  bb.2.BB_73:
    successors: %bb.4(0x40000000), %bb.10(0x40000000)
  
    %30:gr8 = SUB8ri %2, 32, implicit-def $eflags
    %62:gr32 = COPY %5
    %63:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.10
  
  bb.10.BB_73:
    successors: %bb.4(0x40000000), %bb.11(0x40000000)
  
    %31:gr8 = ADD8ri %2, -45, implicit-def dead $eflags
    %32:gr8 = SUB8ri %31, 2, implicit-def $eflags
    %62:gr32 = COPY %5
    %63:gr32 = COPY %4
    JCC_1 %bb.4, 2, implicit $eflags
    JMP_1 %bb.11
  
  bb.11.BB_73:
    successors: %bb.4(0x40000000), %bb.12(0x40000000)
  
    %33:gr8 = SUB8ri %2, 95, implicit-def $eflags
    %62:gr32 = COPY %5
    %63:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.12
  
  bb.12.BB_73:
    successors: %bb.4(0x40000000), %bb.3(0x40000000)
  
    %34:gr8 = SUB8ri %2, 126, implicit-def $eflags
    %62:gr32 = COPY %5
    %63:gr32 = COPY %4
    JCC_1 %bb.4, 4, implicit $eflags
    JMP_1 %bb.3
  
  bb.3.BB_74:
    successors: %bb.4(0x80000000)
  
    %41:gr32 = ADD32ri %4, 1, implicit-def $eflags
    CMP8rr %2, %29, implicit-def $eflags
    %40:gr8 = SETCCr 4, implicit $eflags
    %38:gr8 = AND8ri %40, 1, implicit-def $eflags
    %39:gr32 = MOVZX32rr8 %38
    %36:gr32 = ADD32rr %5, %39, implicit-def $eflags
    %62:gr32 = COPY %36
    %63:gr32 = COPY %41
  
  bb.4.BB_75:
    successors: %bb.6(0x40000000), %bb.13(0x40000000)
  
    %10:gr32 = COPY %63
    %9:gr32 = COPY %62
    %42:gr8 = SUB8ri %29, 32, implicit-def $eflags
    %64:gr32 = COPY %3
    JCC_1 %bb.6, 4, implicit $eflags
    JMP_1 %bb.13
  
  bb.13.BB_75:
    successors: %bb.6(0x40000000), %bb.14(0x40000000)
  
    %43:gr8 = ADD8ri %29, -45, implicit-def dead $eflags
    %44:gr8 = SUB8ri %43, 2, implicit-def $eflags
    %64:gr32 = COPY %3
    JCC_1 %bb.6, 2, implicit $eflags
    JMP_1 %bb.14
  
  bb.14.BB_75:
    successors: %bb.6(0x40000000), %bb.15(0x40000000)
  
    %45:gr8 = SUB8ri %29, 95, implicit-def $eflags
    %64:gr32 = COPY %3
    JCC_1 %bb.6, 4, implicit $eflags
    JMP_1 %bb.15
  
  bb.15.BB_75:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    %46:gr8 = SUB8ri %29, 126, implicit-def $eflags
    %64:gr32 = COPY %3
    JCC_1 %bb.6, 4, implicit $eflags
    JMP_1 %bb.5
  
  bb.5.BB_76:
    successors: %bb.6(0x80000000)
  
    %47:gr32 = ADD32ri %3, 1, implicit-def $eflags
    %64:gr32 = COPY %47
  
  bb.6.BB_77:
    successors: %bb.1(0x40000000), %bb.7(0x40000000)
  
    %12:gr32 = COPY %64
    %49:gr64 = ADD64ri32 %1, 1, implicit-def $eflags
    %48:gr8 = MOV8rm %22, 1, %1, 1, $noreg :: (load (s8) from %ir.21, !tbaa !11)
    CMP8ri %48, 0, implicit-def $eflags
    %57:gr64_nosp = COPY %49
    %58:gr8 = COPY %48
    %59:gr32 = COPY %12
    %60:gr32 = COPY %10
    %61:gr32 = COPY %9
    %65:gr32 = COPY %9
    %66:gr32 = COPY %10
    %67:gr32 = COPY %12
    JCC_1 %bb.1, 5, implicit $eflags
  
  bb.7.BB_78:
    successors: %bb.9(0x40000000), %bb.8(0x40000000)
  
    %17:gr32 = COPY %67
    %16:gr32 = COPY %66
    %15:gr32 = COPY %65
    CMP32rr %17, %16, implicit-def $eflags
    %51:gr32 = CMOV32rr %16, %17, 12, implicit $eflags
    %50:fr32 = FsFLD0SS
    CMP32ri %51, 0, implicit-def $eflags
    %68:fr32 = COPY %50
    JCC_1 %bb.9, 4, implicit $eflags
  
  bb.8.BB_79:
    successors: %bb.9(0x80000000)
  
    %56:fr32 = CVTSI2SSrr %15, implicit $mxcsr
    %55:fr32 = CVTSI2SSrr %51, implicit $mxcsr
    %54:fr32 = DIVSSrr %56, %55, implicit $mxcsr
    %68:fr32 = COPY %54
  
  bb.9.BB_80:
    %20:fr32 = COPY %68
    $xmm0 = COPY %20
    RET64 implicit $xmm0

...
---
name:            AlignmentIdentityBySampling
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: fr64, preferred-register: '' }
  - { id: 1, class: fr32, preferred-register: '' }
  - { id: 2, class: gr32, preferred-register: '' }
  - { id: 3, class: gr32, preferred-register: '' }
  - { id: 4, class: gr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr8, preferred-register: '' }
  - { id: 8, class: gr64_nosp, preferred-register: '' }
  - { id: 9, class: gr8, preferred-register: '' }
  - { id: 10, class: gr32, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr32, preferred-register: '' }
  - { id: 13, class: gr8, preferred-register: '' }
  - { id: 14, class: gr32, preferred-register: '' }
  - { id: 15, class: gr32, preferred-register: '' }
  - { id: 16, class: gr32, preferred-register: '' }
  - { id: 17, class: gr32, preferred-register: '' }
  - { id: 18, class: gr32, preferred-register: '' }
  - { id: 19, class: gr32, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr8, preferred-register: '' }
  - { id: 22, class: gr32, preferred-register: '' }
  - { id: 23, class: gr32, preferred-register: '' }
  - { id: 24, class: gr32, preferred-register: '' }
  - { id: 25, class: gr32, preferred-register: '' }
  - { id: 26, class: fr32, preferred-register: '' }
  - { id: 27, class: fr32, preferred-register: '' }
  - { id: 28, class: fr32, preferred-register: '' }
  - { id: 29, class: gr32, preferred-register: '' }
  - { id: 30, class: fr32, preferred-register: '' }
  - { id: 31, class: fr32, preferred-register: '' }
  - { id: 32, class: fr32, preferred-register: '' }
  - { id: 33, class: gr64, preferred-register: '' }
  - { id: 34, class: gr64, preferred-register: '' }
  - { id: 35, class: gr32, preferred-register: '' }
  - { id: 36, class: gr32, preferred-register: '' }
  - { id: 37, class: gr32, preferred-register: '' }
  - { id: 38, class: gr32, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: fr32, preferred-register: '' }
  - { id: 42, class: fr32, preferred-register: '' }
  - { id: 43, class: fr32, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: fr64, preferred-register: '' }
  - { id: 46, class: fr64, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: fr64, preferred-register: '' }
  - { id: 49, class: fr64, preferred-register: '' }
  - { id: 50, class: fr64, preferred-register: '' }
  - { id: 51, class: fr64, preferred-register: '' }
  - { id: 52, class: gr32, preferred-register: '' }
  - { id: 53, class: fr64, preferred-register: '' }
  - { id: 54, class: fr64, preferred-register: '' }
  - { id: 55, class: fr64, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr32, preferred-register: '' }
  - { id: 58, class: gr64, preferred-register: '' }
  - { id: 59, class: gr8, preferred-register: '' }
  - { id: 60, class: gr64_nosp, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr64_nosp, preferred-register: '' }
  - { id: 63, class: gr64_nosp, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64_nosp, preferred-register: '' }
  - { id: 66, class: gr8, preferred-register: '' }
  - { id: 67, class: gr8, preferred-register: '' }
  - { id: 68, class: gr8, preferred-register: '' }
  - { id: 69, class: gr8, preferred-register: '' }
  - { id: 70, class: gr8, preferred-register: '' }
  - { id: 71, class: gr8, preferred-register: '' }
  - { id: 72, class: gr32, preferred-register: '' }
  - { id: 73, class: gr32, preferred-register: '' }
  - { id: 74, class: gr8, preferred-register: '' }
  - { id: 75, class: gr8, preferred-register: '' }
  - { id: 76, class: gr32, preferred-register: '' }
  - { id: 77, class: gr8, preferred-register: '' }
  - { id: 78, class: gr32, preferred-register: '' }
  - { id: 79, class: gr8, preferred-register: '' }
  - { id: 80, class: gr8, preferred-register: '' }
  - { id: 81, class: gr8, preferred-register: '' }
  - { id: 82, class: gr8, preferred-register: '' }
  - { id: 83, class: gr8, preferred-register: '' }
  - { id: 84, class: gr32, preferred-register: '' }
  - { id: 85, class: gr8, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: fr32, preferred-register: '' }
  - { id: 88, class: gr32, preferred-register: '' }
  - { id: 89, class: fr32, preferred-register: '' }
  - { id: 90, class: fr32, preferred-register: '' }
  - { id: 91, class: fr32, preferred-register: '' }
  - { id: 92, class: fr32, preferred-register: '' }
  - { id: 93, class: fr32, preferred-register: '' }
  - { id: 94, class: gr32, preferred-register: '' }
  - { id: 95, class: fr32, preferred-register: '' }
  - { id: 96, class: fr32, preferred-register: '' }
  - { id: 97, class: fr32, preferred-register: '' }
  - { id: 98, class: fr32, preferred-register: '' }
  - { id: 99, class: fr32, preferred-register: '' }
  - { id: 100, class: gr32, preferred-register: '' }
  - { id: 101, class: gr64_nosp, preferred-register: '' }
  - { id: 102, class: gr8, preferred-register: '' }
  - { id: 103, class: gr32, preferred-register: '' }
  - { id: 104, class: gr32, preferred-register: '' }
  - { id: 105, class: gr32, preferred-register: '' }
  - { id: 106, class: gr32, preferred-register: '' }
  - { id: 107, class: gr32, preferred-register: '' }
  - { id: 108, class: gr32, preferred-register: '' }
  - { id: 109, class: gr32, preferred-register: '' }
  - { id: 110, class: gr32, preferred-register: '' }
  - { id: 111, class: gr32, preferred-register: '' }
  - { id: 112, class: fr32, preferred-register: '' }
  - { id: 113, class: fr32, preferred-register: '' }
  - { id: 114, class: fr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%33' }
  - { reg: '$esi', virtual-reg: '%35' }
  - { reg: '$edx', virtual-reg: '%37' }
  - { reg: '$ecx', virtual-reg: '%39' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           'float 1.000000e+00'
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_81:
    successors: %bb.16(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $esi, $edx, $ecx
  
    %39:gr32 = COPY $ecx
    %37:gr32 = COPY $edx
    %35:gr32 = COPY $esi
    %33:gr64 = COPY $rdi
    %34:gr64 = COPY killed %33
    %36:gr32 = COPY killed %35
    %38:gr32 = COPY killed %37
    %40:gr32 = COPY killed %39
    %41:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    CMP32ri %38, 2, implicit-def $eflags
    %114:fr32 = COPY %41
    JCC_1 %bb.16, 12, implicit $eflags
  
  bb.1.BB_82:
    successors: %bb.15(0x40000000), %bb.2(0x40000000)
  
    %42:fr32 = FsFLD0SS
    CMP32ri %40, 0, implicit-def $eflags
    %113:fr32 = COPY %42
    JCC_1 %bb.15, 14, implicit $eflags
  
  bb.2.BB_83:
    successors: %bb.3(0x80000000)
  
    %45:fr64 = CVTSI2SDrr %38
    %43:fr32 = FsFLD0SS
    %44:gr32 = MOV32r0 implicit-def $eflags
    %99:fr32 = COPY %43
    %100:gr32 = COPY %44
  
  bb.3.BB_84:
    successors: %bb.4(0x80000000)
  
    %2:gr32 = COPY %100
    %1:fr32 = COPY %99
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @sre_random, csr_64, implicit $rsp, implicit $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %50:fr64 = COPY $xmm0
    %49:fr64 = MULSDrr %50, %45, implicit $mxcsr
    %47:gr32 = CVTTSD2SIrr %49, implicit $mxcsr
  
  bb.4.BB_85:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @sre_random, csr_64, implicit $rsp, implicit $ssp, implicit-def $xmm0
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %55:fr64 = COPY $xmm0
    %54:fr64 = MULSDrr %55, %45, implicit $mxcsr
    %52:gr32 = CVTTSD2SIrr %54, implicit $mxcsr
    CMP32rr %52, %47, implicit-def $eflags
    JCC_1 %bb.4, 4, implicit $eflags
  
  bb.5.BB_86:
    successors: %bb.12(0x40000000), %bb.6(0x40000000)
  
    %65:gr64_nosp = MOVSX64rr32 %47
    %64:gr64 = MOV64rm %34, 8, %65, 0, $noreg :: (load (s64) from %ir.17, !tbaa !5)
    %62:gr64_nosp = MOVSX64rr32 %52
    %61:gr64 = MOV64rm %34, 8, %62, 0, $noreg :: (load (s64) from %ir.20, !tbaa !5)
    %59:gr8 = MOV8rm %64, 1, $noreg, 0, $noreg :: (load (s8) from %ir.18, !tbaa !11)
    %56:gr32 = MOV32r0 implicit-def $eflags
    %57:gr32 = MOV32r0 implicit-def $eflags
    %58:gr64 = SUBREG_TO_REG 0, %57, %subreg.sub_32bit
    CMP8ri %59, 0, implicit-def $eflags
    %101:gr64_nosp = COPY %58
    %102:gr8 = COPY %59
    %103:gr32 = COPY %56
    %104:gr32 = COPY %56
    %105:gr32 = COPY %56
    %109:gr32 = COPY %56
    %110:gr32 = COPY %56
    %111:gr32 = COPY %56
    JCC_1 %bb.12, 4, implicit $eflags
  
  bb.6.BB_87:
    successors: %bb.12(0x40000000), %bb.7(0x40000000)
  
    %12:gr32 = COPY %105
    %11:gr32 = COPY %104
    %10:gr32 = COPY %103
    %9:gr8 = COPY %102
    %8:gr64_nosp = COPY %101
    %66:gr8 = MOV8rm %61, 1, %8, 0, $noreg :: (load (s8) from %ir.29, !tbaa !11)
    CMP8ri %66, 0, implicit-def $eflags
    %109:gr32 = COPY %12
    %110:gr32 = COPY %11
    %111:gr32 = COPY %10
    JCC_1 %bb.12, 4, implicit $eflags
  
  bb.7.BB_88:
    successors: %bb.9(0x40000000), %bb.17(0x40000000)
  
    %67:gr8 = SUB8ri %9, 32, implicit-def $eflags
    %106:gr32 = COPY %12
    %107:gr32 = COPY %11
    JCC_1 %bb.9, 4, implicit $eflags
    JMP_1 %bb.17
  
  bb.17.BB_88:
    successors: %bb.9(0x40000000), %bb.18(0x40000000)
  
    %68:gr8 = ADD8ri %9, -45, implicit-def dead $eflags
    %69:gr8 = SUB8ri %68, 2, implicit-def $eflags
    %106:gr32 = COPY %12
    %107:gr32 = COPY %11
    JCC_1 %bb.9, 2, implicit $eflags
    JMP_1 %bb.18
  
  bb.18.BB_88:
    successors: %bb.9(0x40000000), %bb.19(0x40000000)
  
    %70:gr8 = SUB8ri %9, 95, implicit-def $eflags
    %106:gr32 = COPY %12
    %107:gr32 = COPY %11
    JCC_1 %bb.9, 4, implicit $eflags
    JMP_1 %bb.19
  
  bb.19.BB_88:
    successors: %bb.9(0x40000000), %bb.8(0x40000000)
  
    %71:gr8 = SUB8ri %9, 126, implicit-def $eflags
    %106:gr32 = COPY %12
    %107:gr32 = COPY %11
    JCC_1 %bb.9, 4, implicit $eflags
    JMP_1 %bb.8
  
  bb.8.BB_89:
    successors: %bb.9(0x80000000)
  
    %78:gr32 = ADD32ri %11, 1, implicit-def $eflags
    CMP8rr %9, %66, implicit-def $eflags
    %77:gr8 = SETCCr 4, implicit $eflags
    %75:gr8 = AND8ri %77, 1, implicit-def $eflags
    %76:gr32 = MOVZX32rr8 %75
    %73:gr32 = ADD32rr %12, %76, implicit-def $eflags
    %106:gr32 = COPY %73
    %107:gr32 = COPY %78
  
  bb.9.BB_90:
    successors: %bb.11(0x40000000), %bb.20(0x40000000)
  
    %17:gr32 = COPY %107
    %16:gr32 = COPY %106
    %79:gr8 = SUB8ri %66, 32, implicit-def $eflags
    %108:gr32 = COPY %10
    JCC_1 %bb.11, 4, implicit $eflags
    JMP_1 %bb.20
  
  bb.20.BB_90:
    successors: %bb.11(0x40000000), %bb.21(0x40000000)
  
    %80:gr8 = ADD8ri %66, -45, implicit-def dead $eflags
    %81:gr8 = SUB8ri %80, 2, implicit-def $eflags
    %108:gr32 = COPY %10
    JCC_1 %bb.11, 2, implicit $eflags
    JMP_1 %bb.21
  
  bb.21.BB_90:
    successors: %bb.11(0x40000000), %bb.22(0x40000000)
  
    %82:gr8 = SUB8ri %66, 95, implicit-def $eflags
    %108:gr32 = COPY %10
    JCC_1 %bb.11, 4, implicit $eflags
    JMP_1 %bb.22
  
  bb.22.BB_90:
    successors: %bb.11(0x40000000), %bb.10(0x40000000)
  
    %83:gr8 = SUB8ri %66, 126, implicit-def $eflags
    %108:gr32 = COPY %10
    JCC_1 %bb.11, 4, implicit $eflags
    JMP_1 %bb.10
  
  bb.10.BB_91:
    successors: %bb.11(0x80000000)
  
    %84:gr32 = ADD32ri %10, 1, implicit-def $eflags
    %108:gr32 = COPY %84
  
  bb.11.BB_92:
    successors: %bb.6(0x40000000), %bb.12(0x40000000)
  
    %19:gr32 = COPY %108
    %86:gr64 = ADD64ri32 %8, 1, implicit-def $eflags
    %85:gr8 = MOV8rm %64, 1, %8, 1, $noreg :: (load (s8) from %ir.41, !tbaa !11)
    CMP8ri %85, 0, implicit-def $eflags
    %101:gr64_nosp = COPY %86
    %102:gr8 = COPY %85
    %103:gr32 = COPY %19
    %104:gr32 = COPY %17
    %105:gr32 = COPY %16
    %109:gr32 = COPY %16
    %110:gr32 = COPY %17
    %111:gr32 = COPY %19
    JCC_1 %bb.6, 5, implicit $eflags
  
  bb.12.BB_93:
    successors: %bb.14(0x40000000), %bb.13(0x40000000)
  
    %24:gr32 = COPY %111
    %23:gr32 = COPY %110
    %22:gr32 = COPY %109
    CMP32rr %24, %23, implicit-def $eflags
    %88:gr32 = CMOV32rr %23, %24, 12, implicit $eflags
    %87:fr32 = FsFLD0SS
    CMP32ri %88, 0, implicit-def $eflags
    %112:fr32 = COPY %87
    JCC_1 %bb.14, 4, implicit $eflags
  
  bb.13.BB_94:
    successors: %bb.14(0x80000000)
  
    %93:fr32 = CVTSI2SSrr %22, implicit $mxcsr
    %92:fr32 = CVTSI2SSrr %88, implicit $mxcsr
    %91:fr32 = DIVSSrr %93, %92, implicit $mxcsr
    %112:fr32 = COPY %91
  
  bb.14.BB_95:
    successors: %bb.3(0x40000000), %bb.15(0x40000000)
  
    %27:fr32 = COPY %112
    %95:fr32 = ADDSSrr %1, %27, implicit $mxcsr
    %94:gr32 = ADD32ri %2, 1, implicit-def $eflags
    CMP32rr %94, %40, implicit-def $eflags
    %99:fr32 = COPY %95
    %100:gr32 = COPY %94
    %113:fr32 = COPY %95
    JCC_1 %bb.3, 5, implicit $eflags
  
  bb.15.BB_96:
    successors: %bb.16(0x80000000)
  
    %30:fr32 = COPY %113
    %98:fr32 = CVTSI2SSrr %40, implicit $mxcsr
    %97:fr32 = DIVSSrr %30, %98, implicit $mxcsr
    %114:fr32 = COPY %97
  
  bb.16.BB_97:
    %32:fr32 = COPY %114
    $xmm0 = COPY %32
    RET64 implicit $xmm0

...
---
name:            MajorityRuleConsensus
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr8, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: fr32, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64, preferred-register: '' }
  - { id: 11, class: gr64, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
  - { id: 16, class: gr64, preferred-register: '' }
  - { id: 17, class: gr64, preferred-register: '' }
  - { id: 18, class: gr64, preferred-register: '' }
  - { id: 19, class: gr64, preferred-register: '' }
  - { id: 20, class: gr64, preferred-register: '' }
  - { id: 21, class: gr64, preferred-register: '' }
  - { id: 22, class: gr64, preferred-register: '' }
  - { id: 23, class: gr64, preferred-register: '' }
  - { id: 24, class: gr64, preferred-register: '' }
  - { id: 25, class: gr64, preferred-register: '' }
  - { id: 26, class: gr64, preferred-register: '' }
  - { id: 27, class: gr64, preferred-register: '' }
  - { id: 28, class: gr64, preferred-register: '' }
  - { id: 29, class: gr64, preferred-register: '' }
  - { id: 30, class: gr64, preferred-register: '' }
  - { id: 31, class: gr64, preferred-register: '' }
  - { id: 32, class: gr64, preferred-register: '' }
  - { id: 33, class: gr64_nosp, preferred-register: '' }
  - { id: 34, class: gr32, preferred-register: '' }
  - { id: 35, class: gr64, preferred-register: '' }
  - { id: 36, class: gr64_nosp, preferred-register: '' }
  - { id: 37, class: gr64_nosp, preferred-register: '' }
  - { id: 38, class: gr64, preferred-register: '' }
  - { id: 39, class: gr32, preferred-register: '' }
  - { id: 40, class: gr32, preferred-register: '' }
  - { id: 41, class: gr32, preferred-register: '' }
  - { id: 42, class: gr32, preferred-register: '' }
  - { id: 43, class: gr64, preferred-register: '' }
  - { id: 44, class: gr32, preferred-register: '' }
  - { id: 45, class: gr64, preferred-register: '' }
  - { id: 46, class: gr64, preferred-register: '' }
  - { id: 47, class: gr32, preferred-register: '' }
  - { id: 48, class: gr32, preferred-register: '' }
  - { id: 49, class: gr32, preferred-register: '' }
  - { id: 50, class: gr32, preferred-register: '' }
  - { id: 51, class: gr32, preferred-register: '' }
  - { id: 52, class: gr64, preferred-register: '' }
  - { id: 53, class: gr32, preferred-register: '' }
  - { id: 54, class: gr64, preferred-register: '' }
  - { id: 55, class: gr64, preferred-register: '' }
  - { id: 56, class: gr32, preferred-register: '' }
  - { id: 57, class: gr64, preferred-register: '' }
  - { id: 58, class: gr32, preferred-register: '' }
  - { id: 59, class: gr64, preferred-register: '' }
  - { id: 60, class: gr32, preferred-register: '' }
  - { id: 61, class: gr64, preferred-register: '' }
  - { id: 62, class: gr32, preferred-register: '' }
  - { id: 63, class: gr64, preferred-register: '' }
  - { id: 64, class: gr64, preferred-register: '' }
  - { id: 65, class: gr64, preferred-register: '' }
  - { id: 66, class: gr64, preferred-register: '' }
  - { id: 67, class: gr64, preferred-register: '' }
  - { id: 68, class: gr64, preferred-register: '' }
  - { id: 69, class: gr64, preferred-register: '' }
  - { id: 70, class: gr64, preferred-register: '' }
  - { id: 71, class: gr64, preferred-register: '' }
  - { id: 72, class: gr64, preferred-register: '' }
  - { id: 73, class: gr64, preferred-register: '' }
  - { id: 74, class: gr64, preferred-register: '' }
  - { id: 75, class: gr64, preferred-register: '' }
  - { id: 76, class: gr64, preferred-register: '' }
  - { id: 77, class: gr64, preferred-register: '' }
  - { id: 78, class: gr64, preferred-register: '' }
  - { id: 79, class: gr64, preferred-register: '' }
  - { id: 80, class: gr64, preferred-register: '' }
  - { id: 81, class: gr64, preferred-register: '' }
  - { id: 82, class: gr64, preferred-register: '' }
  - { id: 83, class: gr64, preferred-register: '' }
  - { id: 84, class: gr64, preferred-register: '' }
  - { id: 85, class: gr64, preferred-register: '' }
  - { id: 86, class: gr64, preferred-register: '' }
  - { id: 87, class: gr64, preferred-register: '' }
  - { id: 88, class: gr64, preferred-register: '' }
  - { id: 89, class: gr64, preferred-register: '' }
  - { id: 90, class: gr64, preferred-register: '' }
  - { id: 91, class: gr64, preferred-register: '' }
  - { id: 92, class: gr64, preferred-register: '' }
  - { id: 93, class: gr64, preferred-register: '' }
  - { id: 94, class: gr64, preferred-register: '' }
  - { id: 95, class: gr64, preferred-register: '' }
  - { id: 96, class: gr64, preferred-register: '' }
  - { id: 97, class: gr64, preferred-register: '' }
  - { id: 98, class: gr64, preferred-register: '' }
  - { id: 99, class: gr64, preferred-register: '' }
  - { id: 100, class: gr64, preferred-register: '' }
  - { id: 101, class: gr64, preferred-register: '' }
  - { id: 102, class: gr64, preferred-register: '' }
  - { id: 103, class: gr64, preferred-register: '' }
  - { id: 104, class: gr64, preferred-register: '' }
  - { id: 105, class: gr64, preferred-register: '' }
  - { id: 106, class: gr64, preferred-register: '' }
  - { id: 107, class: gr64, preferred-register: '' }
  - { id: 108, class: gr64, preferred-register: '' }
  - { id: 109, class: gr64, preferred-register: '' }
  - { id: 110, class: gr64, preferred-register: '' }
  - { id: 111, class: gr64, preferred-register: '' }
  - { id: 112, class: gr64, preferred-register: '' }
  - { id: 113, class: gr64, preferred-register: '' }
  - { id: 114, class: gr32, preferred-register: '' }
  - { id: 115, class: gr64, preferred-register: '' }
  - { id: 116, class: gr32, preferred-register: '' }
  - { id: 117, class: gr64, preferred-register: '' }
  - { id: 118, class: fr32, preferred-register: '' }
  - { id: 119, class: gr64, preferred-register: '' }
  - { id: 120, class: gr64, preferred-register: '' }
  - { id: 121, class: gr8, preferred-register: '' }
  - { id: 122, class: gr32, preferred-register: '' }
  - { id: 123, class: gr32, preferred-register: '' }
  - { id: 124, class: gr64, preferred-register: '' }
  - { id: 125, class: gr32, preferred-register: '' }
  - { id: 126, class: gr64, preferred-register: '' }
  - { id: 127, class: gr64, preferred-register: '' }
  - { id: 128, class: gr64, preferred-register: '' }
  - { id: 129, class: gr64, preferred-register: '' }
  - { id: 130, class: gr16, preferred-register: '' }
  - { id: 131, class: gr16, preferred-register: '' }
  - { id: 132, class: gr16, preferred-register: '' }
  - { id: 133, class: gr16, preferred-register: '' }
  - { id: 134, class: gr8, preferred-register: '' }
  - { id: 135, class: gr64_nosp, preferred-register: '' }
  - { id: 136, class: gr64, preferred-register: '' }
  - { id: 137, class: gr64, preferred-register: '' }
  - { id: 138, class: gr64_nosp, preferred-register: '' }
  - { id: 139, class: gr32, preferred-register: '' }
  - { id: 140, class: gr32, preferred-register: '' }
  - { id: 141, class: gr32, preferred-register: '' }
  - { id: 142, class: gr32, preferred-register: '' }
  - { id: 143, class: gr32, preferred-register: '' }
  - { id: 144, class: gr64_nosp, preferred-register: '' }
  - { id: 145, class: gr32, preferred-register: '' }
  - { id: 146, class: gr32, preferred-register: '' }
  - { id: 147, class: gr64, preferred-register: '' }
  - { id: 148, class: gr32, preferred-register: '' }
  - { id: 149, class: gr64, preferred-register: '' }
  - { id: 150, class: gr64, preferred-register: '' }
  - { id: 151, class: gr64, preferred-register: '' }
  - { id: 152, class: gr32, preferred-register: '' }
  - { id: 153, class: gr32, preferred-register: '' }
  - { id: 154, class: gr32, preferred-register: '' }
  - { id: 155, class: gr32, preferred-register: '' }
  - { id: 156, class: gr64, preferred-register: '' }
  - { id: 157, class: gr32, preferred-register: '' }
  - { id: 158, class: fr32, preferred-register: '' }
  - { id: 159, class: fr32, preferred-register: '' }
  - { id: 160, class: fr32, preferred-register: '' }
  - { id: 161, class: fr32, preferred-register: '' }
  - { id: 162, class: fr32, preferred-register: '' }
  - { id: 163, class: gr64_nosp, preferred-register: '' }
  - { id: 164, class: gr8, preferred-register: '' }
  - { id: 165, class: gr64_nosp, preferred-register: '' }
  - { id: 166, class: gr32, preferred-register: '' }
  - { id: 167, class: gr32, preferred-register: '' }
  - { id: 168, class: gr32, preferred-register: '' }
  - { id: 169, class: gr8, preferred-register: '' }
  - { id: 170, class: gr8, preferred-register: '' }
  - { id: 171, class: gr8, preferred-register: '' }
  - { id: 172, class: gr32, preferred-register: '' }
  - { id: 173, class: gr32, preferred-register: '' }
  - { id: 174, class: gr8, preferred-register: '' }
  - { id: 175, class: gr8, preferred-register: '' }
  - { id: 176, class: gr8, preferred-register: '' }
  - { id: 177, class: gr32, preferred-register: '' }
  - { id: 178, class: gr32, preferred-register: '' }
  - { id: 179, class: gr8, preferred-register: '' }
  - { id: 180, class: gr8, preferred-register: '' }
  - { id: 181, class: gr8, preferred-register: '' }
  - { id: 182, class: gr32, preferred-register: '' }
  - { id: 183, class: gr32, preferred-register: '' }
  - { id: 184, class: gr8, preferred-register: '' }
  - { id: 185, class: gr8, preferred-register: '' }
  - { id: 186, class: gr8, preferred-register: '' }
  - { id: 187, class: gr32, preferred-register: '' }
  - { id: 188, class: gr32, preferred-register: '' }
  - { id: 189, class: gr8, preferred-register: '' }
  - { id: 190, class: gr8, preferred-register: '' }
  - { id: 191, class: gr8, preferred-register: '' }
  - { id: 192, class: gr32, preferred-register: '' }
  - { id: 193, class: gr32, preferred-register: '' }
  - { id: 194, class: gr8, preferred-register: '' }
  - { id: 195, class: gr8, preferred-register: '' }
  - { id: 196, class: gr8, preferred-register: '' }
  - { id: 197, class: gr32, preferred-register: '' }
  - { id: 198, class: gr32, preferred-register: '' }
  - { id: 199, class: gr8, preferred-register: '' }
  - { id: 200, class: gr8, preferred-register: '' }
  - { id: 201, class: gr8, preferred-register: '' }
  - { id: 202, class: gr32, preferred-register: '' }
  - { id: 203, class: gr32, preferred-register: '' }
  - { id: 204, class: gr8, preferred-register: '' }
  - { id: 205, class: gr8, preferred-register: '' }
  - { id: 206, class: gr8, preferred-register: '' }
  - { id: 207, class: gr32, preferred-register: '' }
  - { id: 208, class: gr32, preferred-register: '' }
  - { id: 209, class: gr8, preferred-register: '' }
  - { id: 210, class: gr8, preferred-register: '' }
  - { id: 211, class: gr8, preferred-register: '' }
  - { id: 212, class: gr32, preferred-register: '' }
  - { id: 213, class: gr32, preferred-register: '' }
  - { id: 214, class: gr8, preferred-register: '' }
  - { id: 215, class: gr8, preferred-register: '' }
  - { id: 216, class: gr8, preferred-register: '' }
  - { id: 217, class: gr32, preferred-register: '' }
  - { id: 218, class: gr32, preferred-register: '' }
  - { id: 219, class: gr8, preferred-register: '' }
  - { id: 220, class: gr8, preferred-register: '' }
  - { id: 221, class: gr8, preferred-register: '' }
  - { id: 222, class: gr32, preferred-register: '' }
  - { id: 223, class: gr32, preferred-register: '' }
  - { id: 224, class: gr8, preferred-register: '' }
  - { id: 225, class: gr8, preferred-register: '' }
  - { id: 226, class: gr8, preferred-register: '' }
  - { id: 227, class: gr32, preferred-register: '' }
  - { id: 228, class: gr32, preferred-register: '' }
  - { id: 229, class: gr8, preferred-register: '' }
  - { id: 230, class: gr8, preferred-register: '' }
  - { id: 231, class: gr8, preferred-register: '' }
  - { id: 232, class: gr32, preferred-register: '' }
  - { id: 233, class: gr32, preferred-register: '' }
  - { id: 234, class: gr8, preferred-register: '' }
  - { id: 235, class: gr8, preferred-register: '' }
  - { id: 236, class: gr8, preferred-register: '' }
  - { id: 237, class: gr32, preferred-register: '' }
  - { id: 238, class: gr32, preferred-register: '' }
  - { id: 239, class: gr8, preferred-register: '' }
  - { id: 240, class: gr8, preferred-register: '' }
  - { id: 241, class: gr8, preferred-register: '' }
  - { id: 242, class: gr32, preferred-register: '' }
  - { id: 243, class: gr32, preferred-register: '' }
  - { id: 244, class: gr8, preferred-register: '' }
  - { id: 245, class: gr8, preferred-register: '' }
  - { id: 246, class: gr8, preferred-register: '' }
  - { id: 247, class: gr32, preferred-register: '' }
  - { id: 248, class: gr32, preferred-register: '' }
  - { id: 249, class: gr8, preferred-register: '' }
  - { id: 250, class: gr8, preferred-register: '' }
  - { id: 251, class: gr8, preferred-register: '' }
  - { id: 252, class: gr32, preferred-register: '' }
  - { id: 253, class: gr32, preferred-register: '' }
  - { id: 254, class: gr8, preferred-register: '' }
  - { id: 255, class: gr8, preferred-register: '' }
  - { id: 256, class: gr8, preferred-register: '' }
  - { id: 257, class: gr32, preferred-register: '' }
  - { id: 258, class: gr32, preferred-register: '' }
  - { id: 259, class: gr8, preferred-register: '' }
  - { id: 260, class: gr8, preferred-register: '' }
  - { id: 261, class: gr8, preferred-register: '' }
  - { id: 262, class: gr32, preferred-register: '' }
  - { id: 263, class: gr32, preferred-register: '' }
  - { id: 264, class: gr8, preferred-register: '' }
  - { id: 265, class: gr8, preferred-register: '' }
  - { id: 266, class: gr8, preferred-register: '' }
  - { id: 267, class: gr32, preferred-register: '' }
  - { id: 268, class: gr32, preferred-register: '' }
  - { id: 269, class: gr8, preferred-register: '' }
  - { id: 270, class: gr8, preferred-register: '' }
  - { id: 271, class: gr8, preferred-register: '' }
  - { id: 272, class: gr32, preferred-register: '' }
  - { id: 273, class: gr32, preferred-register: '' }
  - { id: 274, class: gr8, preferred-register: '' }
  - { id: 275, class: gr8, preferred-register: '' }
  - { id: 276, class: gr8, preferred-register: '' }
  - { id: 277, class: gr32, preferred-register: '' }
  - { id: 278, class: gr32, preferred-register: '' }
  - { id: 279, class: gr8, preferred-register: '' }
  - { id: 280, class: gr8, preferred-register: '' }
  - { id: 281, class: gr8, preferred-register: '' }
  - { id: 282, class: gr32, preferred-register: '' }
  - { id: 283, class: gr32, preferred-register: '' }
  - { id: 284, class: gr8, preferred-register: '' }
  - { id: 285, class: gr8, preferred-register: '' }
  - { id: 286, class: gr8, preferred-register: '' }
  - { id: 287, class: gr32, preferred-register: '' }
  - { id: 288, class: gr32, preferred-register: '' }
  - { id: 289, class: gr8, preferred-register: '' }
  - { id: 290, class: gr8, preferred-register: '' }
  - { id: 291, class: gr8, preferred-register: '' }
  - { id: 292, class: gr32, preferred-register: '' }
  - { id: 293, class: gr8, preferred-register: '' }
  - { id: 294, class: gr8, preferred-register: '' }
  - { id: 295, class: gr8, preferred-register: '' }
  - { id: 296, class: gr32, preferred-register: '' }
  - { id: 297, class: gr32, preferred-register: '' }
  - { id: 298, class: gr32, preferred-register: '' }
  - { id: 299, class: gr32, preferred-register: '' }
  - { id: 300, class: gr32, preferred-register: '' }
  - { id: 301, class: gr32, preferred-register: '' }
  - { id: 302, class: gr32, preferred-register: '' }
  - { id: 303, class: gr32, preferred-register: '' }
  - { id: 304, class: gr32, preferred-register: '' }
  - { id: 305, class: gr32, preferred-register: '' }
  - { id: 306, class: gr32, preferred-register: '' }
  - { id: 307, class: gr32, preferred-register: '' }
  - { id: 308, class: gr32, preferred-register: '' }
  - { id: 309, class: gr32, preferred-register: '' }
  - { id: 310, class: gr32, preferred-register: '' }
  - { id: 311, class: gr32, preferred-register: '' }
  - { id: 312, class: gr32, preferred-register: '' }
  - { id: 313, class: gr32, preferred-register: '' }
  - { id: 314, class: gr32, preferred-register: '' }
  - { id: 315, class: gr32, preferred-register: '' }
  - { id: 316, class: gr32, preferred-register: '' }
  - { id: 317, class: gr32, preferred-register: '' }
  - { id: 318, class: gr32, preferred-register: '' }
  - { id: 319, class: gr32, preferred-register: '' }
  - { id: 320, class: gr32, preferred-register: '' }
  - { id: 321, class: gr32, preferred-register: '' }
  - { id: 322, class: gr32, preferred-register: '' }
  - { id: 323, class: gr32, preferred-register: '' }
  - { id: 324, class: gr32, preferred-register: '' }
  - { id: 325, class: gr32, preferred-register: '' }
  - { id: 326, class: gr32, preferred-register: '' }
  - { id: 327, class: gr32, preferred-register: '' }
  - { id: 328, class: gr32, preferred-register: '' }
  - { id: 329, class: gr32, preferred-register: '' }
  - { id: 330, class: gr32, preferred-register: '' }
  - { id: 331, class: gr32, preferred-register: '' }
  - { id: 332, class: gr32, preferred-register: '' }
  - { id: 333, class: gr32, preferred-register: '' }
  - { id: 334, class: gr32, preferred-register: '' }
  - { id: 335, class: gr32, preferred-register: '' }
  - { id: 336, class: gr32, preferred-register: '' }
  - { id: 337, class: gr32, preferred-register: '' }
  - { id: 338, class: gr32, preferred-register: '' }
  - { id: 339, class: gr32, preferred-register: '' }
  - { id: 340, class: gr32, preferred-register: '' }
  - { id: 341, class: gr32, preferred-register: '' }
  - { id: 342, class: gr32, preferred-register: '' }
  - { id: 343, class: gr32, preferred-register: '' }
  - { id: 344, class: gr32, preferred-register: '' }
  - { id: 345, class: gr32, preferred-register: '' }
  - { id: 346, class: gr32, preferred-register: '' }
  - { id: 347, class: gr32, preferred-register: '' }
  - { id: 348, class: gr64, preferred-register: '' }
  - { id: 349, class: gr64_nosp, preferred-register: '' }
  - { id: 350, class: gr64_nosp, preferred-register: '' }
  - { id: 351, class: gr64_nosp, preferred-register: '' }
  - { id: 352, class: gr32, preferred-register: '' }
  - { id: 353, class: gr64_nosp, preferred-register: '' }
  - { id: 354, class: gr32, preferred-register: '' }
  - { id: 355, class: gr8, preferred-register: '' }
  - { id: 356, class: gr8, preferred-register: '' }
  - { id: 357, class: gr8, preferred-register: '' }
  - { id: 358, class: gr8, preferred-register: '' }
  - { id: 359, class: gr8, preferred-register: '' }
  - { id: 360, class: gr8, preferred-register: '' }
  - { id: 361, class: gr8, preferred-register: '' }
  - { id: 362, class: gr8, preferred-register: '' }
  - { id: 363, class: gr8, preferred-register: '' }
  - { id: 364, class: gr8, preferred-register: '' }
  - { id: 365, class: gr8, preferred-register: '' }
  - { id: 366, class: gr8, preferred-register: '' }
  - { id: 367, class: gr8, preferred-register: '' }
  - { id: 368, class: gr8, preferred-register: '' }
  - { id: 369, class: gr8, preferred-register: '' }
  - { id: 370, class: gr8, preferred-register: '' }
  - { id: 371, class: gr8, preferred-register: '' }
  - { id: 372, class: gr8, preferred-register: '' }
  - { id: 373, class: gr8, preferred-register: '' }
  - { id: 374, class: gr8, preferred-register: '' }
  - { id: 375, class: gr8, preferred-register: '' }
  - { id: 376, class: gr8, preferred-register: '' }
  - { id: 377, class: gr8, preferred-register: '' }
  - { id: 378, class: gr8, preferred-register: '' }
  - { id: 379, class: gr8, preferred-register: '' }
  - { id: 380, class: gr8, preferred-register: '' }
  - { id: 381, class: gr32, preferred-register: '' }
  - { id: 382, class: gr32, preferred-register: '' }
liveins:
  - { reg: '$rdi', virtual-reg: '%45' }
  - { reg: '$esi', virtual-reg: '%47' }
  - { reg: '$edx', virtual-reg: '%49' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    16
  adjustsStack:    false
  hasCalls:        true
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 108, alignment: 16, 
      stack-id: default, callee-saved-register: '', callee-saved-restored: true, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:
  - id:              0
    value:           float 5.000000e-01
    alignment:       4
    isTargetSpecific: false
machineFunctionInfo: {}
body:             |
  bb.0.BB_98:
    successors: %bb.12(0x40000000), %bb.1(0x40000000)
    liveins: $rdi, $esi, $edx
  
    %49:gr32 = COPY $edx
    %47:gr32 = COPY $esi
    %45:gr64 = COPY $rdi
    %46:gr64 = COPY killed %45
    %48:gr32 = COPY killed %47
    %50:gr32 = COPY killed %49
    %59:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %58:gr32 = ADD32ri %50, 1, implicit-def $eflags
    %57:gr64 = MOVSX64rr32 %58
    %52:gr64 = MOV64ri @.str
    %53:gr32 = MOV32ri 485
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %52
    $esi = COPY %53
    $rdx = COPY %57
    CALL64pcrel32 target-flags(x86-plt) @sre_malloc, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %55:gr64 = COPY $rax
    %51:gr32 = MOV32r0 implicit-def $eflags
    CMP32ri %50, 0, implicit-def $eflags
    %382:gr32 = COPY %51
    JCC_1 %bb.12, 14, implicit $eflags
  
  bb.1.BB_99:
    successors: %bb.2(0x80000000)
  
    CMP32ri %48, 0, implicit-def $eflags
    %121:gr8 = SETCCr 15, implicit $eflags
    %119:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %120:gr64 = ADD64ri32 %119, 104, implicit-def $eflags
    %118:fr32 = CVTSI2SSrr %48, implicit $mxcsr
    %116:gr32 = MOV32rr %50
    %117:gr64 = SUBREG_TO_REG 0, %116, %subreg.sub_32bit
    %114:gr32 = MOV32rr %48
    %115:gr64 = SUBREG_TO_REG 0, %114, %subreg.sub_32bit
    %113:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %111:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %112:gr64 = ADD64ri32 %111, 4, implicit-def $eflags
    %109:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %110:gr64 = ADD64ri32 %109, 8, implicit-def $eflags
    %107:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %108:gr64 = ADD64ri32 %107, 12, implicit-def $eflags
    %105:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %106:gr64 = ADD64ri32 %105, 16, implicit-def $eflags
    %103:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %104:gr64 = ADD64ri32 %103, 20, implicit-def $eflags
    %101:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %102:gr64 = ADD64ri32 %101, 24, implicit-def $eflags
    %99:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %100:gr64 = ADD64ri32 %99, 28, implicit-def $eflags
    %97:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %98:gr64 = ADD64ri32 %97, 32, implicit-def $eflags
    %95:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %96:gr64 = ADD64ri32 %95, 36, implicit-def $eflags
    %93:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %94:gr64 = ADD64ri32 %93, 40, implicit-def $eflags
    %91:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %92:gr64 = ADD64ri32 %91, 44, implicit-def $eflags
    %89:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %90:gr64 = ADD64ri32 %89, 48, implicit-def $eflags
    %87:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %88:gr64 = ADD64ri32 %87, 52, implicit-def $eflags
    %85:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %86:gr64 = ADD64ri32 %85, 56, implicit-def $eflags
    %83:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %84:gr64 = ADD64ri32 %83, 60, implicit-def $eflags
    %81:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %82:gr64 = ADD64ri32 %81, 64, implicit-def $eflags
    %79:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %80:gr64 = ADD64ri32 %79, 68, implicit-def $eflags
    %77:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %78:gr64 = ADD64ri32 %77, 72, implicit-def $eflags
    %75:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %76:gr64 = ADD64ri32 %75, 76, implicit-def $eflags
    %73:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %74:gr64 = ADD64ri32 %73, 80, implicit-def $eflags
    %71:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %72:gr64 = ADD64ri32 %71, 84, implicit-def $eflags
    %69:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %70:gr64 = ADD64ri32 %69, 88, implicit-def $eflags
    %67:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %68:gr64 = ADD64ri32 %67, 92, implicit-def $eflags
    %65:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %66:gr64 = ADD64ri32 %65, 96, implicit-def $eflags
    %63:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
    %64:gr64 = ADD64ri32 %63, 100, implicit-def $eflags
    %60:gr32 = MOV32r0 implicit-def $eflags
    %61:gr64 = SUBREG_TO_REG 0, %60, %subreg.sub_32bit
    %62:gr32 = MOV32r0 implicit-def $eflags
    %351:gr64_nosp = COPY %61
    %352:gr32 = COPY %62
  
  bb.2.BB_100:
    successors: %bb.3(0x40000000), %bb.9(0x40000000)
  
    %34:gr32 = COPY %352
    %33:gr64_nosp = COPY %351
    %123:gr32 = MOV32r0 implicit-def $eflags
    %124:gr64 = MOV32ri64 108
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %59
    $esi = COPY %123
    $rdx = COPY %124
    CALL64pcrel32 target-flags(x86-plt) <mcsymbol memset>, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $rdx
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %122:gr32 = MOV32r0 implicit-def $eflags
    TEST8ri %121, 1, implicit-def $eflags
    %354:gr32 = COPY %122
    JCC_1 %bb.3, 5, implicit $eflags
    JMP_1 %bb.9
  
  bb.3.BB_101:
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @__ctype_b_loc, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %129:gr64 = COPY $rax
    %128:gr64 = MOV64rm %129, 1, $noreg, 0, $noreg :: (load (s64) from %ir.42, !tbaa !5)
    %125:gr32 = MOV32r0 implicit-def $eflags
    %126:gr64 = SUBREG_TO_REG 0, %125, %subreg.sub_32bit
    %353:gr64_nosp = COPY %126
  
  bb.4.BB_102:
    successors: %bb.6(0x40000000), %bb.5(0x40000000)
  
    %36:gr64_nosp = COPY %353
    %137:gr64 = MOV64rm %46, 8, %36, 0, $noreg :: (load (s64) from %ir.45, !tbaa !5)
    %135:gr64_nosp = MOVSX64rm8 %137, 1, %33, 0, $noreg :: (load (s8) from %ir.47, !tbaa !11)
    %133:gr16 = MOV16rm %128, 2, %135, 0, $noreg :: (load (s16) from %ir.50, !tbaa !12)
    %132:gr16 = AND16ri %133, 1024, implicit-def $eflags
    CMP16ri %132, 0, implicit-def $eflags
    JCC_1 %bb.6, 4, implicit $eflags
  
  bb.5.BB_103:
    successors: %bb.7(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    CALL64pcrel32 target-flags(x86-plt) @__ctype_toupper_loc, csr_64, implicit $rsp, implicit $ssp, implicit-def $rax
    ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
    %151:gr64 = COPY $rax
    %150:gr64 = MOV64rm %151, 1, $noreg, 0, $noreg :: (load (s64) from %ir.54, !tbaa !5)
    %148:gr32 = MOV32rm %150, 4, %135, 0, $noreg :: (load (s32) from %ir.56, !tbaa !9)
    %146:gr32 = ADD32ri %148, -65, implicit-def $eflags
    %144:gr64_nosp = MOVSX64rr32 %146
    %142:gr32 = MOV32rm %stack.0, 4, %144, 0, $noreg :: (load (s32) from %ir.60, !tbaa !9)
    %141:gr32 = ADD32ri %142, 1, implicit-def $eflags
    MOV32mr %stack.0, 4, %144, 0, $noreg, %141 :: (store (s32) into %ir.60, !tbaa !9)
    JMP_1 %bb.7
  
  bb.6.BB_104:
    successors: %bb.7(0x80000000)
  
    %155:gr32 = MOV32rm %120, 1, $noreg, 0, $noreg :: (load (s32) from %ir.10, align 8, !tbaa !9)
    %154:gr32 = ADD32ri %155, 1, implicit-def $eflags
    MOV32mr %120, 1, $noreg, 0, $noreg, %154 :: (store (s32) into %ir.10, align 8, !tbaa !9)
  
  bb.7.BB_105:
    successors: %bb.4(0x40000000), %bb.8(0x40000000)
  
    %156:gr64 = ADD64ri32 %36, 1, implicit-def $eflags
    CMP64rr %156, %115, implicit-def $eflags
    %353:gr64_nosp = COPY %156
    JCC_1 %bb.4, 5, implicit $eflags
  
  bb.8.BB_106:
    successors: %bb.9(0x80000000)
  
    %157:gr32 = MOV32rm %120, 1, $noreg, 0, $noreg :: (load (s32) from %ir.10, align 8, !tbaa !9)
    %354:gr32 = COPY %157
  
  bb.9.BB_107:
    successors: %bb.11(0x40000000), %bb.10(0x40000000)
  
    %40:gr32 = COPY %354
    %162:fr32 = CVTSI2SSrr %40, implicit $mxcsr
    %161:fr32 = DIVSSrr %162, %118, implicit $mxcsr
    %158:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
    UCOMISSrr %158, %161, implicit-def $eflags, implicit $mxcsr
    %381:gr32 = COPY %34
    JCC_1 %bb.11, 2, implicit $eflags
  
  bb.10.BB_108:
    successors: %bb.13(0x40000000), %bb.14(0x40000000)
  
    %347:gr32 = MOV32rm %113, 1, $noreg, 0, $noreg :: (load (s32) from %ir.14, align 16, !tbaa !9)
    %345:gr32 = MOV32ri 4294967295
    CMP32ri %347, -1, implicit-def $eflags
    %346:gr32 = CMOV32rr %345, %347, 15, implicit $eflags
    %344:gr32 = MOV32rm %112, 1, $noreg, 0, $noreg :: (load (s32) from %ir.15, !tbaa !9)
    CMP32rr %344, %346, implicit-def $eflags
    %343:gr32 = CMOV32rr %346, %344, 15, implicit $eflags
    %342:gr32 = MOV32rm %110, 1, $noreg, 0, $noreg :: (load (s32) from %ir.16, align 8, !tbaa !9)
    CMP32rr %342, %343, implicit-def $eflags
    %341:gr32 = CMOV32rr %343, %342, 15, implicit $eflags
    %340:gr32 = MOV32rm %108, 1, $noreg, 0, $noreg :: (load (s32) from %ir.17, !tbaa !9)
    CMP32rr %340, %341, implicit-def $eflags
    %339:gr32 = CMOV32rr %341, %340, 15, implicit $eflags
    %338:gr32 = MOV32rm %106, 1, $noreg, 0, $noreg :: (load (s32) from %ir.18, align 16, !tbaa !9)
    CMP32rr %338, %339, implicit-def $eflags
    %337:gr32 = CMOV32rr %339, %338, 15, implicit $eflags
    %336:gr32 = MOV32rm %104, 1, $noreg, 0, $noreg :: (load (s32) from %ir.19, !tbaa !9)
    CMP32rr %336, %337, implicit-def $eflags
    %335:gr32 = CMOV32rr %337, %336, 15, implicit $eflags
    %334:gr32 = MOV32rm %102, 1, $noreg, 0, $noreg :: (load (s32) from %ir.20, align 8, !tbaa !9)
    CMP32rr %334, %335, implicit-def $eflags
    %333:gr32 = CMOV32rr %335, %334, 15, implicit $eflags
    %332:gr32 = MOV32rm %100, 1, $noreg, 0, $noreg :: (load (s32) from %ir.21, !tbaa !9)
    CMP32rr %332, %333, implicit-def $eflags
    %331:gr32 = CMOV32rr %333, %332, 15, implicit $eflags
    %330:gr32 = MOV32rm %98, 1, $noreg, 0, $noreg :: (load (s32) from %ir.22, align 16, !tbaa !9)
    CMP32rr %330, %331, implicit-def $eflags
    %329:gr32 = CMOV32rr %331, %330, 15, implicit $eflags
    %328:gr32 = MOV32rm %96, 1, $noreg, 0, $noreg :: (load (s32) from %ir.23, !tbaa !9)
    CMP32rr %328, %329, implicit-def $eflags
    %327:gr32 = CMOV32rr %329, %328, 15, implicit $eflags
    %326:gr32 = MOV32rm %94, 1, $noreg, 0, $noreg :: (load (s32) from %ir.24, align 8, !tbaa !9)
    CMP32rr %326, %327, implicit-def $eflags
    %325:gr32 = CMOV32rr %327, %326, 15, implicit $eflags
    %324:gr32 = MOV32rm %92, 1, $noreg, 0, $noreg :: (load (s32) from %ir.25, !tbaa !9)
    CMP32rr %324, %325, implicit-def $eflags
    %323:gr32 = CMOV32rr %325, %324, 15, implicit $eflags
    %322:gr32 = MOV32rm %90, 1, $noreg, 0, $noreg :: (load (s32) from %ir.26, align 16, !tbaa !9)
    CMP32rr %322, %323, implicit-def $eflags
    %321:gr32 = CMOV32rr %323, %322, 15, implicit $eflags
    %320:gr32 = MOV32rm %88, 1, $noreg, 0, $noreg :: (load (s32) from %ir.27, !tbaa !9)
    CMP32rr %320, %321, implicit-def $eflags
    %319:gr32 = CMOV32rr %321, %320, 15, implicit $eflags
    %318:gr32 = MOV32rm %86, 1, $noreg, 0, $noreg :: (load (s32) from %ir.28, align 8, !tbaa !9)
    CMP32rr %318, %319, implicit-def $eflags
    %317:gr32 = CMOV32rr %319, %318, 15, implicit $eflags
    %316:gr32 = MOV32rm %84, 1, $noreg, 0, $noreg :: (load (s32) from %ir.29, !tbaa !9)
    CMP32rr %316, %317, implicit-def $eflags
    %315:gr32 = CMOV32rr %317, %316, 15, implicit $eflags
    %314:gr32 = MOV32rm %82, 1, $noreg, 0, $noreg :: (load (s32) from %ir.30, align 16, !tbaa !9)
    CMP32rr %314, %315, implicit-def $eflags
    %313:gr32 = CMOV32rr %315, %314, 15, implicit $eflags
    %312:gr32 = MOV32rm %80, 1, $noreg, 0, $noreg :: (load (s32) from %ir.31, !tbaa !9)
    CMP32rr %312, %313, implicit-def $eflags
    %311:gr32 = CMOV32rr %313, %312, 15, implicit $eflags
    %310:gr32 = MOV32rm %78, 1, $noreg, 0, $noreg :: (load (s32) from %ir.32, align 8, !tbaa !9)
    CMP32rr %310, %311, implicit-def $eflags
    %309:gr32 = CMOV32rr %311, %310, 15, implicit $eflags
    %308:gr32 = MOV32rm %76, 1, $noreg, 0, $noreg :: (load (s32) from %ir.33, !tbaa !9)
    CMP32rr %308, %309, implicit-def $eflags
    %307:gr32 = CMOV32rr %309, %308, 15, implicit $eflags
    %306:gr32 = MOV32rm %74, 1, $noreg, 0, $noreg :: (load (s32) from %ir.34, align 16, !tbaa !9)
    CMP32rr %306, %307, implicit-def $eflags
    %305:gr32 = CMOV32rr %307, %306, 15, implicit $eflags
    %304:gr32 = MOV32rm %72, 1, $noreg, 0, $noreg :: (load (s32) from %ir.35, !tbaa !9)
    CMP32rr %304, %305, implicit-def $eflags
    %303:gr32 = CMOV32rr %305, %304, 15, implicit $eflags
    %302:gr32 = MOV32rm %70, 1, $noreg, 0, $noreg :: (load (s32) from %ir.36, align 8, !tbaa !9)
    CMP32rr %302, %303, implicit-def $eflags
    %301:gr32 = CMOV32rr %303, %302, 15, implicit $eflags
    %300:gr32 = MOV32rm %68, 1, $noreg, 0, $noreg :: (load (s32) from %ir.37, !tbaa !9)
    CMP32rr %300, %301, implicit-def $eflags
    %299:gr32 = CMOV32rr %301, %300, 15, implicit $eflags
    %298:gr32 = MOV32rm %66, 1, $noreg, 0, $noreg :: (load (s32) from %ir.38, align 16, !tbaa !9)
    CMP32rr %298, %299, implicit-def $eflags
    %297:gr32 = CMOV32rr %299, %298, 15, implicit $eflags
    %296:gr32 = MOV32rm %64, 1, $noreg, 0, $noreg :: (load (s32) from %ir.39, !tbaa !9)
    %293:gr8 = MOV8ri 65
    %294:gr8 = MOV8ri 64
    CMP32ri %347, -1, implicit-def $eflags
    %355:gr8 = COPY %293
    JCC_1 %bb.14, 15, implicit $eflags
  
  bb.13.BB_108:
    successors: %bb.14(0x80000000)
  
    %355:gr8 = COPY %294
  
  bb.14.BB_108:
    successors: %bb.15(0x40000000), %bb.16(0x40000000)
  
    %295:gr8 = COPY %355
    %289:gr8 = MOV8ri 66
    CMP32rr %344, %346, implicit-def $eflags
    %356:gr8 = COPY %289
    JCC_1 %bb.16, 15, implicit $eflags
  
  bb.15.BB_108:
    successors: %bb.16(0x80000000)
  
    %356:gr8 = COPY %295
  
  bb.16.BB_108:
    successors: %bb.17(0x40000000), %bb.18(0x40000000)
  
    %291:gr8 = COPY %356
    %284:gr8 = MOV8ri 67
    CMP32rr %342, %343, implicit-def $eflags
    %357:gr8 = COPY %284
    JCC_1 %bb.18, 15, implicit $eflags
  
  bb.17.BB_108:
    successors: %bb.18(0x80000000)
  
    %357:gr8 = COPY %291
  
  bb.18.BB_108:
    successors: %bb.19(0x40000000), %bb.20(0x40000000)
  
    %286:gr8 = COPY %357
    %279:gr8 = MOV8ri 68
    CMP32rr %340, %341, implicit-def $eflags
    %358:gr8 = COPY %279
    JCC_1 %bb.20, 15, implicit $eflags
  
  bb.19.BB_108:
    successors: %bb.20(0x80000000)
  
    %358:gr8 = COPY %286
  
  bb.20.BB_108:
    successors: %bb.21(0x40000000), %bb.22(0x40000000)
  
    %281:gr8 = COPY %358
    %274:gr8 = MOV8ri 69
    CMP32rr %338, %339, implicit-def $eflags
    %359:gr8 = COPY %274
    JCC_1 %bb.22, 15, implicit $eflags
  
  bb.21.BB_108:
    successors: %bb.22(0x80000000)
  
    %359:gr8 = COPY %281
  
  bb.22.BB_108:
    successors: %bb.23(0x40000000), %bb.24(0x40000000)
  
    %276:gr8 = COPY %359
    %269:gr8 = MOV8ri 70
    CMP32rr %336, %337, implicit-def $eflags
    %360:gr8 = COPY %269
    JCC_1 %bb.24, 15, implicit $eflags
  
  bb.23.BB_108:
    successors: %bb.24(0x80000000)
  
    %360:gr8 = COPY %276
  
  bb.24.BB_108:
    successors: %bb.25(0x40000000), %bb.26(0x40000000)
  
    %271:gr8 = COPY %360
    %264:gr8 = MOV8ri 71
    CMP32rr %334, %335, implicit-def $eflags
    %361:gr8 = COPY %264
    JCC_1 %bb.26, 15, implicit $eflags
  
  bb.25.BB_108:
    successors: %bb.26(0x80000000)
  
    %361:gr8 = COPY %271
  
  bb.26.BB_108:
    successors: %bb.27(0x40000000), %bb.28(0x40000000)
  
    %266:gr8 = COPY %361
    %259:gr8 = MOV8ri 72
    CMP32rr %332, %333, implicit-def $eflags
    %362:gr8 = COPY %259
    JCC_1 %bb.28, 15, implicit $eflags
  
  bb.27.BB_108:
    successors: %bb.28(0x80000000)
  
    %362:gr8 = COPY %266
  
  bb.28.BB_108:
    successors: %bb.29(0x40000000), %bb.30(0x40000000)
  
    %261:gr8 = COPY %362
    %254:gr8 = MOV8ri 73
    CMP32rr %330, %331, implicit-def $eflags
    %363:gr8 = COPY %254
    JCC_1 %bb.30, 15, implicit $eflags
  
  bb.29.BB_108:
    successors: %bb.30(0x80000000)
  
    %363:gr8 = COPY %261
  
  bb.30.BB_108:
    successors: %bb.31(0x40000000), %bb.32(0x40000000)
  
    %256:gr8 = COPY %363
    %249:gr8 = MOV8ri 74
    CMP32rr %328, %329, implicit-def $eflags
    %364:gr8 = COPY %249
    JCC_1 %bb.32, 15, implicit $eflags
  
  bb.31.BB_108:
    successors: %bb.32(0x80000000)
  
    %364:gr8 = COPY %256
  
  bb.32.BB_108:
    successors: %bb.33(0x40000000), %bb.34(0x40000000)
  
    %251:gr8 = COPY %364
    %244:gr8 = MOV8ri 75
    CMP32rr %326, %327, implicit-def $eflags
    %365:gr8 = COPY %244
    JCC_1 %bb.34, 15, implicit $eflags
  
  bb.33.BB_108:
    successors: %bb.34(0x80000000)
  
    %365:gr8 = COPY %251
  
  bb.34.BB_108:
    successors: %bb.35(0x40000000), %bb.36(0x40000000)
  
    %246:gr8 = COPY %365
    %239:gr8 = MOV8ri 76
    CMP32rr %324, %325, implicit-def $eflags
    %366:gr8 = COPY %239
    JCC_1 %bb.36, 15, implicit $eflags
  
  bb.35.BB_108:
    successors: %bb.36(0x80000000)
  
    %366:gr8 = COPY %246
  
  bb.36.BB_108:
    successors: %bb.37(0x40000000), %bb.38(0x40000000)
  
    %241:gr8 = COPY %366
    %234:gr8 = MOV8ri 77
    CMP32rr %322, %323, implicit-def $eflags
    %367:gr8 = COPY %234
    JCC_1 %bb.38, 15, implicit $eflags
  
  bb.37.BB_108:
    successors: %bb.38(0x80000000)
  
    %367:gr8 = COPY %241
  
  bb.38.BB_108:
    successors: %bb.39(0x40000000), %bb.40(0x40000000)
  
    %236:gr8 = COPY %367
    %229:gr8 = MOV8ri 78
    CMP32rr %320, %321, implicit-def $eflags
    %368:gr8 = COPY %229
    JCC_1 %bb.40, 15, implicit $eflags
  
  bb.39.BB_108:
    successors: %bb.40(0x80000000)
  
    %368:gr8 = COPY %236
  
  bb.40.BB_108:
    successors: %bb.41(0x40000000), %bb.42(0x40000000)
  
    %231:gr8 = COPY %368
    %224:gr8 = MOV8ri 79
    CMP32rr %318, %319, implicit-def $eflags
    %369:gr8 = COPY %224
    JCC_1 %bb.42, 15, implicit $eflags
  
  bb.41.BB_108:
    successors: %bb.42(0x80000000)
  
    %369:gr8 = COPY %231
  
  bb.42.BB_108:
    successors: %bb.43(0x40000000), %bb.44(0x40000000)
  
    %226:gr8 = COPY %369
    %219:gr8 = MOV8ri 80
    CMP32rr %316, %317, implicit-def $eflags
    %370:gr8 = COPY %219
    JCC_1 %bb.44, 15, implicit $eflags
  
  bb.43.BB_108:
    successors: %bb.44(0x80000000)
  
    %370:gr8 = COPY %226
  
  bb.44.BB_108:
    successors: %bb.45(0x40000000), %bb.46(0x40000000)
  
    %221:gr8 = COPY %370
    %214:gr8 = MOV8ri 81
    CMP32rr %314, %315, implicit-def $eflags
    %371:gr8 = COPY %214
    JCC_1 %bb.46, 15, implicit $eflags
  
  bb.45.BB_108:
    successors: %bb.46(0x80000000)
  
    %371:gr8 = COPY %221
  
  bb.46.BB_108:
    successors: %bb.47(0x40000000), %bb.48(0x40000000)
  
    %216:gr8 = COPY %371
    %209:gr8 = MOV8ri 82
    CMP32rr %312, %313, implicit-def $eflags
    %372:gr8 = COPY %209
    JCC_1 %bb.48, 15, implicit $eflags
  
  bb.47.BB_108:
    successors: %bb.48(0x80000000)
  
    %372:gr8 = COPY %216
  
  bb.48.BB_108:
    successors: %bb.49(0x40000000), %bb.50(0x40000000)
  
    %211:gr8 = COPY %372
    %204:gr8 = MOV8ri 83
    CMP32rr %310, %311, implicit-def $eflags
    %373:gr8 = COPY %204
    JCC_1 %bb.50, 15, implicit $eflags
  
  bb.49.BB_108:
    successors: %bb.50(0x80000000)
  
    %373:gr8 = COPY %211
  
  bb.50.BB_108:
    successors: %bb.51(0x40000000), %bb.52(0x40000000)
  
    %206:gr8 = COPY %373
    %199:gr8 = MOV8ri 84
    CMP32rr %308, %309, implicit-def $eflags
    %374:gr8 = COPY %199
    JCC_1 %bb.52, 15, implicit $eflags
  
  bb.51.BB_108:
    successors: %bb.52(0x80000000)
  
    %374:gr8 = COPY %206
  
  bb.52.BB_108:
    successors: %bb.53(0x40000000), %bb.54(0x40000000)
  
    %201:gr8 = COPY %374
    %194:gr8 = MOV8ri 85
    CMP32rr %306, %307, implicit-def $eflags
    %375:gr8 = COPY %194
    JCC_1 %bb.54, 15, implicit $eflags
  
  bb.53.BB_108:
    successors: %bb.54(0x80000000)
  
    %375:gr8 = COPY %201
  
  bb.54.BB_108:
    successors: %bb.55(0x40000000), %bb.56(0x40000000)
  
    %196:gr8 = COPY %375
    %189:gr8 = MOV8ri 86
    CMP32rr %304, %305, implicit-def $eflags
    %376:gr8 = COPY %189
    JCC_1 %bb.56, 15, implicit $eflags
  
  bb.55.BB_108:
    successors: %bb.56(0x80000000)
  
    %376:gr8 = COPY %196
  
  bb.56.BB_108:
    successors: %bb.57(0x40000000), %bb.58(0x40000000)
  
    %191:gr8 = COPY %376
    %184:gr8 = MOV8ri 87
    CMP32rr %302, %303, implicit-def $eflags
    %377:gr8 = COPY %184
    JCC_1 %bb.58, 15, implicit $eflags
  
  bb.57.BB_108:
    successors: %bb.58(0x80000000)
  
    %377:gr8 = COPY %191
  
  bb.58.BB_108:
    successors: %bb.59(0x40000000), %bb.60(0x40000000)
  
    %186:gr8 = COPY %377
    %179:gr8 = MOV8ri 88
    CMP32rr %300, %301, implicit-def $eflags
    %378:gr8 = COPY %179
    JCC_1 %bb.60, 15, implicit $eflags
  
  bb.59.BB_108:
    successors: %bb.60(0x80000000)
  
    %378:gr8 = COPY %186
  
  bb.60.BB_108:
    successors: %bb.61(0x40000000), %bb.62(0x40000000)
  
    %181:gr8 = COPY %378
    %174:gr8 = MOV8ri 89
    CMP32rr %298, %299, implicit-def $eflags
    %379:gr8 = COPY %174
    JCC_1 %bb.62, 15, implicit $eflags
  
  bb.61.BB_108:
    successors: %bb.62(0x80000000)
  
    %379:gr8 = COPY %181
  
  bb.62.BB_108:
    successors: %bb.63(0x40000000), %bb.64(0x40000000)
  
    %176:gr8 = COPY %379
    %169:gr8 = MOV8ri 90
    CMP32rr %296, %297, implicit-def $eflags
    %380:gr8 = COPY %169
    JCC_1 %bb.64, 15, implicit $eflags
  
  bb.63.BB_108:
    successors: %bb.64(0x80000000)
  
    %380:gr8 = COPY %176
  
  bb.64.BB_108:
    successors: %bb.11(0x80000000)
  
    %171:gr8 = COPY %380
    %166:gr32 = ADD32ri %34, 1, implicit-def $eflags
    %165:gr64_nosp = MOVSX64rr32 %34
    MOV8mr %55, 1, %165, 0, $noreg, %171 :: (store (s8) into %ir.177, !tbaa !11)
    %381:gr32 = COPY %166
  
  bb.11.BB_109:
    successors: %bb.2(0x40000000), %bb.12(0x40000000)
  
    %42:gr32 = COPY %381
    %348:gr64 = ADD64ri32 %33, 1, implicit-def $eflags
    CMP64rr %348, %117, implicit-def $eflags
    %351:gr64_nosp = COPY %348
    %352:gr32 = COPY %42
    %382:gr32 = COPY %42
    JCC_1 %bb.2, 5, implicit $eflags
  
  bb.12.BB_110:
    %44:gr32 = COPY %382
    %350:gr64_nosp = MOVSX64rr32 %44
    MOV8mi %55, 1, %350, 0, $noreg, 0 :: (store (s8) into %ir.183, !tbaa !11)
    $rax = COPY %55
    RET64 implicit $rax

...
